/* Copyright (c) 2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import org.jastadd.Configuration;

/**
 * Options for JastAdd
 *
 * These used to be static fields in ASTNode.
 * They are now moved to the Grammar node and made non-static.
 */
aspect Configuration {
  /**
   * Provides a reference to the grammar root node for all
   * nodes in the AST.
   */
  inh lazy Grammar ASTNode.grammar();
  eq Grammar.getChild().grammar() = this;
  syn Grammar Grammar.grammar() = this;

  private Configuration Grammar.configuration = null;

  public void Grammar.setConfiguration(Configuration config) {
    configuration = config;
  }

  /**
   * Provides a reference to the JastAdd configuration for all
   * nodes in the AST.
   */
  inh lazy Configuration ASTNode.config();
  eq Grammar.getChild().config() = config();
  syn Configuration Grammar.config() {
    if (configuration == null) {
      throw new Error("Configuration object not initialized!");
    }
    return configuration;
  }
}
