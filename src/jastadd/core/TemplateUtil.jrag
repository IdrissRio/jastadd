/* Copyright (c) 2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import org.jastadd.tinytemplate.*;

aspect TemplateUtil {
  inh lazy TemplateContext ASTNode.parentContext();

  eq Grammar.getChild().parentContext() = templateContext();

  /**
   * Root template context for the grammar
   */
  syn lazy TemplateContext Grammar.templateContext() {
    TinyTemplate tt = new TinyTemplate();
    tt.setIndentation(ASTNode.ind);
    tt.throwExceptions(true);
    loadTemplates(tt, "ast/ASTNode");
    loadTemplates(tt, "ast/CopyNode");
    loadTemplates(tt, "ast/NodeConstructor");
    loadTemplates(tt, "ast/State");
    loadTemplates(tt, "ast/Attributes");
    loadTemplates(tt, "core/Synchronization");
    loadTemplates(tt, "ast/Comments");
    loadTemplates(tt, "ast/Rewrites");
    loadTemplates(tt, "ast/CircularCollection");
    loadTemplates(tt, "ast/InheritedAttributes");
    loadTemplates(tt, "ast/Circular");
    loadTemplates(tt, "ast/CheckTreeStructure");
    if (grammar().incremental) {
      loadTemplates(tt, "incremental/DDGNode");
    }
    return new SimpleContext(tt, this);
  }

  private void Grammar.loadTemplates(TinyTemplate tt, String templateFile) {
    try {
      InputStream in = getClass().getResourceAsStream(
          "/template/" + templateFile + ".tt");
      if (in == null) {
        System.err.println("WARNING: Could not load template file " +
            templateFile);
        return;
      }
      tt.loadTemplates(in);
      in.close();
    } catch (TemplateParser.SyntaxError e) {
      System.err.println("WARNING: Could not load template file " +
          templateFile);
      System.err.println(e.getMessage());
    } catch (IOException e) {
      System.err.println("WARNING: Could not load template file " +
          templateFile);
      System.err.println(e.getMessage());
    }
  }

  syn lazy TemplateContext ASTDecl.templateContext() {
    return new SimpleContext(parentContext(), this);
  }
  
  syn lazy TemplateContext AttrDecl.templateContext() {
    return new SimpleContext(parentContext(), this);
  }

  syn lazy TemplateContext AttrEq.templateContext() {
    return new SimpleContext(parentContext(), this);
  }

  syn lazy TemplateContext Rewrite.templateContext() {
    return new SimpleContext(parentContext(), this);
  }

  syn lazy TemplateContext RewriteList.templateContext() {
    return new SimpleContext(parentContext(), this);
  }

  syn lazy TemplateContext Components.templateContext() {
    return new SimpleContext(parentContext(), this);
  }
  
}
