/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Incremental evaluation code generation helper methods.
 */
aspect IncrementalEval {

  public void ASTDecl.genIncremental(PrintWriter out) {
    if (!grammar().incremental) return;
    TemplateContext tt = templateContext(); 
    if (!grammar().incrementalDebug && name().equals("ASTNode")) {
      tt.expand("ASTDecl.relativeNodeIDMethodWithRewrite", out);
    }
    genIncrementalHandlers(out);
    genIncrementalCopyHandlers(out);
    jjtGenIncrementalTreeModification(out);
    jjtGenIncrementalNTAChildCheck(out);
    jjtGenIncrementalAffectedValue(out);
    jjtGenIncrementalReactToChange(out);
    jjtGenIncrementalReactToASTChange(out);
    jjtGenIncrementalState(out);
    genIncrementalRegions(out);
    genIncrementalDebug(out);
  }

  /**
   * Returns a list of all cached attributes (syn, inh).
   */ 
  public ArrayList ASTDecl.listOfCachedAttributes() {
    ArrayList list = new ArrayList();
    for(int k = 0; k < getNumSynEq(); k++) {
       AttrDecl attr = getSynEq(k).decl();
       if (attr.getLazy() || attr.isCircular()) 
        list.add(attr);
    }
    for(int k = 0; k < getNumInhDecl(); k++) {
      InhDecl attr = getInhDecl(k);
       if (attr.getLazy() || attr.isCircular()) 
        list.add(attr);
    }
    return list;
  }

  public void ASTDecl.jjtGenIncrementalNTAChildCheck(PrintWriter stream) {
    if (!grammar().incremental) return; 
    // collect attributes
    ArrayList list = new ArrayList();
    for(int k = 0; k < getNumSynDecl(); k++) {
      AttrDecl attr = getSynDecl(k);
      if (attr.isNTA()) 
        list.add(attr);
    }
    for(int k = 0; k < getNumInhDecl(); k++) {
      AttrDecl attr = getInhDecl(k);
      if (attr.isNTA()) 
        list.add(attr);
    }
    // method signature
    stream.println(ind + "protected boolean " + name() + ".childIsNTA(int index) {");
    // attribute code
    boolean first = true;
    for (Iterator itr = list.iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      if (first) {
        stream.print(ind(2) + "if (");
        first = false;
      } else stream.print(" || ");
      stream.print("index == " +  attr.indexNTAchild());
    }
    if (!first) {
      stream.println(")");
      stream.println(ind(3) + "return true;");
    }
    // method end
    if (name().equals("ASTNode"))
      stream.println(ind(2) + "return false;");
    else stream.println(ind(2) + "return super.childIsNTA(index);");
    stream.println(ind + "}");

    if (name().equals("List")) {
      stream.println(ind + "public boolean List.inc_internalNTAList = false;");
      stream.println(ind + "public java.util.Map List.inc_internalNTAList_map;");
      stream.println(ind + "public void List.inc_internalNTAList(java.util.Map m) {");
      stream.println(ind(2) + "inc_internalNTAList = true;");
      stream.println(ind(2) + "inc_internalNTAList_map = m;");
      stream.println(ind + "}");
    }
  }
}
