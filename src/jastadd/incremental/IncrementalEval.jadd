/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Incremental evaluation code generation helper methods.
 */
aspect IncrementalEval {

  public void ASTDecl.genIncremental(PrintWriter out) {
    if (!config().incremental()) return;

    TemplateContext tt = templateContext();

    tt.expand("ASTDecl.relativeNodeIDMethodWithRewrite", out);

    tt.expand("List.internalNTAList", out);

    tt.bind("NtaIndexCheck", emitNtaIndexCheckString());
    tt.expand("ASTDecl.childIsNtaMethod", out);

    genIncrementalHandlers(out);
    genIncrementalCopyHandlers(out);
    genIncrementalNotification(out);
    genIncrementalState(out);
    genIncrementalRegions(out);
    genIncrementalCleanup(out);
    genIncrementalDebug(out);
  }

  /**
   * Returns a list of all cached attributes (syn, inh).
   */
  public ArrayList<AttrDecl> ASTDecl.listOfCachedAttributes() {
    ArrayList<AttrDecl> list = new ArrayList<AttrDecl>();
    if (config().rewriteCircularNTA() && hasRewriteAttribute()) {
      list.add(getCircularRewriteDecl());
    }
    for (int k = 0; k < getNumSynEq(); k++) {
      AttrDecl attr = getSynEq(k).decl();
      if (attr != null && attr.isMemoized()) {
        list.add(attr);
      }
    }
    for (int k = 0; k < getNumInhDecl(); k++) {
      InhDecl attr = getInhDecl(k);
      if (attr.isMemoized()) {
        list.add(attr);
      }
    }
    return list;
  }

  /**
   * Returns a list of NTAs declared as attributes (syn, inh).
   */
  public ArrayList ASTDecl.listOfNtaAttributes() {
    ArrayList list = new ArrayList();
    for (AttrDecl attr : synDecls()) {
      if (attr.isNTA()) {
        list.add(attr);
      }
    }
    for (int k = 0; k < getNumInhDecl(); k++) {
      AttrDecl attr = getInhDecl(k);
      if (attr.isNTA()) {
        list.add(attr);
      }
    }
    return list;
  }

  /**
   * Creates string with code checking whether a given index
   * corresponds to the index of an NTA child defined as an
   * attribute (syn, inh).
   */
  public String ASTDecl.emitNtaIndexCheckString() {
    StringBuffer res = new StringBuffer();
    boolean firstAttr = true;
    for (Iterator itr = listOfNtaAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      if (firstAttr) {
        res.append("if (");
        firstAttr = false;
      } else {
        res.append(" || ");
      }
      res.append("index == " + attr.indexNTAchild());
    }
    if (!firstAttr) {
      res.append(") return true;");
    }
    return res.toString();
  }
}
