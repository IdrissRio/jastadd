/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 aspect IncrementalNotification {
 
  public void ASTDecl.genIncrementalNotification(PrintWriter stream) {
    if (!grammar().incremental) return; 
    
    TemplateContext tt = templateContext();
    
    tt.bind("IsAstNode", name().equals("ASTNode"));
    if (!grammar().fullFlush) {
      tt.expand("ASTNode.flushRewritesInitValue", stream);
      tt.expand("ASTNode.flushRewritesHasEnclosingRewriteMethod", stream);
    }
    tt.expand("ASTNode.incFlushRewritesLocateEnclosingRewriteMethod", stream);
    tt.expand("ASTNode.incResetRewritesMethod", stream);
    tt.expand("ASTNode.incRestoreEnclosingRewriteMethod", stream);
    tt.expand("ASTNode.incRestoreInitialForIndexMethod", stream);
    tt.expand("ASTNode.incLocateInitialCopyMethod", stream);
    
    tt.bind("AttrAffectedChecks", emitAttrAffectedChecksString());
    tt.expand("ASTDecl.incValueAffectedMethod", stream);
    
    tt.bind("AttrFlushChecks", emitAttrFlushChecksString());
    tt.expand("ASTDecl.incReactToDepChangeMethod", stream);
    
    tt.bind("FlushAttrs", emitFlushAttrsString());
    tt.expand("ASTDecl.incFlushMethod", stream);

    tt.expand("ASTNode.incFlushChildMethod", stream);    
    
    tt.bind("IsListNode", name().equals("List"));
    tt.bind("IsOptNode", name().equals("Opt"));
    tt.bind("FlushNTAs", emitFlushNTAsString());
    tt.expand("ASTDecl.incFlushNTAMethod", stream);
    
    tt.expand("ASTDecl.incFlushRegionRootMethod", stream);
    
    tt.expand("ASTNode.incCheckRegionForInnerRewriteMethod", stream);

    tt.bind("FlushNTAsInRegion", emitFlushNTAsInRegionString());
    tt.expand("ASTDecl.incFlushRegionMethod", stream);

    tt.expand("ASTNode.incFlushRegionRewritesMethod", stream);

    tt.bind("FlushNtaSubTrees", emitFlushNtaSubTreesString());
    tt.bind("TransferSetsFromAttrTokenHandlers", emitTransferSetsFromAttrTokenHandlersString());
    tt.expand("ASTDecl.incFlushSubTreeMethod", stream);     
    
    tt.expand("ASTNode.incNotifyForRemoveMethod", stream);    
  }
  
  /**
   * Creates string with code flushing NTA substrings.
   */
  public String ASTDecl.emitFlushNtaSubTreesString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      tt.bind("IsNTA", (attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() 
              && !(attr.type().equals("String") || attr.type().equals("java.lang.String")));
      tt.bind("IsParamAttr", attr.isParamAttr());
      Components comp = attr.findCorrespondingNTA();
      tt.bind("IsNtaWithTree", comp == null || !(comp instanceof OptionalComponentNTA || comp instanceof ListComponentsNTA));
      tt.bind("AttrSign", attr.attributeSignature());
      res.append(tt.expand("ASTDecl.flushNtaSubtree"));    
    }
    return res.toString();
  }
  
  /**
   * Creates string with code transfering sets from attribute and token handlers.
   */
  public String ASTDecl.emitTransferSetsFromAttrTokenHandlersString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      tt.bind("IsParamAttr", attr.isParamAttr());
      tt.bind("AttrSign", attr.attributeSignature());
      res.append(tt.expand("ASTDecl.transferSetsFromAttributeHandler"));
    }
    for (int c = 0; c < getNumComponents(); c++) {
      Components comp = getComponents(c);
      if (comp instanceof TokenComponent) {
        tt.bind("Id", ((TokenComponent)comp).getTokenId().getID());
        res.append(tt.expand("ASTDecl.transferSetsFromTokenHandler"));
      }
    }
    return res.toString();
  }
  
  /**
   * Creates string with code flushing NTAs in region.
   */
  public String ASTDecl.emitFlushNTAsInRegionString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      tt.bind("IsNTA", (attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() 
            && !(attr.type().equals("String") || attr.type().equals("java.lang.String")));
      tt.bind("IsParamAttr", attr.getNumParameter() > 0);
      tt.bind("AttrSign", attr.attributeSignature());
      Components comp = attr.findCorrespondingNTA();
      tt.bind("IsNtaWithTree", comp == null || comp instanceof OptionalComponentNTA || comp instanceof ListComponentsNTA);
      tt.bind("AttrResetVisit", attr.resetVisit());
      tt.bind("AttrResetCache", attr.resetCache());
      res.append(tt.expand("ASTDecl.flushNTAsInRegion"));
    }
    return res.toString();
  }
  
  /**
   * Creates string with code flushing NTAs.
   */
  public String ASTDecl.emitFlushNTAsString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() && 
      		!(attr.type().equals("String") || attr.type().equals("java.lang.String")) &&
      		attr.getNumParameter() == 0) {
        Components comp = attr.findCorrespondingNTA();
        if (comp == null || comp instanceof OptionalComponentNTA || comp instanceof ListComponentsNTA) {
          tt.bind("AttrSign", attr.attributeSignature());
          tt.bind("AttrResetVisit", attr.resetVisit());
          tt.bind("AttrResetCache", attr.resetCache());
          res.append(tt.expand("ASTDecl.ntaFlush"));        
        }
      }
    }
    return res.toString();
  }
  
  /**
   * Creates string with code checking if the value of an attribute,
   * identified with name and parameters, is a affected by a change.
   * TODO: Add support for attributes with more than one parameter
   */
  public String ASTDecl.emitAttrAffectedChecksString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    boolean firstAttr = true;      
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      res.append(firstAttr ? "" : "else ");
      tt.bind("AttrResetVisit", attr.resetVisit());
      tt.bind("AttrResetCache", attr.resetCache());
      tt.bind("IsNTA", attr.getNTA() || attr.isNTA());
      tt.bind("IsParamAttr", attr.getNumParameter() > 0);
      tt.bind("IsAttrWithOneParam", attr.getNumParameter() == 1);
      tt.bind("IsPrimitiveAttr", attr.isPrimitive());
      tt.bind("AttrSign", attr.attributeSignature());
      tt.bind("AttrName", attr.getName());
      tt.bind("AttrType", attr.type());
      String attrObjectType = attr.type();
      attrObjectType = attrObjectType.substring(0,1).toUpperCase() + attrObjectType.substring(1);
      tt.bind("AttrObjectType", attrObjectType);
      tt.bind("ParamTypeSignature", attr.getNumParameter() > 0 ? attr.getParameter(0).getTypeInSignature(): "");
      res.append(tt.expand("ASTDecl.checkAttrValueAffected"));
      firstAttr = false;
    }
    return res.toString();
  }
  
  /**
   * Creates string with code checking if an attribute, identified with 
   * name and parameters, should be flushed and dependencies notified.
   */  
  public String ASTDecl.emitAttrFlushChecksString() {
    if (grammar().incrementalLevelNode || grammar().incrementalLevelRegion) {
      return "";
    }
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    boolean firstAttr = true;      
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      res.append(firstAttr ? "" : "else ");
      tt.bind("IsParamAttr", attr.getNumParameter() > 0);
      tt.bind("AttrSign", attr.attributeSignature());
      tt.bind("AttrType", attr.type());
      tt.bind("AttrResetVisit", attr.resetVisit());
      tt.bind("AttrResetCache", attr.resetCache());
      tt.bind("IsNTA", (attr.isNTA() || attr.getNTA()) && 
      		!attr.isPrimitive() && !(attr.type().equals("String") || 
      		attr.type().equals("java.lang.String")));
      res.append(tt.expand("ASTDecl.attrFlushCheck"));
      firstAttr = false;
    }
    return res.toString();
  }

  /**
   * Creates string with code flushing attributes.
   */    
  public String ASTDecl.emitFlushAttrsString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for(Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      tt.bind("IsParamAttr", attr.getNumParameter() > 0);
      tt.bind("AttrSign", attr.attributeSignature());
      tt.bind("AttrResetVisit", attr.resetVisit());
      tt.bind("AttrResetCache", attr.resetCache());
      tt.bind("IsNTA", (attr.isNTA() || attr.getNTA()) && 
      		!attr.isPrimitive() && !(attr.type().equals("String") || 
      		attr.type().equals("java.lang.String")));
      res.append(tt.expand("ASTDecl.attrFlush"));
    }
    return res.toString();
  }
  
}
