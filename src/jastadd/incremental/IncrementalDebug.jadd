/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalDebug {

  /**
   * Generate debugging code for incremental evaluation-
   * This includes code for identifying nodes with relative node IDs,
   * dumping cached values and dummping of DDG dependencies.
   */
  public void ASTDecl.genIncrementalDebug(PrintWriter out) {
    if (!config().incrementalDebug()) return;
    TemplateContext tt = templateContext();
    tt.expand("ASTDecl.relativeNodeIDMethod", out);
    tt.expand("ASTDecl.printParamListMethod", out);
    tt.expand("ASTDecl.printValueMethod", out);
    tt.bind("DumpAttributeValues", genDumpAttributeValuesString());
    tt.bind("DumpCollAttributeValues", genDumpCollAttributeValuesString());
    tt.expand("ASTDecl.dumpCachedValuesMethod", out);
    tt.bind("DumpTokenDeps", genDumpTokenDepsString());
    tt.bind("DumpAttributeDeps", genDumpAttributeDepsString());
    tt.bind("DumpCollAttributeDeps", genDumpCollAttributeDepsString());
    tt.expand("ASTDecl.dumpDependenciesMethod", out);
    tt.bind("DumpDepsInNTAs", genDumpDepsInNTAsString());
    tt.expand("ASTDecl.dumpDepsInTreeMethod", out);
  }

  /**
   * Generate string with code for dumping dependencies in NTAs
   */
  public String ASTDecl.genDumpDepsInNTAsString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (AttrDecl attr : listOfCachedAttributes()) {
      if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() &&
         !(attr.type().equals("String") || attr.type().equals("java.lang.String"))) {
        tt.bind("IsParameterized", attr.getNumParameter() > 0);
        tt.bind("AttrSign", attr.signature());
        res.append(tt.expand("ASTDecl.checkAndDumpNTADeps"));
      }
    }
    return res.toString();
  }

  /**
   * Generate string with code for dumping collection attribute dependencies.
   */
  public String ASTDecl.genDumpCollAttributeDepsString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    // Add dump string for each coll attribute.
    for (int k = 0; k < getNumCollDecl(); k++) {
      CollDecl attr = getCollDecl(k);
      tt.bind("AttrSign",  attr.signature());
      res.append(tt.expand("ASTDecl.checkAndDumpCollAttributeDeps"));
    }
    return res.toString();
  }

  /**
   * Generate string with code for dumping attribute dependencies.
   */
  public String ASTDecl.genDumpAttributeDepsString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    // Add dump string for each attribute
    for (AttrDecl attr : listOfCachedAttributes()) {
      tt.bind("IsParameterized", attr.getNumParameter() > 0);
      tt.bind("IsNTA", (attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() &&
            !(attr.type().equals("String") || attr.type().equals("java.lang.String")));
      tt.bind("AttrSign",  attr.signature());
      res.append(tt.expand("ASTDecl.checkAndDumpAttributeDeps"));
    }
    return res.toString();
  }

  /**
   * Generate string with code for dumping token dependencies.
   */
  public String ASTDecl.genDumpTokenDepsString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    if (config().incrementalLevelParam() || config().incrementalLevelAttr()) {
      for (Component c : components()) {
        if (c instanceof TokenComponent && !c.isNTA()) {
          tt.bind("Id",  ((TokenComponent) c).name());
          res.append(tt.expand("ASTDecl.checkAndDumpTokenDeps"));
        }
      }
    }
    return res.toString();
  }

  /**
   * Generate string with code for dumping attribute values.
   */
  public String ASTDecl.genDumpAttributeValuesString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (AttrDecl attr : listOfCachedAttributes()) {
      tt.bind("IsParameterized", attr.getNumParameter() > 0);
      tt.bind("PrintAsObject", attr.isPrimitive() || attr.getType().equals("String"));
      tt.bind("AttrSign", attr.signature());
      res.append(tt.expand("ASTDecl.dumpCachedAttributeValue"));
    }
    return res.toString();
  }

  /**
   * Generate string with code for dumping collection attribute values.
   */
  public String ASTDecl.genDumpCollAttributeValuesString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (int k = 0; k < getNumCollDecl(); k++) {
      CollDecl attr = getCollDecl(k);
      tt.bind("AttrSign", attr.signature());
      res.append(tt.expand("ASTDecl.dumpCollAttributeValue"));
    }
    return res.toString();
  }
}
