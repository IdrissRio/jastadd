/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalASTChange {

  String TokenComponent.jaddGenIncrementalTokenChange(String host, String varName) {
    if (!grammar().incremental) return ""; 
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
//      buf.append("    if (!state().IN_CONSTRUCTION && !state().IN_REWRITE_EVAL && !state().IN_ATTR_STORE_EVAL) {\n");
      buf.append("    if (!state().IN_CONSTRUCTION && !state().IN_ATTR_STORE_EVAL) {\n");
    }
    if (grammar().incrementalLevelRegion) {
      buf.append("    if (!state().IN_CONSTRUCTION && !(state().IN_COMPUTATION > 0)) {\n");
    }
    if (isNTA()) {
      buf.append("     if (get#ID#_computed) {\n");
      buf.append("       get#ID#_computed = false;\n");
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      buf.append("       get#ID#_handler.notifyDependencies();\n");
      }
      if (grammar().incrementalLevelNode) {
      buf.append("       handler.flushRegion();\n");
      }
      if (grammar().incrementalLevelRegion) {
      buf.append("       handler().flushRegion();\n");
      }
      buf.append("     }\n");
    } else {
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
        if (grammar().incrementalTrack) {
          buf.append("       get#ID#_handler.trackChange();\n");    
        }
        buf.append("       get#ID#_handler.notifyDependencies();\n");
      }
      if (grammar().incrementalLevelNode) {
        buf.append("       handler.flushRegion();\n");
        String type = getTokenId().getTYPE();
        boolean isStringToken = type.equals("String") || type.equals("java.lang.String");
        boolean isPrimitiveToken = isPrimitive();
        if (!isStringToken && !isPrimitiveToken) {
          buf.append("       if (token#TYPEINSIGNATURE#_#ID# instanceof ASTNode) {\n");
          buf.append("         token#TYPEINSIGNATURE#_#ID#.handler.flushRegion();\n");
          buf.append("       }\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        buf.append("       handler().flushRegion();\n");
        String type = getTokenId().getTYPE();
        boolean isStringToken = type.equals("String") || type.equals("java.lang.String");
        boolean isPrimitiveToken = isPrimitive();
        if (!isStringToken && !isPrimitiveToken) {
          buf.append("       if (token#TYPEINSIGNATURE#_#ID# instanceof ASTNode && token#TYPEINSIGNATURE#_#ID#.isRegionRoot()) {\n");
          buf.append("         token#TYPEINSIGNATURE#_#ID#.handler().flushRegion();\n");
          buf.append("       }\n");
        }
      }
      buf.append("       ASTNode initial = inc_locateInitialCopy();\n");
      buf.append("       if (initial != null) {\n");
      buf.append("         state().enterConstruction();\n");
      buf.append("         ((#HOST#)initial).set#ID#(#VARNAME#);\n");
      buf.append("         state().exitConstruction();\n");
      buf.append("         return;\n");
      buf.append("       }\n");
    }
    buf.append("    }\n");
    String s = buf.toString();
    s = s.replaceAll("#ID#", getTokenId().getID());
    s = s.replaceAll("#TYPEINSIGNATURE#", ASTNode.convTypeNameToSignature(getTokenId().getTYPE()));
    s = s.replaceAll("#HOST#", host);
    s = s.replaceAll("#VARNAME#", varName);
    return s;
  }
}
