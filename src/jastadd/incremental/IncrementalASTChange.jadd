/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalASTChange {

  public void ASTDecl.jjtGenIncrementalSetParent(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
//    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_REWRITE_EVAL && !state().IN_ATTR_STORE_EVAL) {");
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_ATTR_STORE_EVAL) {");
    }
    if (grammar().incrementalLevelRegion) {
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !(state().IN_COMPUTATION > 0)) {");
    }
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      stream.println(ind(3) + "getParent_handler.notifyDependencies();");
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(2) + "if (parent != null) {");
      stream.println(ind(3) +   "parent.handler.flushRegion();");
      stream.println(ind(2) + "}");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(2) + "if (parent != null) {");
      stream.println(ind(3) +   "parent.handler().flushRegion();");
      stream.println(ind(2) + "}");
    }
    stream.println(ind(2) + "}");
    stream.println(ind(2) + "if (parent != null) {");
    stream.println(ind(3) +   "int index = -1;");
    stream.println(ind(3) +   "for (int i = 0; parent.children != null && i < parent.children.length; i++) {");
    stream.println(ind(4) +     "if (parent.children[i] == this) {");
    stream.println(ind(5) +       "index = i;");
    stream.println(ind(5) +       "break;");
    stream.println(ind(4) +     "}");
    stream.println(ind(3) +   "}");
    stream.println(ind(3) +   "if (index >= 0)");
    stream.println(ind(4) +     "parent.removeChild(index);");
    stream.println(ind(2) + "}");
    stream.println(ind(2) + "if (node != null) {");
    stream.println(ind(3) +   "inc_changeState(node.inc_state);");
    stream.println(ind(2) + "} else inc_changeState(inc_GARBAGE);");
  }

  String TokenComponent.jaddGenIncrementalTokenChange(String varName) {
    if (!grammar().incremental) return ""; 
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
//      buf.append("    if (!state().IN_CONSTRUCTION && !state().IN_REWRITE_EVAL && !state().IN_ATTR_STORE_EVAL) {\n");
      buf.append("    if (!state().IN_CONSTRUCTION && !state().IN_ATTR_STORE_EVAL) {\n");
    }
    if (grammar().incrementalLevelRegion) {
      buf.append("    if (!state().IN_CONSTRUCTION && !(state().IN_COMPUTATION > 0)) {\n");
    }
    if (isNTA()) {
      buf.append("     if (get#ID#_computed) {\n");
      buf.append("       get#ID#_computed = false;\n");
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      buf.append("       get#ID#_handler.notifyDependencies();\n");
      }
      if (grammar().incrementalLevelNode) {
      buf.append("       handler.flushRegion();\n");
      }
      if (grammar().incrementalLevelRegion) {
      buf.append("       handler().flushRegion();\n");
      }
      buf.append("     }\n");
    } else {
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
        if (grammar().incrementalTrack) {
          buf.append("       get#ID#_handler.trackChange();\n");    
        }
        buf.append("       get#ID#_handler.notifyDependencies();\n");
      }
      if (grammar().incrementalLevelNode) {
        buf.append("       handler.flushRegion();\n");
        String type = getTokenId().getTYPE();
        boolean isStringToken = type.equals("String") || type.equals("java.lang.String");
        boolean isPrimitiveToken = isPrimitive();
        if (!isStringToken && !isPrimitiveToken) {
          buf.append("       if (token#TYPEINSIGNATURE#_#ID# instanceof ASTNode) {\n");
          buf.append("         token#TYPEINSIGNATURE#_#ID#.handler.flushRegion();\n");
          buf.append("       }\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        buf.append("       handler().flushRegion();\n");
        String type = getTokenId().getTYPE();
        boolean isStringToken = type.equals("String") || type.equals("java.lang.String");
        boolean isPrimitiveToken = isPrimitive();
        if (!isStringToken && !isPrimitiveToken) {
          buf.append("       if (token#TYPEINSIGNATURE#_#ID# instanceof ASTNode && token#TYPEINSIGNATURE#_#ID#.isRegionRoot()) {\n");
          buf.append("         token#TYPEINSIGNATURE#_#ID#.handler().flushRegion();\n");
          buf.append("       }\n");
        }
      }
      buf.append("       ASTNode initial = inc_locateInitialCopy();\n");
      buf.append("       if (initial != null) {\n");
      buf.append("         state().enterConstruction();\n");
      buf.append("         ((#HOST#)initial).set#ID#(" + varName + ");\n");
      buf.append("         state().exitConstruction();\n");
      buf.append("         return;\n");
      buf.append("       }\n");
    }
    buf.append("    }\n");
    return buf.toString();
  }

  public void ASTDecl.jjtGenIncrementalASTChangeAddChild1(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam) {
      stream.println(ind(2) + "int i = getNumChildNoTransform() - 1;");
      stream.println(ind(2) + "if (getChild_handler[i] == null)");
      if (grammar().incrementalPropLimit) {
      stream.println(ind(3) +   "getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i), !node.mayHaveRewrite());");
      } else {
      stream.println(ind(3) +   "getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i));");
      }
      stream.println(ind(2) + "state().addHandlerDepTo(getChild_handler[i]);");    
      stream.println(ind(2) + "if (state().IN_ATTR_STORE_EVAL && !node.mayHaveRewrite()) node.is$Final(is$Final());");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(2) + "state().addHandlerDepTo(getChild_handler);");
      stream.println(ind(2) + "if (state().IN_ATTR_STORE_EVAL && !node.mayHaveRewrite()) node.is$Final(is$Final());");
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(2) + "if (node != null) {");
      stream.println(ind(3) +   "state().addHandlerDepTo(node.handler);");
      stream.println(ind(3) +   "if (state().IN_ATTR_STORE_EVAL && !node.mayHaveRewrite()) node.is$Final(is$Final());");
      stream.println(ind(2) + "}");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(2) + "if (node != null && node.isRegionRoot()) {");
      stream.println(ind(3) +   "state().addHandlerDepTo(node.handler());");
      stream.println(ind(3) +   "if (state().IN_ATTR_STORE_EVAL && !node.mayHaveRewrite()) node.is$Final(is$Final());");
      stream.println(ind(2) + "}");
    }
  }

  public void ASTDecl.jjtGenIncrementalASTChangeSetChild1(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
//    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_REWRITE_EVAL && !state().IN_ATTR_STORE_EVAL) {");
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_ATTR_STORE_EVAL) {");
    }
    if (grammar().incrementalLevelRegion) {
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !(state().IN_COMPUTATION > 0)) {");
    }
    // notify current child
    stream.println(ind(3) +   "if (children != null && i < children.length && children[i] != null) {");
    stream.println(ind(4) +     "children[i].inc_notifyForRemove();");
    //if (grammar().incrementalDebug) stream.println(ind(4) +     "children[i].inc_clearDepsInTree();");
    stream.println(ind(3) +   "}");

    // notify dependencies
    if (grammar().incrementalLevelParam) {  
      // notify empty
      stream.println(ind(3) +   "if (children == null) {");
      stream.println(ind(4) +     "numChildren_handler.notifyDependencies();");
      // notify add
      stream.println(ind(3) +   "} else if (i >= numChildren) {");
      stream.println(ind(4) +     "numChildren_handler.notifyDependencies();");
      stream.println(ind(4) +     "if (i > 0 && getChild_handler[i-1] != null) {");
      stream.println(ind(5) +       "getChild_handler[i-1].notifyDependencies();");
      stream.println(ind(4) +     "}");
      stream.println(ind(3) +   "}");
    }
    // notify set
    if (grammar().incrementalLevelParam) {
      stream.println(ind(3) +   "else {");
      stream.println(ind(4) +     "if (getChild_handler[i] != null) {");
      stream.println(ind(5) +       "getChild_handler[i].notifyDependencies();");
      stream.println(ind(4) +     "} else getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i));");
      stream.println(ind(3) +   "}");
    }
    if (grammar().incrementalLevelAttr) {
      //stream.println(ind(3) +   "getChild_handler.notifyDependencies();");
      stream.println(ind(3) +   "getChild_handler.flushRegion();");
    }
    if (grammar().incrementalLevelNode) {
      //stream.println(ind(3) +   "handler.notifyDependencies();");
      stream.println(ind(3) +   "if (children != null && i < children.length && children[i] != null) children[i].handler.notifyDependencies();");
      stream.println(ind(3) +   "if (i == numChildren) handler.notifyDependencies();");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(3) +   "ASTNode$DepGraphNode h = (children != null && i < children.length && children[i] != null) ? children[i].handler() : handler();");
      stream.println(ind(3) +   "if (h != null) h.notifyDependencies();");
      stream.println(ind(3) +   "if (i == numChildren) handler.notifyDependencies();");
    }
    // change in initial copy?
    stream.println(ind(3) +   "ASTNode initial  = inc_locateInitialCopy();");
    stream.println(ind(3) +   "if (initial != null) {");
    stream.println(ind(4) +     "state().enterConstruction();");
    stream.println(ind(4) +     "if (i >= initial.numChildren)");
    stream.println(ind(5) +       "initial.addChild(node);");
    stream.println(ind(4) +     "else initial.setChild(node, i);");
    stream.println(ind(4) +     "state().exitConstruction();");
    stream.println(ind(4) +     "return;");
    stream.println(ind(3) +   "}");
    stream.println(ind(2) + "}");
  }

  public void ASTDecl.jjtGenIncrementalASTChangeSetChild2(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam) 
      stream.println(ind(3) + "getChild_handler = new ASTNode$DepGraphNode[i+1>" + MIN_LIST_LIMIT + "?i+1:" + MIN_LIST_LIMIT + "];");
  }

  public void ASTDecl.jjtGenIncrementalASTChangeSetChild3(PrintWriter stream) {
    if (!grammar().incremental) return; 
    // rewrite code
    if (!grammar().fullFlush) {
      stream.println(ind(3) + "if (init_children != null) {");
      stream.println(ind(4) +   "ASTNode d[] = new ASTNode[i << 1];");
      stream.println(ind(4) +   "System.arraycopy(init_children, 0, d, 0, init_children.length);");
      stream.println(ind(4) +   "init_children = d;");
      stream.println(ind(3) + "}");
      stream.println(ind(3) + "if (rewritten_children != null) {");
      stream.println(ind(4) +   "boolean[] b = new boolean[i << 1];");
      stream.println(ind(4) +   "System.arraycopy(rewritten_children, 0, b, 0, rewritten_children.length);");
      stream.println(ind(4) +   "rewritten_children = b;");
      stream.println(ind(3) + "}");
    }
    //
    if (grammar().incrementalLevelParam) {
      stream.println(ind(3) + "if (getChild_handler != null) {");
      stream.println(ind(4) +   "ASTNode$DepGraphNode h[] = new ASTNode$DepGraphNode[i << 1];");
      stream.println(ind(4) +   "System.arraycopy(getChild_handler, 0, h, 0, getChild_handler.length);");
      stream.println(ind(4) +   "getChild_handler = h;");
      stream.println(ind(3) + "}");
    }
  }

  public void ASTDecl.jjtGenIncrementalASTChangeSetChild4(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (!grammar().fullFlush) {
      stream.println(ind(2) + "if (rewritten_children != null) {");
      stream.println(ind(3) +   "rewritten_children[i] = false;"); 
      stream.println(ind(2) + "}");   
    }
  }

  public void ASTDecl.jjtGenIncrementalASTChangeSetChild5(PrintWriter stream) {
    if (!grammar().incremental) return; 
    stream.println(ind(2) + "if (children[i] != null) {");
    stream.println(ind(3) +   "children[i].inc_throwAway();");
    stream.println(ind(3) +   "children[i].parent = null;");
    stream.println(ind(2) + "}");
  }

  public void ASTDecl.jjtGenIncrementalASTChangeInsertChild1(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam) {
      stream.println(ind(3) + "getChild_handler = new ASTNode$DepGraphNode[i + 1];");
      stream.println(ind(3) + "getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i));");
    }
  }

  public void ASTDecl.jjtGenIncrementalASTChangeInsertChild2(PrintWriter stream) {
    if (!grammar().incremental) return; 
    // rewrite code
    if (!grammar().fullFlush) {
      stream.println(ind(2) + "if (init_children != null) {");
      stream.println(ind(3) +   "ASTNode d[] = new ASTNode[init_children.length + 1];");
      stream.println(ind(3) +   "System.arraycopy(init_children, 0, d, 0, init_children.length);");
      stream.println(ind(3) +   "if (i < init_children.length) {");
      stream.println(ind(4) +     "System.arraycopy(init_children, i, d, i+1, init_children.length - i);");
      stream.println(ind(3) +   "}");
      stream.println(ind(3) +   "init_children = d;");
      stream.println(ind(2) + "}");
      stream.println(ind(2) + "if (rewritten_children != null) {");
      stream.println(ind(3) +   "boolean b[] = new boolean[rewritten_children.length + 1];");
      stream.println(ind(3) +   "System.arraycopy(rewritten_children, 0, b, 0, rewritten_children.length);");
      stream.println(ind(3) +   "if (i < rewritten_children.length) {");
      stream.println(ind(4) +     "System.arraycopy(rewritten_children, i, b, i+1, rewritten_children.length - i);");
      stream.println(ind(3) +   "}");
      stream.println(ind(3) +   "rewritten_children = b;");
      stream.println(ind(2) + "}");
    }
    //
    if (grammar().incrementalLevelParam) {
      stream.println(ind(2) + "if (getChild_handler != null) {");
      stream.println(ind(3) +   "ASTNode$DepGraphNode h[] = new ASTNode$DepGraphNode[getChild_handler.length + 1];");
      stream.println(ind(3) +   "System.arraycopy(getChild_handler, 0, h, 0, getChild_handler.length);");
//      stream.println(ind(3) +   "if (i < getChild_handler.length) {");
//      stream.println(ind(4) +     "System.arraycopy(getChild_handler, i, h, i+1, getChild_handler.length - 1);");
//      stream.println(ind(3) +   "}");
      stream.println(ind(3) +   "getChild_handler = h;");
//      stream.println(ind(3) +   "for (int k = i; k < getChild_handler.length; k++) {");
//      stream.println(ind(4) +     "if (getChild_handler[k] != null) {");
//      stream.println(ind(5) +       "getChild_handler[k].setParams(new Integer(k));");
//      stream.println(ind(4) +     "}");Region
//      stream.println(ind(3) +   "}");
      stream.println(ind(2) + "}");
    }
  }

  public void ASTDecl.jjtGenIncrementalASTChangeInsertChild3(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
//    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_REWRITE_EVAL && !state().IN_ATTR_STORE_EVAL) {");
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_ATTR_STORE_EVAL) {");
    }
    if (grammar().incrementalLevelRegion) {
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !(state().IN_COMPUTATION > 0)) {");
    }
    // notify
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      stream.println(ind(3) + "if (children == null || i > numChildren) {");
      stream.println(ind(4) +   "numChildren_handler.notifyDependencies();");
      stream.println(ind(3) + "} else {");
      stream.println(ind(4) +   "numChildren_handler.notifyDependencies();");
      if (grammar().incrementalLevelParam) { 
        stream.println(ind(4) +   "for (int k = i; k < children.length; k++) {");
        stream.println(ind(5) +     "if (getChild_handler[k] != null) {");
        stream.println(ind(6) +       "getChild_handler[k].notifyDependencies();");
        stream.println(ind(5) +     "}");
       stream.println(ind(4) +   "}");
      }
      if (grammar().incrementalLevelAttr) {
        //stream.println(ind(4) +   "getChild_handler.notifyDependencies();");
        stream.println(ind(4) +   "getChild_handler.flushRegion();");
      }
      stream.println(ind(3) + "}");
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(3) + "for (int k = i; k < children.length; k++) {");
      stream.println(ind(4) +   "ASTNode child = children[i];");
      stream.println(ind(4) +   "if (child != null) {");
      stream.println(ind(5) +     "child.handler.flushRegion();");
      stream.println(ind(4) +   "}");
      stream.println(ind(3) + "}");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(3) + "for (int k = i; k < children.length; k++) {");
      stream.println(ind(4) +   "ASTNode child = children[i];");
      stream.println(ind(4) +   "if (child != null) {");
      stream.println(ind(5) +     "child.handler().flushRegion();");
      stream.println(ind(4) +   "}");
      stream.println(ind(3) + "}");
    }
    // locate initial copy
    stream.println(ind(3) +   "ASTNode initial = inc_locateInitialCopy();");
    stream.println(ind(3) +   "if (initial != null) {");
    stream.println(ind(4) +     "state().enterConstruction();");
    stream.println(ind(4) +     "initial.insertChild(node, i);");
    stream.println(ind(4) +     "state().exitConstruction();");
    stream.println(ind(4) +     "return;");
    stream.println(ind(3) +   "}");
    stream.println(ind(2) + "}");
  }

  public void ASTDecl.jjtGenIncrementalASTChangeRemoveChild1(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
//    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_REWRITE_EVAL && !state().IN_ATTR_STORE_EVAL) {");
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !state().IN_ATTR_STORE_EVAL) {");
    }
    if (grammar().incrementalLevelRegion) {
    stream.println(ind(2) + "if (!state().IN_CONSTRUCTION && !(state().IN_COMPUTATION > 0)) {");
    }
    // notify
    stream.println(ind(4) +   "if (children[i] != null)");
    stream.println(ind(5) +     "children[i].inc_notifyForRemove();");
    if (grammar().incrementalLevelParam) {
    stream.println(ind(4) +   "numChildren_handler.notifyDependencies();");
    stream.println(ind(4) +   "for (int k = i; k < children.length; k++) {");
    stream.println(ind(5) +     "if (getChild_handler[k] != null) {");
    stream.println(ind(6) +       "getChild_handler[k].notifyDependencies();");
    stream.println(ind(5) +     "}");
    stream.println(ind(4) +   "}");
    }
    if (grammar().incrementalLevelAttr) {
      //stream.println(ind(4) +   "getChild_handler.notifyDependencies();");
      stream.println(ind(4) +   "getChild_handler.flushRegion();");
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(4) +   "handler.flushRegion();");
      stream.println(ind(3) + "for (int k = i; k < children.length; k++) {");
      stream.println(ind(4) +   "ASTNode child = children[i];");
      stream.println(ind(4) +   "if (child != null) {");
      stream.println(ind(5) +     "child.handler.flushRegion();");
      stream.println(ind(4) +   "}");
      stream.println(ind(3) + "}");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(4) + "handler().flushRegion();");
      stream.println(ind(3) + "for (int k = i; k < children.length; k++) {");
      stream.println(ind(4) +   "ASTNode child = children[i];");
      stream.println(ind(4) +   "if (child != null) {");
      stream.println(ind(5) +     "child.handler().flushRegion();");
      stream.println(ind(4) +   "}");
      stream.println(ind(3) + "}");
    }
    // locate initial copy
    stream.println(ind(4) +   "ASTNode initial = inc_locateInitialCopy();");
    stream.println(ind(4) +   "if (initial != null) {");
    stream.println(ind(5) +     "state().enterConstruction();");
    stream.println(ind(5) +     "initial.removeChild(i);");
    stream.println(ind(5) +     "state().exitConstruction();");
    stream.println(ind(5) +     "return;");
    stream.println(ind(4) +   "}");
    stream.println(ind(3) + "}");
  }

  public void ASTDecl.jjtGenIncrementalASTChangeRemoveChild2(PrintWriter stream) {
    if (!grammar().incremental) return; 
    // rewrite code
    if (!grammar().fullFlush) {
      stream.println(ind(3) + "if (init_children != null) {");
      stream.println(ind(4) +   "if (i < init_children.length && init_children[i] != null) {");
      stream.println(ind(5) +     "init_children[i].inc_throwAway();");
      stream.println(ind(4) +   "}");
      stream.println(ind(4) +   "System.arraycopy(init_children, i+1, init_children, i, init_children.length-i-1);");
      stream.println(ind(4) +   "init_children[init_children.length-1] = null;");
      stream.println(ind(3) + "}");      
      stream.println(ind(3) + "if (rewritten_children != null) {");
      stream.println(ind(4) +   "System.arraycopy(rewritten_children, i+1, rewritten_children, i, rewritten_children.length-i-1);");
      stream.println(ind(4) +   "rewritten_children[rewritten_children.length-1] = false;");
      stream.println(ind(3) + "}");
    }
    //
    if (grammar().incrementalLevelParam) {
      stream.println(ind(3) + "if (getChild_handler != null && this instanceof List) {");
      stream.println(ind(4) +   "getChild_handler[numChildren] = null;");
//      stream.println(ind(4) +   "System.arraycopy(getChild_handler, i+1, " + 
//          "getChild_handler, i, getChild_handler.length-i-1);");
//      stream.println(ind(4) +   "for (int k = i; k < getChild_handler.length; k++) {");
//      stream.println(ind(5) +     "if (getChild_handler[k] != null) {");
//      stream.println(ind(6) +       "getChild_handler[k].setParams(new Integer(k));");
//      stream.println(ind(5) +     "}");
//      stream.println(ind(4) +   "}");
      stream.println(ind(3) + "}");
    }
  }

  public void ASTDecl.jjtGenIncrementalASTChangeRemoveChild3(PrintWriter stream) {
    if (!grammar().incremental) return; 
    // prevent recursive call during state handling where setParent calls removeChild
    stream.println(ind(4) + "child.inc_throwAway();");      
  }
}