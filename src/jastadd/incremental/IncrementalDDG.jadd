/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalDDG {

  /**
   * Generates the class representing dynamic dependency graph (DDG) nodes.
   */
  public void Grammar.genIncrementalDDGNode(PrintWriter out) {
    if (!config().incremental()) return;
    TemplateContext tt = templateContext();
    tt.expand("Grammar.emitDDGNode", out);
  }

  /**
   * Generate DDG cleanup methods,
   *
   * Methods: cleanupListeners, cleanupListenersInTree
   *
   * After introducing single direction edges in the DDG flushed (emptied)
   * dependants (or listeners) may remain in the DDG. The purpose of these
   * methods is to clean up such dependants.
   */
  public void ASTDecl.genIncrementalCleanup(PrintWriter out) {
    if (!config().incremental()) return;
    TemplateContext tt = templateContext();
    tt.bind("CleanupTokenListeners", genCleanupTokenListenersString());
    tt.bind("CleanupAttributeListeners", genCleanupAttributeListenersString());
    tt.expand("ASTDecl.cleanupListenersMethod", out);
    tt.expand("ASTDecl.cleanupListenersInTreeMethod", out);
  }

  /**
   * Generate DDG nodes for storage that needs dependency tracking in an AST node.
   * The number of DDG nodes needed depend on the incremental configuration:
   *  - param: children by index, parent, attributes with parameters
   *  - attr:  children, parent, attributes
   *  - node:  one per node
   *  - region: on node if region root (non region roots use a method to find the root)
   */
  public void ASTDecl.genIncrementalHandlers(PrintWriter out) {
    if (!config().incremental()) return;
    TemplateContext tt = templateContext();
    if (config().incrementalLevelRegion() &&
        isRegionRoot() && !hasRegionRootAsSuperClass()) {
      tt.expand("ASTDecl.createNodeHandler", out);
    }
    if (config().incrementalLevelNode() &&
          name().equals(config().astNodeType())) {
      tt.expand("ASTDecl.createNodeHandler", out);
    }
    if (config().incrementalLevelParam() ||
      config().incrementalLevelAttr()) {
      if (name().equals(config().astNodeType())) {
        tt.expand("ASTDecl.createASTHandlers", out);
      }
      // Rewrite attribute.
      if (hasRewriteAttribute()) {
        tt.expand("ASTDecl.createRewriteAttributeHandler", out);
      }
      // Collect attributes.
      ArrayList<AttrDecl> decls = new ArrayList<AttrDecl>();
      for (AttrDecl attr : synDecls()) {
        if (attr.isMemoized()) {
          decls.add(attr);
        }
      }
      for (AttrDecl attr : getInhDeclList()) {
        if (attr.isMemoized()) {
          decls.add(attr);
        }
      }
      for (CollDecl decl : interfaceCollDecls()) {
        decls.add(decl);
      }
      for (CollDecl decl : getCollDeclList()) {
        decls.add(decl);
      }
      // Attribute code.
      for (AttrDecl attr : decls) {
        tt.bind("AttributeName", attr.signature()); // TODO(joqvist): rename template variable?
        tt.bind("IsParameterized", attr.isParameterized());
        tt.expand("ASTDecl.createAttributeHandler", out);
      }
    }
  }

  /**
   * Initialize child handlers.
   * This only applies for the incremental param configuration.
   */
  public String ASTDecl.genIncrementalInitChildHandlers() {
    if (!config().incremental()) {
      return "";
    } else {
      TemplateContext tt = templateContext();
      return tt.expand("ASTDecl.incrementalInitChildHandlers");
    }
  }

  /**
   * Generate code for copying of DDG nodes.
   */
  public void ASTDecl.genIncrementalCopyHandlers(PrintWriter out) {
    if (!config().incremental()) {
      return;
    }
    TemplateContext tt = templateContext();
    tt.bind("CopyTokenHandlers", emitCopyTokenHandlersString());
    tt.bind("CopyAttributeHandlers", emitCopyAttributeHandlersString());
    tt.expand("ASTDecl.incrementalCopyHandlerMethod", out);
  }

  /**
   * Generate string with code for cleaning up dependants.
   */
  public String ASTDecl.genCleanupAttributeListenersString() {
    StringBuffer res = new StringBuffer();
    for (AttrDecl attr : listOfCachedAttributes()) {
      res.append(attr.templateContext().expand("ASTDecl.checkAndCleanupAttributeListeners"));
    }
    return res.toString();
  }

  /**
   * Generate string with code for cleaning up token dependants.
   */
  public String ASTDecl.genCleanupTokenListenersString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    if (config().incrementalLevelParam() || config().incrementalLevelAttr()) {
      for (Component c : components()) {
        if (c instanceof TokenComponent && !c.isNTA()) {
          tt.bind("Id",  ((TokenComponent) c).name());
          res.append(tt.expand("ASTDecl.checkAndCleanupTokenListeners"));
        }
      }
    }
    return res.toString();
  }

  /**
   * Emit string for copying of token DDG nodes in a node.
   */
  public String ASTDecl.emitCopyTokenHandlersString() {
    StringBuilder res = new StringBuilder();
    if (config().incrementalLevelParam() || config().incrementalLevelAttr()) {
      TemplateContext tt = templateContext();
      for (int c = 0; c < getNumComponent(); c++) {
        Component comp = getComponent(c);
        if (comp instanceof TokenComponent) {
          tt.bind("Id", ((TokenComponent) comp).name());
          res.append(tt.expand("TokenComponent.copyTokenHandler"));
        }
      }
    }
    return res.toString();
  }

  /**
   * Emit string for copying of attribute DDG nodes in a node.
   */
  public String ASTDecl.emitCopyAttributeHandlersString() {
    StringBuilder res = new StringBuilder();
    if (config().incrementalLevelParam() || config().incrementalLevelAttr()) {
      // Collect attributes.
      ArrayList<AttrDecl> decls = new ArrayList<AttrDecl>();
      for (AttrDecl attr : synDecls()) {
        if (attr != null && attr.isMemoized()) {
          decls.add(attr);
        }
      }
      for (AttrDecl attr : getInhDeclList()) {
        if (attr != null && attr.isMemoized()) {
          decls.add(attr);
        }
      }
      // Attribute code.
      TemplateContext tt = templateContext();
      for (AttrDecl attr : decls) {
        tt.bind("AttributeName", attr.signature());// TODO rename template variable?
        tt.bind("IsParameterized", attr.isParameterized());
        res.append(tt.expand("ASTDecl.copyAttributeHandler"));
      }
    }
    return res.toString();
  }

  /**
   * Generate code for incremental regions.
   * This is a incremental configuration that requires additional
   * methods for finding the current region, identifying region roots,
   * and tracking of region dependencies.
   */
  public void ASTDecl.genIncrementalRegions(PrintWriter out) {
    if (!config().incremental()) {
      return;
    }
    TemplateContext tt = templateContext();
    if (config().incrementalLevelNode()) {
      tt.expand("ASTDecl.createIsRegionRootMethod", out);
      if (name().equals(config().astNodeType())) {
        tt.expand("ASTDecl.createRegionHandlerMethod", out);
      }
    }
    if (config().incrementalLevelRegion()) {
      tt.expand("ASTDecl.createIsRegionRootMethod", out);
      tt.expand("ASTDecl.createRegionHandlerMethod", out);
      tt.expand("ASTDecl.createRegionRootMethod", out);
      if (isRegionRoot() && !name().equals(config().astNodeType())) {
        tt.expand("ASTDecl.trackGetParentForRegionMethod", out);
      }
      if (isRegionLeaf()) {
        if (isListDecl() || isOptDecl() || !isASTNodeDecl()) {
          tt.bind("IsListOrOpt", isListDecl() || isOptDecl());
          tt.expand("ASTDecl.trackGetChildForRegionMethod", out);
          tt.expand("ASTDecl.trackGetChildNoTranForRegionMethod", out);
        }
      }
    }
  }
}
