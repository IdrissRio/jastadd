/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalDDG {

  /**
   * Generates the class representing dynamic dependency graph (DDG) nodes.
   */
  public void Grammar.genIncrementalDDGNode(PrintWriter out) {
    if (!grammar().incremental) return;
    TemplateContext tt = templateContext();
    tt.expand("Grammar.emitDDGNode", out);
  }

  /**
   * Generate DDG nodes for storage that needs dependency tracking in an AST node.
   * The number of DDG nodes needed depend on the incremental configuration:
   *  - param: children by index, parent, attributes with parameters
   *  - attr:  children, parent, attributes
   *  - node:  one per node
   *  - region: on node if region root (non region roots use a method to find the root)
   */
  public void ASTDecl.genIncrementalHandlers(PrintWriter out) {
    if (!grammar().incremental) return;
    TemplateContext tt = templateContext();
    if (grammar().incrementalLevelRegion &&
    	isRegionRoot() && !hasRegionRootAsSuperClass()) {
      tt.expand("ASTDecl.createNodeHandler", out);
    }
    if (grammar().incrementalLevelNode &&
      		name().equals(grammar().astNodeType)) {
      tt.expand("ASTDecl.createNodeHandler", out);
    }
    if (grammar().incrementalLevelParam ||
    	grammar().incrementalLevelAttr) {

      if (name().equals(grammar().astNodeType)) {
        tt.expand("ASTDecl.createASTHandlers", out);
      }
      // collect attributes
      ArrayList list = new ArrayList();
      for(int k = 0; k < getNumSynDecl(); k++) {
        AttrDecl attr = getSynDecl(k);
        if (attr.getLazy() || attr.isCircular())
          list.add(attr);
      }
      for(int k = 0; k < getNumInhDecl(); k++) {
        AttrDecl attr = getInhDecl(k);
        if (attr.getLazy() || attr.isCircular())
          list.add(attr);
      }
      for (int k = 0; k < getNumCollDecl(); k++) {
        CollDecl attr = getCollDecl(k);
        list.add(attr);
      }
      // attribute code
      for (Iterator itr = list.iterator(); itr.hasNext();) {
        AttrDecl attr = (AttrDecl)itr.next();
        tt.bind("AttributeName", attr.attributeSignature());
        tt.bind("IsParameterized", attr.getNumParameter() > 0);
        tt.expand("ASTDecl.createAttributeHandler", out);
      }
    }
  }

  /**
   * Initialize child handlers.
   * This only applies for the incremental param configuration.
   */
  public String ASTDecl.genIncrementalInitChildHandlers() {
    if (!grammar().incremental) return "";
    TemplateContext tt = templateContext();
    return tt.expand("ASTDecl.incrementalInitChildHandlers");
  }

  /**
   * Generate code for copying of DDG nodes.
   */
  public void ASTDecl.genIncrementalCopyHandlers(PrintWriter out) {
    if (!grammar().incremental) return;
    TemplateContext tt = templateContext();
    tt.bind("IsRegionRoot", isRegionRoot());
    tt.bind("CopyTokenHandlers", emitCopyTokenHandlersString());
    tt.bind("CopyAttributeHandlers", emitCopyAttributeHandlersString());
    tt.expand("ASTDecl.incrementalCopyHandlerMethod", out);
  }

  /**
   * Emit string for copying of token DDG nodes in a node.
   */
  public String ASTDecl.emitCopyTokenHandlersString() {
    StringBuffer res = new StringBuffer();
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      TemplateContext tt = templateContext();
      for (int c = 0; c < getNumComponents(); c++) {
        Components comp = getComponents(c);
        if (comp instanceof TokenComponent) {
          tt.bind("Id", ((TokenComponent)comp).getTokenId().getID());
          res.append(tt.expand("TokenComponent.copyTokenHandler"));
        }
      }
    }
    return res.toString();
  }

  /**
   * Emit string for copying of attribute DDG nodes in a node.
   */
  public String ASTDecl.emitCopyAttributeHandlersString() {
    StringBuffer res = new StringBuffer();
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      // Collect attributes
      ArrayList list = new ArrayList();
      for(int k = 0; k < getNumSynDecl(); k++) {
        AttrDecl attr = getSynDecl(k);
        if (attr != null && (attr.getLazy() || attr.isCircular()))
          list.add(attr);
      }
      for(int k = 0; k < getNumInhDecl(); k++) {
        AttrDecl attr = getInhDecl(k);
        if (attr != null && (attr.getLazy() || attr.isCircular()))
          list.add(attr);
      }
      // Attribute code
      TemplateContext tt = templateContext();
      for(Iterator itr = list.iterator(); itr.hasNext();) {
        AttrDecl attr = (AttrDecl)itr.next();
        tt.bind("AttributeName", attr.attributeSignature());
        tt.bind("IsParameterized", attr.getNumParameter() > 0);
        res.append(tt.expand("ASTDecl.copyAttributeHandler"));
      }
    }
    return res.toString();
  }

  /**
   * Generate code for incremental regions.
   * This is a incremental configuration that requires additional
   * methods for finding the current region, identifying region roots,
   * and tracking of region dependencies.
   */
  public void ASTDecl.genIncrementalRegions(PrintWriter out) {
    if (!grammar().incremental) return;
    TemplateContext tt = templateContext();
    tt.bind("IsRegionRoot", isRegionRoot());
    if (grammar().incrementalLevelNode) {
      tt.expand("ASTDecl.createIsRegionRootMethod", out);
      if (name().equals(grammar().astNodeType)) {
        tt.expand("ASTDecl.createRegionHandlerMethod", out);
      }
    }
    if (grammar().incrementalLevelRegion) {
      tt.expand("ASTDecl.createIsRegionRootMethod", out);
      tt.expand("ASTDecl.createRegionHandlerMethod", out);
      tt.expand("ASTDecl.createRegionRootMethod", out);
      if (isRegionRoot() && !name().equals(grammar().astNodeType)) {
        tt.expand("ASTDecl.trackGetParentForRegionMethod", out);
      }
      if (isRegionLeaf()) {
        if (isListDecl() || isOptDecl() || !isASTNodeDecl()) {
          tt.expand("ASTDecl.trackGetChildForRegionMethod", out);
          tt.expand("ASTDecl.trackGetChildNoTranForRegionMethod", out);
        }
      }
    }
    // TODO revisit these methods
    /*
    // method: removeChild(int) -- overloaded for region tracking
    if (grammar().incrementalLevelRegion) {
      if (isRegionLeaf() && !name().equals(grammar().astNodeType)) {
        stream.println(ind + "public void " + name() + ".removeChild(int index) {");
        stream.println(ind(2) + "// region leaf");
        stream.println(ind(2) + "" + grammar().astNodeType + " child = getChild(index);");
        stream.println(ind(2) + "if (child.isRegionRoot()) {");
        stream.println(ind(3) +   "" + grammar().astNodeType + "$DepGraphNode handler = handler();");
        stream.println(ind(3) +   "if (handler != null) handler.flushRegion();");
        stream.println(ind(2) + "}");
        stream.println(ind(2) + "super.removeChild(index);");
        stream.println(ind + "}");
      }
    }
    // method: insertChild(ASTNode,int) -- overloaded for region tracking
    if (grammar().incrementalLevelRegion) {
      if (isRegionLeaf() && !name().equals(grammar().astNodeType)) {
        stream.println("    public void " + name() + ".insertChild(" + grammar().astNodeType + " node, int index) {");
        stream.println("      // region leaf");
        stream.println("      if (node.isRegionRoot()) {");
        stream.println(ind(3) +   "" + grammar().astNodeType + "$DepGraphNode handler = handler();");
        stream.println(ind(3) +   "if (handler != null) handler.flushRegion();");
        stream.println("      }");
        stream.println("      super.insertChild(node, index);");
        stream.println("    }");
      }
    }
    */
  }
}
