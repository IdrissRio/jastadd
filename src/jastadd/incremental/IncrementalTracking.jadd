/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Incremental tracking code generation helper methods.
 */
aspect IncrementalTracking {

  public String Grammar.incrementalEvaluationStack() {
    if (!incremental)
      return "";
    else 
      return templateContext().expand("ASTNode$State.incrementalEvaluationStack");
  }

  public String AttrDecl.genIncrementalTrackingStackTransfer() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append(attributeSignature() + "_handler.transferDependenciesFrom(tmpHandler);");
        } else {
          buf.append("((ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters)).transferDependenciesFrom(tmpHandler);");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(attributeSignature() + "_handler.transferDependenciesFrom(tmpHandler);");
      }
      if (grammar().incrementalLevelNode) {
        if (!getNTA()) {
          buf.append("handler.transferDependenciesFrom(tmpHandler);");
        }
      }
      if (grammar().incrementalLevelRegion) {
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackClear() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append("else tmpHandler.clearDependencies();");
      }
      if (grammar().incrementalLevelAttr) {
        buf.append("else tmpHandler.clearDependencies();");
      }
      if (grammar().incrementalLevelNode) {
        if (!getNTA()) {
          buf.append("else tmpHandler.clearDependencies();");
        }
      }
      if (grammar().incrementalLevelRegion) {
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalInternalNTAList() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelNode || grammar().incrementalLevelRegion) {
      if (getNTA()) 
          buf.append(ind(3) + attributeSignature() + "_list.inc_internalNTAList(" + attributeSignature() + "_values);\n");
    }
    return buf.toString();
  }
  
  public String ASTDecl.genIncrementalTrackCreation() {
    if (!grammar().incremental) return "";
    if (grammar().incrementalLevelNode) {
      //return ind(2) + "state().addHandlerDepTo(handler);\n";
    }
    return "";
  }
}
