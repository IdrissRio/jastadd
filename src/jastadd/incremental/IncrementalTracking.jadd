/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Incremental tracking code generation helper methods.
 */
aspect IncrementalTracking {

  public String Grammar.incrementalEvaluationStack() {
    if (!incremental)
      return "";
    else 
      return templateContext().expand("ASTNode$State.incrementalEvaluationStack");
  }

  public String AttrDecl.genIncrementalTracking() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelParam) {
      if (getNumParameter() == 0) {
        buf.append(ind(2) + "if (" + attributeSignature() + "_handler == null) {\n");
        buf.append(ind(3) +   attributeSignature() + "_handler = new ASTNode$DepGraphNode(this, \"" + attributeSignature() + "\", null);\n");
        buf.append(ind(2) + "}\n");
        buf.append(ind(2) + "state().addHandlerDepTo(" + attributeSignature() + "_handler);\n");
      } else {
        buf.append(ind(2) + "if (!" + attributeSignature() + "_handler.containsKey(_parameters)) {\n");
        buf.append(ind(3) +   attributeSignature() + "_handler.put(_parameters, new ASTNode$DepGraphNode(this," +
              " \"" + attributeSignature() + "\", _parameters));\n");
        buf.append(ind(2) + "}\n");
        buf.append(ind(2) + "state().addHandlerDepTo((ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters));\n");
      }
    }
    if (grammar().incrementalLevelAttr) {
      buf.append(ind(2) + "if (" + attributeSignature() + "_handler == null) {\n");
      buf.append(ind(3) +   attributeSignature() + "_handler = new ASTNode$DepGraphNode(this, \"" + attributeSignature() + "\");\n");
      buf.append(ind(2) + "}\n");
      buf.append(ind(2) + "state().addHandlerDepTo(" + attributeSignature() + "_handler);\n");
    }
    if (grammar().incrementalLevelNode) {
      if (getNTA()) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "if (" + attributeSignature() + "_computed)\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(" + attributeSignature() + "_value.handler());\n");
        } else {
          buf.append(ind(2) + "if (" + attributeSignature() + "_values.containsKey(_parameters))\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(((ASTNode)" + attributeSignature() + "_values.get(_parameters)).handler());\n");
        }
      }
    }
    if (grammar().incrementalLevelRegion) {
      if (getNTA()) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "if (" + attributeSignature() + "_computed && " + attributeSignature() + "_value.isRegionRoot())\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(" + attributeSignature() + "_value.handler());\n");
        } else {
          buf.append(ind(2) + "if (" + attributeSignature() + "_values.containsKey(_parameters) && ((ASTNode)" + attributeSignature() + "_values.get(_parameters)).isRegionRoot())\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(((ASTNode)" + attributeSignature() + "_values.get(_parameters)).handler());\n");
        }
      }
    }

    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackEnter() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append(ind(2) + "ASTNode$DepGraphNode tmpHandler = new ASTNode$DepGraphNode(this, \"\", null);\n");
        buf.append(ind(2) + "state().enterAttrStoreEval(tmpHandler);\n");
        //if (getNumParameter() == 0) {
        //  buf.append(ind(2) + "state().enterAttrStoreEval(" + attributeSignature() + "_handler);\n");
        //} else {
        //  buf.append(ind(2) + "state().enterAttrStoreEval(" + 
        //      "(ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters));\n");
        //}
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "ASTNode$DepGraphNode tmpHandler = new ASTNode$DepGraphNode(this, \"\");\n");
        buf.append(ind(2) + "state().enterAttrStoreEval(tmpHandler);\n");
        //buf.append(ind(2) + "state().enterAttrStoreEval(" + attributeSignature() + "_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + "// Creating a dummy handler to collect dependencies\n");
          buf.append(ind(2) + "ASTNode$DepGraphNode newHandler = new ASTNode$DepGraphNode(this);\n");
          buf.append(ind(2) + "// Adding dep. to this region because it may be read during the computation\n");
          buf.append(ind(2) + "handler.addDependant(newHandler);\n");
          buf.append(ind(2) + "state().enterAttrStoreEval(newHandler);\n");
        } else {
          buf.append(ind(2) + "ASTNode$DepGraphNode tmpHandler = new ASTNode$DepGraphNode(this);\n");
          buf.append(ind(2) + "state().enterAttrStoreEval(tmpHandler);\n");
          //buf.append(ind(2) + "state().enterAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        //buf.append(ind(2) + "state().IN_ATTR_STORE_EVAL = true;\n");
        buf.append(ind(2) + "state().IN_COMPUTATION++;\n");
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackEnter2() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "state().enterAttrStoreEval(" + attributeSignature() + "_handler);\n");
        } else {
          buf.append(ind(2) + "state().enterAttrStoreEval(" + 
              "(ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters));\n");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "state().enterAttrStoreEval(" + attributeSignature() + "_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + "// Creating a dummy handler to collect dependencies\n");
          buf.append(ind(2) + "ASTNode$DepGraphNode newHandler = new ASTNode$DepGraphNode(this);\n");
          buf.append(ind(2) + "// Adding dep. to this region because it may be read during the computation\n");
          buf.append(ind(2) + "handler.addDependant(newHandler);\n");
          buf.append(ind(2) + "state().enterAttrStoreEval(newHandler);\n");
        } else {
          buf.append(ind(2) + "state().enterAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        //buf.append(ind(2) + "state().IN_ATTR_STORE_EVAL = true;\n");
        buf.append(ind(2) + "state().IN_COMPUTATION++;\n");
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackExit() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append(ind(2) + "state().exitAttrStoreEval(tmpHandler);\n");
        //if (getNumParameter() == 0) {
        //  buf.append("state().exitAttrStoreEval(" + attributeSignature() + "_handler);\n");
        //} else {
        //  buf.append("state().exitAttrStoreEval(" + 
        //      "(ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters));\n");
        //}
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "state().exitAttrStoreEval(tmpHandler);\n");
        //buf.append("state().exitAttrStoreEval(" + attributeSignature() + "_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + attributeSignature() + "_value.handler = newHandler;\n");
          buf.append(ind(2) + attributeSignature() + "_value.handler.fNode = " + attributeSignature() + "_value;\n");
          buf.append(ind(2) + "state().exitAttrStoreEval(" + attributeSignature() + "_value.handler);\n");
          buf.append(ind(2) + "state().addHandlerDepTo(" + attributeSignature() + "_value.handler);\n");
        } else {
          buf.append(ind(2) + "state().exitAttrStoreEval(tmpHandler);\n");
          //buf.append("state().exitAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        buf.append(ind(2)+ "state().IN_COMPUTATION--;\n");
        if (getNTA()) {
          buf.append(ind(2) + "if (" + attributeSignature() + "_value.isRegionRoot()) {\n");
          buf.append(ind(2) + "  ASTNode$DepGraphNode nodeHandler = handler();\n");
          buf.append(ind(2) + "  nodeHandler.addDependant(" + attributeSignature() + "_value.handler());\n");
          buf.append(ind(2) + "  " + attributeSignature() + "_value.handler().addDependant(nodeHandler);\n");
          buf.append(ind(2) + "}\n");
        } 
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackExit2() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "state().exitAttrStoreEval(" + attributeSignature() + "_handler);\n");
        } else {
          buf.append(ind(2) + "state().exitAttrStoreEval(" + 
              "(ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters));\n");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "state().exitAttrStoreEval(" + attributeSignature() + "_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + attributeSignature() + "_value.handler = newHandler;\n");
          buf.append(ind(2) + attributeSignature() + "_value.handler.fNode = " + attributeSignature() + "_value;\n");
          buf.append(ind(2) + "state().exitAttrStoreEval(" + attributeSignature() + "_value.handler);\n");
          buf.append(ind(2) + "state().addHandlerDepTo(" + attributeSignature() + "_value.handler);\n");
        } else {
          buf.append(ind(2) + "state().exitAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        buf.append(ind(2)+ "state().IN_COMPUTATION--;\n");
        if (getNTA()) {
          buf.append(ind(2) + "if (" + attributeSignature() + "_value.isRegionRoot()) {\n");
          buf.append(ind(2) + "  ASTNode$DepGraphNode nodeHandler = handler();\n");
          buf.append(ind(2) + "  nodeHandler.addDependant(" + attributeSignature() + "_value.handler());\n");
          buf.append(ind(2) + "  " + attributeSignature() + "_value.handler().addDependant(nodeHandler);\n");
          buf.append(ind(2) + "}\n");
        } 
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackTransfer() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append(attributeSignature() + "_handler.transferDependenciesFrom(tmpHandler);");
        } else {
          buf.append("((ASTNode$DepGraphNode)" + attributeSignature() + "_handler.get(_parameters)).transferDependenciesFrom(tmpHandler);");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(attributeSignature() + "_handler.transferDependenciesFrom(tmpHandler);");
      }
      if (grammar().incrementalLevelNode) {
        if (!getNTA()) {
          buf.append("handler.transferDependenciesFrom(tmpHandler);");
        }
      }
      if (grammar().incrementalLevelRegion) {
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalTrackingStackClear() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append("else tmpHandler.clearDependencies();");
      }
      if (grammar().incrementalLevelAttr) {
        buf.append("else tmpHandler.clearDependencies();");
      }
      if (grammar().incrementalLevelNode) {
        if (!getNTA()) {
          buf.append("else tmpHandler.clearDependencies();");
        }
      }
      if (grammar().incrementalLevelRegion) {
      }
    }
    return buf.toString();
  }

  public String AttrDecl.genIncrementalInternalNTAList() {
    if (!grammar().incremental) return "";
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelNode || grammar().incrementalLevelRegion) {
      if (getNTA()) 
          buf.append(ind(3) + attributeSignature() + "_list.inc_internalNTAList(" + attributeSignature() + "_values);\n");
    }
    return buf.toString();
  }
  
  public String ASTDecl.genIncrementalTrackCreation() {
    if (!grammar().incremental) return "";
    if (grammar().incrementalLevelNode) {
      //return ind(2) + "state().addHandlerDepTo(handler);\n";
    }
    return "";
  }
  
  public void ASTDecl.jjtGenIncrementalTrackRewrite6(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelNode) {
      stream.println(ind(4) + "this.state().exitRewriteEval(oldNode.handler);");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(4) + "this.state().IN_COMPUTATION--;");
      //stream.println(ind(4) + "this.state().IN_REWRITE_EVAL = false;");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite7(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelNode || grammar().incrementalLevelRegion || 
          grammar().incrementalLevelAttr || grammar().incrementalLevelParam) {
      stream.println(ind(5) + "ASTNode initial = this.init_children[i];");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite8(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelParam) {
      stream.println(ind(6) + "oldNode.inc_flush_subtree(this.getChild_handler[i]);");
      stream.println(ind(5) + "this.init_children[i] = initial;");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(6) + "oldNode.inc_flush_subtree(this.getChild_handler);");
      stream.println(ind(5) + "this.init_children[i] = initial;");
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(6) + "oldNode.inc_flush_subtree(node.handler());");
      stream.println(ind(5) + "this.init_children[i] = initial;");
    }
    if (grammar().incrementalLevelRegion) {
      stream.println(ind(5) + "if (node.isRegionRoot()) {");
      stream.println(ind(6) +   "oldNode.inc_flush_subtree(node.handler());");
      stream.println(ind(5) + "}");
      stream.println(ind(5) + "this.init_children[i] = initial;");
    }
  }

  public void ASTDecl.genIncrementalTrackRewrite12(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelRegion) {
      if (isRegionRoot()) {
        stream.println(ind(2) + "if (state().IN_COMPUTATION > 0) {");
        stream.println(ind(3) +   "node.handler().addDependant(handler);");
        stream.println(ind(2) + "}");
      }
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite1(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (!grammar().fullFlush) {
    stream.println(ind(2) + "if(this.init_children == null) {");
    stream.println(ind(3) +   "this.init_children = new ASTNode[this.children.length];");
    stream.println(ind(3) +   "this.rewritten_children = new boolean[this.children.length];");
    stream.println(ind(2) + "}");
    stream.println(ind(2) + "if(!node.inc_hasEnclosingRewrittenNode()) {");
    stream.println(ind(3) +   "this.init_children[i] = node.fullCopy();");
    stream.println(ind(3) +   "this.rewritten_children[i] = true;");
    stream.println(ind(2) + "}");
    }
    if (grammar().incrementalLevelParam) {
      stream.println(ind(2) + "this.state().enterRewriteEval(this.getChild_handler[i]);");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(2) + "this.state().enterRewriteEval(this.getChild_handler);");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite2(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelParam) {
      stream.println(ind(2) + "this.state().exitRewriteEval(this.getChild_handler[i]);");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(2) + "this.state().exitRewriteEval(this.getChild_handler);");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite3(PrintWriter stream) {
    if (!grammar().incremental) return;  
    if (!grammar().fullFlush) {
    stream.println(ind(4) + "if (rewriteState == ASTNode$State.REWRITE_CHANGE) {");
    stream.println(ind(5) +   "this.rewritten_children[i] = true;");
    stream.println(ind(4) + "}");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite4(PrintWriter stream) {
    if (!grammar().incremental) return;  
    if (grammar().incrementalLevelParam) {
      stream.println(ind(3) + "if (this.getChild_handler[i] == null) {");
      if (grammar().incrementalPropLimit) {
      stream.println(ind(4) +   "this.getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i), !node.mayHaveRewrite());");
      } else {
      stream.println(ind(4) +   "this.getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i));");
      }
      stream.println(ind(3) + "}");
      stream.println(ind(3) + "this.state().addHandlerDepTo(this.getChild_handler[i]);");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(2) + "this.state().addHandlerDepTo(this.getChild_handler);");  
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(2) + "if (node != null) {");
      stream.println(ind(3) + "  this.state().addHandlerDepTo(node.handler);");
      stream.println(ind(2) + "}");
    }
  }
  
  public void ASTDecl.jjtGenIncrementalTrackRewrite5(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelNode) {
      stream.println(ind(4) + "this.state().enterRewriteEval(node.handler);");
    }
    if (grammar().incrementalLevelRegion) {
      //stream.println(ind(4) + "this.state().IN_REWRITE_EVAL = true;");
      stream.println(ind(4) + "this.state().IN_COMPUTATION++;");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackRewrite11(PrintWriter stream) {
    if (!grammar().incremental) return;
    if (grammar().incrementalLevelParam) {
      stream.println(ind(3) + "if (this.getChild_handler[i] == null) {");
      if (grammar().incrementalPropLimit) {
      stream.println(ind(4) +   "this.getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i), !node.mayHaveRewrite());");
      } else {
      stream.println(ind(4) +   "this.getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i));");
      }
      stream.println(ind(3) + "}");
      stream.println(ind(3) + "this.state().addHandlerDepTo(this.getChild_handler[i]);");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(2) + "this.state().addHandlerDepTo(this.getChild_handler);");  
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(2) + "if (node != null) {");
      stream.println(ind(3) + "  this.state().addHandlerDepTo(node.handler);");
      // rewrite is evaluated in "that" and may use attributes in that node, but this is not tracked. 
      // JO 2013-02-05: "this" is used instead of "that"
      // The possibility of a dependency requires one.
      stream.println(ind(3) + "  this.handler.addDependant(node.handler);");
      stream.println(ind(2) + "}");
    }
    if (grammar().incrementalLevelRegion) {
      // rewrite is evaluated in "that" and may use attributes in that node, but this is not tracked. 
      // JO 2013-02-05: "this" is used instead of "that"
      // The possibility of a dependency requires one.
      stream.println(ind(2) + "if (node != null && node.isRegionRoot()) {");
      stream.println(ind(3) +   "this.handler().addDependant(node.handler());");
      stream.println(ind(3) +   "node.handler().addDependant(this.handler());");
      stream.println(ind(2) + "}");
    }
  }

  public void ASTDecl.jjtGenIncrementalTrackGetChildNoTransformName(PrintWriter stream) {
    if (!grammar().incremental) return; 
    stream.println(ind + "public ASTNode ASTNode.getChildNoTransform(int i) {");
  }

  public void ASTDecl.jjtGenIncrementalTrackGetChildNoTransformNameGeneric(PrintWriter stream) {
    if (!grammar().incremental) return; 
    stream.println(ind + "public T ASTNode.getChildNoTransform(int i) {");
  }

  public void ASTDecl.jjtGenIncrementalTrackGetChildNoTransform(PrintWriter stream) {
    if (!grammar().incremental) return; 
    if (grammar().incrementalLevelParam) {
      stream.println(ind(2) + "if (getChild_handler[i] == null) {");
      if (grammar().incrementalPropLimit) {
      stream.println(ind(4) +   "getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i), !child.mayHaveRewrite());");
      } else {
      stream.println(ind(4) +   "getChild_handler[i] = new ASTNode$DepGraphNode(this, \"getChild\", new Integer(i));");
      }
      stream.println(ind(2) + "}");
      stream.println(ind(2) + "state().addHandlerDepTo(getChild_handler[i]);");
    }
    if (grammar().incrementalLevelAttr) {
      stream.println(ind(2) + "state().addHandlerDepTo(getChild_handler);");  
    }
    if (grammar().incrementalLevelNode) {
      stream.println(ind(2) + "if (child != null)");
      stream.println(ind(3) + "  state().addHandlerDepTo(child.handler);");
    }
    if (grammar().incrementalLevelRegion) {
      if (isRegionRoot()) {
        stream.println(ind(2) + "if (state().IN_COMPUTATION > 0 && child != null) {");
        stream.println(ind(3) + "  child.handler().addDependant(handler);");
        stream.println(ind(2) + "}");
      }
    }
  }
  
  public String TokenComponent.jaddGenIncrementalTokenTrack() {
    if (!grammar().incremental) return ""; 
    if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
      String s =
        "        state().addHandlerDepTo(get#ID#_handler);\n";
      s = s.replaceAll("#ID#", getTokenId().getID());
      return s;
    }
    if (grammar().incrementalLevelNode) {
      String type = getTokenId().getTYPE();
      boolean isStringToken = type.equals("String") || type.equals("java.lang.String");
      boolean isPrimitiveToken = isPrimitive();
      if (!isStringToken && !isPrimitiveToken) {
        String s =
          "        if (token#TYPEINSIGNATURE#_#ID# instanceof ASTNode) {\n" +
          "          state().addHandlerDepTo(((ASTNode)token#TYPEINSIGNATURE#_#ID#).handler);\n" +
          "        }\n";
        s = s.replaceAll("#ID#", getTokenId().getID());
        s = s.replaceAll("#TYPEINSIGNATURE#", ASTNode.convTypeNameToSignature(getTokenId().getTYPE()));
        return s;
      }
    }
    if (grammar().incrementalLevelRegion) {
      String type = getTokenId().getTYPE();
      boolean isStringToken = type.equals("String") || type.equals("java.lang.String");
      boolean isPrimitiveToken = isPrimitive();
      if (!isStringToken && !isPrimitiveToken) {
        String s =
          "        if (token#TYPEINSIGNATURE#_#ID# instanceof ASTNode && token#TYPEINSIGNATURE#_#ID#.isRegionRoot()) {\n" +
          "          ((ASTNode)token#TYPEINSIGNATURE#_#ID#).handler().addDependant(handler());\n" +
          "        }\n";
        s = s.replaceAll("#ID#", getTokenId().getID());
        s = s.replaceAll("#TYPEINSIGNATURE#", ASTNode.convTypeNameToSignature(getTokenId().getTYPE()));
        return s;
      }
    }
    return "";
  }
}
