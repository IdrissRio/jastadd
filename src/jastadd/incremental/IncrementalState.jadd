/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalState {

  public String ASTDecl.genIncrementalConstructorStartConstruction() {
    if (!grammar().incremental) return "";    
    return ind(2) + "state().enterConstruction();\n";
  }

  public String ListComponents.genIncrementalConstructorStartConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().enterConstruction();\n";
  }

  public String OptionalComponent.genIncrementalConstructorStartConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().enterConstruction();\n";
  }

  public String AggregateComponents.genIncrementalConstructorStartConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().enterConstruction();\n";
  }
  

  public String ASTDecl.genIncrementalConstructorEndConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().exitConstruction();\n";
  }
  
  public String ListComponents.genIncrementalConstructorEndConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().exitConstruction();\n";
  }

  public String OptionalComponent.genIncrementalConstructorEndConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().exitConstruction();\n";
  }

  public String AggregateComponents.genIncrementalConstructorEndConstruction() {
    if (!grammar().incremental) return "";
    return ind(2) + "state().exitConstruction();\n";
  }

  // ES_2011-11-28: Code generation for incremental evaluation, state handling
  public void ASTDecl.jjtGenIncrementalState(PrintWriter stream) {

    // states
    if (name().equals("ASTNode")) {
    stream.println(ind + "public static final int ASTNode.inc_CREATED = 0;");  
    stream.println(ind + "public static final int ASTNode.inc_CLONED = 1;");  
    stream.println(ind + "public static final int ASTNode.inc_LIVE = 2;");  
    stream.println(ind + "public static final int ASTNode.inc_GARBAGE = 3;");  
    stream.println(ind + "public int ASTNode.inc_state = inc_CREATED;");  
    }

    // Collect attributes: syn then inh
    ArrayList list = new ArrayList();
    for(int k = 0; k < getNumSynEq(); k++) {
      AttrDecl attr = getSynEq(k).decl();
      if (attr != null && (attr.getLazy() || attr.isCircular())) 
        list.add(attr);
    }
    for(int k = 0; k < getNumInhDecl(); k++) {
      AttrDecl attr = getInhDecl(k);
      if (attr != null && (attr.getLazy() || attr.isCircular())) 
        list.add(attr);
    }


    // Method: inc_changeState
    stream.println(ind + "public void " + name() + ".inc_changeState(int newState) {");
    if (name().equals("ASTNode")) {
      stream.println(ind(2) + "inc_state = newState;");
      if (grammar().incrementalLevelParam) {
        stream.println(ind(2) + "getParent_handler.changeState(newState);");
        stream.println(ind(2) + "numChildren_handler.changeState(newState);");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (getChild_handler[i] != null)");
        stream.println(ind(4) +     "getChild_handler[i].changeState(newState);");
        stream.println(ind(3) +   "if (child != null) child.inc_changeState(newState);");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelAttr) {
        stream.println(ind(2) + "getParent_handler.changeState(newState);");
        stream.println(ind(2) + "numChildren_handler.changeState(newState);");
        stream.println(ind(2) + "getChild_handler.changeState(newState);");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_changeState(newState);");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelNode) {
        stream.println(ind(2) + "handler.changeState(newState);");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_changeState(newState);");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelRegion) {
        stream.println(ind(2) + "if (isRegionRoot()) handler().changeState(newState);");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_changeState(newState);");
        stream.println(ind(2) + "}");
      }
    } else {
      stream.println(ind(2) + "super.inc_changeState(newState);");
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
        // tokens
        for (int c = 0; c < getNumComponents(); c++) {
           Components comp = getComponents(c);
           if (comp instanceof TokenComponent) {
            stream.println(ind(2) + "if (get" + ((TokenComponent)comp).getTokenId().getID() + "_handler != null) {");
            stream.println(ind(3) +   "get" + ((TokenComponent)comp).getTokenId().getID() + "_handler.changeState(newState);");
            stream.println(ind(2) + "}");

           }
         }
      }
      // attributes
      for(Iterator itr = list.iterator(); itr.hasNext();) {
        AttrDecl attr = (AttrDecl)itr.next();
        // handlers
        if (grammar().incrementalLevelParam) {
          if (attr.getNumParameter() > 0) {
            stream.println(ind(2) + "for (java.util.Iterator itr = " + attr.attributeSignature() + 
                                  "_handler.values().iterator(); itr.hasNext();) {");
            stream.println(ind(3) +   "ASTNode$DepGraphNode handler = (ASTNode$DepGraphNode)itr.next();");
            stream.println(ind(3) +   "handler.changeState(newState);");
            stream.println(ind(2) + "}");
          } else {
            stream.println(ind(2) + "if (" + attr.attributeSignature() + "_handler != null) {");
            stream.println(ind(3) +   attr.attributeSignature() + "_handler.changeState(newState);");
            stream.println(ind(2) + "}");
          }
        }
        if (grammar().incrementalLevelAttr) {
          stream.println(ind(2) + "if (" + attr.attributeSignature() + "_handler != null) {");
          stream.println(ind(3) +   attr.attributeSignature() + "_handler.changeState(newState);");
          stream.println(ind(2) + "}");
        }
        // values for NTAs
        if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() && 
            !(attr.type().equals("String") || attr.type().equals("java.lang.String"))) {
          if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || 
              grammar().incrementalLevelNode || grammar().incrementalLevelRegion) {
            if (attr.getNumParameter() > 0) {
              stream.println(ind(2) + "if (" + attr.attributeSignature() + "_list != null) {");
              stream.println(ind(3) +   attr.attributeSignature() + "_list.inc_changeState(newState);");
              stream.println(ind(2) + "}");
            } else {
              stream.println(ind(2) + "if (" + attr.attributeSignature() + "_computed && (" +
                                      attr.attributeSignature() + "_value instanceof ASTNode)) {");
              stream.println(ind(3) + attr.attributeSignature() + "_value.inc_changeState(newState);");
              stream.println(ind(2) + "}");
            }
          }
        }
      }    
    }
    stream.println(ind + "}");    // end method: inc_changeState



    // method: inc_throwAway
    stream.println(ind + "public void " + name() + ".inc_throwAway() {");
    stream.println(ind(2) + "inc_state = inc_GARBAGE;");
    if (name().equals("ASTNode")) {
      if (grammar().incrementalLevelParam) {
        stream.println(ind(2) + "getParent_handler.throwAway();");
        stream.println(ind(2) + "numChildren_handler.throwAway();");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (getChild_handler[i] != null)");
        stream.println(ind(4) +     "getChild_handler[i].throwAway();");
        stream.println(ind(3) +   "if (child != null) child.inc_throwAway();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_throwAway();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelAttr) {
        stream.println(ind(2) + "getParent_handler.throwAway();");
        stream.println(ind(2) + "numChildren_handler.throwAway();");
        stream.println(ind(2) + "getChild_handler.throwAway();");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_throwAway();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_throwAway();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelNode) {
        stream.println(ind(2) + "handler.throwAway();");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_throwAway();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_throwAway();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelRegion) {
        stream.println(ind(2) + "if (isRegionRoot()) handler().throwAway();");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_throwAway();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_throwAway();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
    } else {
      stream.println(ind(2) + "super.inc_throwAway();");
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
        // tokens
        for (int c = 0; c < getNumComponents(); c++) {
           Components comp = getComponents(c);
           if (comp instanceof TokenComponent) {
            stream.println(ind(2) + "if (get" + ((TokenComponent)comp).getTokenId().getID() + "_handler != null) {");
            stream.println(ind(3) +   "get" + ((TokenComponent)comp).getTokenId().getID() + "_handler.throwAway();");
            stream.println(ind(2) + "}");
           }
         }
      }
      // attributes
      for(Iterator itr = list.iterator(); itr.hasNext();) {
        AttrDecl attr = (AttrDecl)itr.next();
        // handlers
        if (grammar().incrementalLevelParam) {
          if (attr.getNumParameter() > 0) {
            stream.println(ind(2) + "for (java.util.Iterator itr = " + attr.attributeSignature() + 
                                  "_handler.values().iterator(); itr.hasNext();) {");
            stream.println(ind(3) +   "ASTNode$DepGraphNode handler = (ASTNode$DepGraphNode)itr.next();");
            stream.println(ind(3) +   "handler.throwAway();");
            stream.println(ind(2) + "}");
          } else {
            stream.println(ind(2) + "if (" + attr.attributeSignature() + "_handler != null) {");
            stream.println(ind(3) +   attr.attributeSignature() + "_handler.throwAway();");
            stream.println(ind(2) + "}");
          }
        }
        if (grammar().incrementalLevelAttr) {
          stream.println(ind(2) + "if (" + attr.attributeSignature() + "_handler != null) {");
          stream.println(ind(3) +   attr.attributeSignature() + "_handler.throwAway();");
          stream.println(ind(2) + "}");
        }
        // values for NTAs
        if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() && 
            !(attr.type().equals("String") || attr.type().equals("java.lang.String"))) {
          if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr || 
              grammar().incrementalLevelNode || grammar().incrementalLevelRegion) {
            if (attr.getNumParameter() > 0) {
              stream.println(ind(2) + "if (" + attr.attributeSignature() + "_list != null) {");
              stream.println(ind(3) +   attr.attributeSignature() + "_list.inc_throwAway();");
              stream.println(ind(2) + "}");
            } else {
              stream.println(ind(2) + "if (" + attr.attributeSignature() + "_computed && (" +
                                      attr.attributeSignature() + "_value instanceof ASTNode)) {");
              stream.println(ind(3) + attr.attributeSignature() + "_value.inc_throwAway();");
              stream.println(ind(2) + "}");
            }
          }
        }
      }    
    }
    stream.println(ind + "}");    
    // end method: inc_throwAway

    /*
    // method: inc_cleanUpGarbage
    stream.println(ind + "public void " + name() + ".inc_cleanUpGarbage() {");
    if (name().equals("ASTNode")) {
      if (grammar().incrementalLevelParam) {
        stream.println(ind(2) + "getParent_handler.cleanUpGarbage();");
        stream.println(ind(2) + "numChildren_handler.cleanUpGarbage);");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (getChild_handler[i] != null) getChild_handler[i].cleanUpGarbage();");
        stream.println(ind(3) +   "if (child != null) child.inc_cleanUpGarbage();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_cleanUpGarbage();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelAttr) {
        stream.println(ind(2) + "getParent_handler.cleanUpGarbage();");
        stream.println(ind(2) + "numChildren_handler.cleanUpGarbage();");
        stream.println(ind(2) + "getChild_handler.cleanUpGarbage();");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_cleanUpGarbage();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_cleanUpGarbage();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
      if (grammar().incrementalLevelNode) {
        stream.println(ind(2) + "handler.cleanUpGarbage();");
        stream.println(ind(2) + "for (int i = 0; children != null && i < children.length; i++) {");
        stream.println(ind(3) +   "ASTNode child = children[i];");
        stream.println(ind(3) +   "if (child != null) child.inc_cleanUpGarbage();");
        stream.println(ind(3) +   "if (init_children != null && i < init_children.length && init_children[i] != null) {");
        stream.println(ind(4) +     "init_children[i].inc_cleanUpGarbage();");
        stream.println(ind(3) +   "}");
        stream.println(ind(2) + "}");
      }
    } else {
      stream.println(ind(2) + "super.inc_cleanUpGarbage();");
      if (grammar().incrementalLevelParam || grammar().incrementalLevelAttr) {
        // tokens
        for (int c = 0; c < getNumComponents(); c++) {
           Components comp = getComponents(c);
           if (comp instanceof TokenComponent) {
            stream.println(ind(2) + "if (get" + ((TokenComponent)comp).getTokenId().getID() + "_handler != null) {");
            stream.println(ind(3) +   "get" + ((TokenComponent)comp).getTokenId().getID() + "_handler.cleanUpGarbage();");
            stream.println(ind(2) + "}");
           }
         }
      }
      // attributes
      for(Iterator itr = list.iterator(); itr.hasNext();) {
        AttrDecl attr = (AttrDecl)itr.next();
        if (grammar().incrementalLevelParam) {
          if (attr.getNumParameter() > 0) {
            stream.println(ind(2) + "for (java.util.Iterator itr = " + attr.attributeSignature() + 
                                  "_handler.values().iterator(); itr.hasNext();) {");
            stream.println(ind(3) +   "ASTNode$DepGraphNode handler = (ASTNode$DepGraphNode)itr.next();");
            stream.println(ind(3) +   "handler.cleanUpGarbage();");
            if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() && 
                !(attr.type().equals("String") || attr.type().equals("java.lang.String"))) {
              stream.println(ind(3) + "if (" + attr.attributeSignature() + "_computed && (" +
                                        attr.attributeSignature() + "_value instanceof ASTNode)) {");
              stream.println(ind(4) + attr.attributeSignature() + "_value.inc_cleanUpGarbage();");
              stream.println(ind(3) + "}");
            }
            stream.println(ind(2) + "}");
          } else {
            stream.println(ind(2) + "if (" + attr.attributeSignature() + "_handler != null) {");
            stream.println(ind(3) +   attr.attributeSignature() + "_handler.cleanUpGarbage();");
            if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() && 
                !(attr.type().equals("String") || attr.type().equals("java.lang.String"))) {
              stream.println(ind(3) + "if (" + attr.attributeSignature() + "_computed && (" +
                                        attr.attributeSignature() + "_value instanceof ASTNode)) {");
              stream.println(ind(4) + attr.attributeSignature() + "_value.inc_cleanUpGarbage();");
              stream.println(ind(3) + "}");
            }
            stream.println(ind(2) + "}");
          }
        }
        if (grammar().incrementalLevelAttr) {
          stream.println(ind(2) + "if (" + attr.attributeSignature() + "_handler != null) {");
          stream.println(ind(3) +   attr.attributeSignature() + "_handler.cleanUpGarbage();");
          stream.println(ind(2) + "}");
        }
        if (grammar().incrementalLevelAttr || grammar().incrementalLevelNode) {
          if ((attr.isNTA() || attr.getNTA()) && !attr.isPrimitive() && 
              !(attr.type().equals("String") || attr.type().equals("java.lang.String"))) {
            if (attr.getNumParameter() > 0) {
              stream.println(ind(2) + "if (" + attr.attributeSignature() + "_list != null) {");
              stream.println(ind(3) +   attr.attributeSignature() + "_list.inc_cleanUpGarbage();");
              stream.println(ind(2) + "}");
            } else {
              stream.println(ind(2) + "if (" + attr.attributeSignature() + "_computed && (" +
                                      attr.attributeSignature() + "_value instanceof ASTNode)) {");
              stream.println(ind(3) + attr.attributeSignature() + "_value.inc_cleanUpGarbage();");
              stream.println(ind(2) + "}");
            }
          }
        }
      }    
    }
    stream.println(ind + "}");    
    // end method: inc_cleanUpGarbage
    */
  } // end: jjtGenIncrementalState

}