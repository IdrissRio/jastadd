/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect IncrementalState {

  public void ASTDecl.genIncrementalState(PrintWriter out) {
    TemplateContext tt = templateContext();

    tt.expand("ASTDecl.incStateFields", out);

    tt.bind("ThrowAwayTokens", emitThrowAwayTokensString());
    tt.bind("ThrowAwayAttributes", emitThrowAwayAttributesString());
    tt.expand("ASTDecl.incThrowAwayMethod", out);
  }

  public String ASTDecl.emitThrowAwayTokensString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (int c = 0; c < getNumComponent(); c++) {
      Component comp = getComponent(c);
      if (comp instanceof TokenComponent) {
        tt.bind("Id", ((TokenComponent) comp).name());
        res.append(tt.expand("ASTDecl.throwAwayTokenHandler"));
      }
    }
    return res.toString();
  }

  public String ASTDecl.emitThrowAwayAttributesString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (Iterator itr = listOfCachedAttributes().iterator(); itr.hasNext();) {
      AttrDecl attr = (AttrDecl)itr.next();
      tt.bind("IsParameterized", attr.isParameterized());
      tt.bind("AttrSign", attr.signature());
      tt.bind("ThrowAwayValue", (attr.isNTA() || attr.getNTA()) &&
          !attr.isPrimitive() && !(attr.type().equals("String") || attr.type().equals("java.lang.String")));
      res.append(tt.expand("ASTDecl.throwAwayAttributeHandler"));
    }
    return res.toString();
  }

}
