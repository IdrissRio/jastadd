/* Copyright (c) 2005-2015, The JastAdd Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;

import java.util.*;

import org.jastadd.Problem;

/**
 * Abstract syntax error checking
 */
aspect ASTErrors {
  /**
   * Collects problems in the AST.
   * @return A collection of problems in the AST
   */
  coll Collection<Problem> Grammar.problems()
      [new LinkedList<Problem>()]
      with add;

  syn boolean TypeDecl.isRootNode() = false;

  eq ASTDecl.isRootNode() = isPotentialRootNode() && parents().isEmpty();

  syn boolean TypeDecl.isPotentialRootNode() = false;

  eq ASTDecl.isPotentialRootNode() =
      !hasAbstract() && !isASTNodeDecl() && !isOptSubtype() && !isListSubtype();

  Grammar contributes Problem.builder()
          .message("there is no root node in the grammar!")
          .buildWarning()
      when roots().isEmpty()
      to Grammar.problems()
      for this;

  // TODO(joqvist): add filename, line, column.
  TypeDecl contributes Problem.builder()
          .message("multiple production rule for non-terminal %s", name())
          .buildError()
      when grammar().lookup(name()) != this
      to Grammar.problems()
      for grammar();

  ASTDecl contributes Problem.builder()
          .message("multiple production rule for non-terminal %s", name())
          .sourceFile(getFileName())
          .sourceLine(getStartLine())
          .buildError()
      when grammar().lookup(name()) != this
      to Grammar.problems()
      for grammar();

  ASTDecl contributes Problem.builder()
          .message("%s causes circular inheritance", name())
          .sourceFile(getFileName())
          .sourceLine(getStartLine())
          .buildError()
      when isCircular()
      to Grammar.problems()
      for grammar();

  ASTDecl contributes Problem.builder()
        .message("%s inherits from undeclared class %s", name(), getSuperClass().name())
        .sourceFile(getFileName())
        .sourceLine(getStartLine())
        .buildError()
      when hasSuperClass() && superClass() == null
      to Grammar.problems()
      for grammar();

  Component contributes Problem.builder()
          .message("Component name %s is not unique in production rule for %s (%s)",
              name(), hostClass().name(), hostClass().lookupComponent(name()))
          .sourceFile(hostClass().getFileName())
          .sourceLine(hostClass().getStartLine())
          .buildError()
      when hostClass().lookupComponent(name()) != this
      to Grammar.problems()
      for grammar();

  Component contributes Problem.builder()
          .message("Type %s of component %s in production %s is not declared",
              type(), name(), hostClass().name())
          .sourceFile(hostClass().getFileName())
          .sourceLine(hostClass().getStartLine())
          .buildError()
      when !declared()
      to Grammar.problems()
      for grammar();

  public boolean Component.declared() {
    return grammar().lookup(type()) != null;
  }

  public boolean TokenComponent.declared() {
    return true;
  }
}

