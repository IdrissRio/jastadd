/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package ast;

import ast.AST.*;

import java.util.*;

/**
 * Aspect error checking.
 */
aspect ASTErrorCollector {
  /**
   * @return an empty string if there were no errors, otherwise a string
   * containing the error message(s).
   */
  syn String Grammar.astErrors() {
    return collectAstErrors();
  }
  
  syn String Grammar.collectAstErrors() {
    StringBuffer result = new StringBuffer();
    for(int i = 0; i < getNumTypeDecl(); i++) {
      result.append(getTypeDecl(i).collectAstErrors());
    }
    
    ArrayList l = roots();
    if(l.isEmpty())
      result.append("No root node available\n");
    /*
    if(l.size() > 1) {
      result.append("Multiple root nodes: ");
      Iterator iter = l.iterator();
      result.append(((ASTDecl)iter.next()).name());
      while(iter.hasNext())
        result.append(", " + ((ASTDecl)iter.next()).name());
      result.append("\n");
    }*/

    return result.toString();
  }
  
  syn ArrayList Grammar.roots() {
    ArrayList l = new ArrayList();
    for(int i = 0; i < getNumTypeDecl(); i++) {
      if(getTypeDecl(i) instanceof ASTDecl) {
        ASTDecl decl = (ASTDecl)getTypeDecl(i);
        if(decl.isRootNode())
          l.add(decl);
      }
    }
    return l;
  }
  syn boolean TypeDecl.isRootNode() = false;
  eq ASTDecl.isRootNode() = !hasAbstract() && !name().equals("ASTNode") && !name().equals("Opt") && !name().equals("List") && fathers().isEmpty();
  
  syn String TypeDecl.collectAstErrors() = astError();
  
  syn String ASTDecl.collectAstErrors() {
    StringBuffer result = new StringBuffer();
    result.append(astError());
    for(int i = 0; i < getNumComponents(); i++) {
      result.append(getComponents(i).astError());
    }
    return result.toString();
  }
}


aspect Errorcheck {
  syn String TypeDecl.astError() {
    StringBuffer result = new StringBuffer();
    
    if(env().lookup(name()) != this) {
      //result.append(getFileName() + ":" + getStartLine() + " "); TODO: FIXME
      result.append("Multiple production rule for non-terminal " +
          name() + "\n");
    }
    return result.toString();
  }
  
  syn String ASTDecl.astError() {
    StringBuffer result = new StringBuffer();
    
    if(env().lookup(name()) != this) {
      result.append(getFileName() + ":" + getStartLine() + " ");
      result.append("Multiple production rule for non-terminal " +
          name() + "\n");
    }
    
    if(isCircular()) {
      result.append(getFileName() + ":" + getStartLine() + " ");
      result.append(name() + " causes circular inheritance\n");
    }
    else if(hasSuperClass() && superClass() == null) {
      result.append(getFileName() + ":" + getStartLine() + " ");
      result.append(name() + " inherits from undeclared class " +
          getSuperClass().name() + "\n");
    }

      
    return result.toString();
  }

  syn String Components.astError() {
    StringBuffer result = new StringBuffer();

    if(hostClass().lookupComponents(name()) != this) {
      result.append(hostClass().getFileName() + ":" + hostClass().getStartLine() + " ");
      result.append("Component name " + name() + " is not unique in " +
          "production rule for " + hostClass().name() + "\n");
    }

    if(!declared()) {
      result.append(hostClass().getFileName() + ":" + hostClass().getStartLine() + " ");
      result.append("Type " + type() + " of component " + name() +
          " in production " + hostClass().name() + " is not declared\n");
    }
    return result.toString();
  }
  
  public boolean Components.declared() {
    return env().lookup(type()) != null;
  }

  public boolean TokenComponent.declared() {
    return true;
  }
}

