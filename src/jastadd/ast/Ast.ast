Grammar ::= TypeDecl*  RegionDecl*;

/** Region declarations for coarse incremental dependency tracking, e.g., "region A;" */
RegionDecl ::= IdUse;

abstract TypeDecl ::= IdDecl ClassBodyDecl* SynEq* InhDecl* InhEq*
    Component* CollDecl* <FileName> <StartLine:int> <EndLine:int>
    <Comment:String> <AspectName:String>;

ClassDecl : TypeDecl;

InterfaceDecl : TypeDecl;

EnumDecl : TypeDecl;

ASTDecl : TypeDecl ::= [Abstract] IdDecl [SuperClass:IdUse] Component*
    SynDecl* SynEq* InhDecl* InhEq* ClassBodyDecl* Rewrite* CollDecl* CollEq*
    <FileName> <StartLine:int> <EndLine:int> <Comment:String>
    /CircularRewriteDecl/;

Abstract;

Annotation ::= <Annotation:String>;

abstract AttrDecl ::= Parameter* <Name> <Type> <CacheMode:CacheMode> <FileName> <StartLine:int>
    <EndLine:int> <Final:boolean> <NTA:boolean> <Comment:String> <AspectName:String> Annotation*;

SynDecl : AttrDecl;

/**
 * Only used to generate code for implicit circular rewrite NTAs.
 * The reason a separate node type is used for this is because we need to
 * change the code generation for the implicit circular NTA slightly.
 * The changes in code generation affect parent attachment and update condition.
 */
CircularRewriteDecl : AttrDecl;

InhDecl : AttrDecl;

CollDecl : AttrDecl ::= <Target>;

Parameter ::= <Type:String> <Name:String>;

abstract AttrEq ::= Parameter* <Name> <FileName> <StartLine:int> <EndLine:int> <Comment:String>
    <AspectName:String> Annotation*;

SynEq : AttrEq ::= Parameter* <Name> <FileName> <StartLine:int> <EndLine:int> <Comment:String>
    <AspectName:String>;

InhEq : AttrEq ::= Parameter* <Name> <FileName> <StartLine:int> <EndLine:int> <Comment:String>
    <AspectName:String> <ChildName> [Index:Parameter];

CollEq : AttrEq ::= Parameter* <Name> <FileName> <StartLine:int> <EndLine:int> <Comment:String>
    <AspectName:String> <Value:String> <Condition:String> <TargetName:String>
    <TargetAttributeName:String> <Reference:String>;

ClassBodyDecl ::= <Name> <FileName> <StartLine:int> <EndLine:int> <AspectName:String>;

Rewrite ::= <FileName> <StartLine:int> <EndLine:int> <AspectName>;

RewriteList : Rewrite;

/** A component of an AST node type declaration. */
abstract Component;

ListComponent : Component ::= Id;

ListComponentNTA : ListComponent;

OptionalComponent : Component ::= Id;

OptionalComponentNTA : OptionalComponent;

TokenComponent : Component ::= TokenId;

TokenComponentNTA : TokenComponent;

AggregateComponent : Component ::= Id;

AggregateComponentNTA : AggregateComponent;

Id ::= [NameNode] IdUse;

NameNode ::= <ID:String>;

IdUse ::= <ID:String>;

IdDecl ::= <ID:String>;

TokenId ::= <ID:String> <TYPE:String>;

/**
 * Used to represent synthesized NTA components.
 *
 * <p>Synthesized NTAs are mostly not treated as components, but we need to know
 * about them when checking for missing inherited equations.
 */
SynthesizedNta ::= <Name:String> <Type:String>;
