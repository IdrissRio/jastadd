/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;
import java.util.*;

aspect Environment {
  eq Grammar.getTypeDecl().env() = this;

  inh Grammar Components.env();
  inh Grammar IdUse.env();
  inh Grammar TypeDecl.env();

  // ES_2011-12-05: Equation for the RegionDecl child of Grammar, coarse incremental dependency tracking
  eq Grammar.getRegionDecl().env() = this;
  //
}

aspect Lookup {
  syn TypeDecl Grammar.lookup(String name) {
    for(int i = 0; i < getNumTypeDecl(); i++) {
      if(getTypeDecl(i).name().equals(name))
        return getTypeDecl(i);
    }
    return null;
  }

  public TypeDecl Grammar.findClassDecl(String name, String comment) {
    comment = comment.trim();
    if(!comment.startsWith("/"))
      comment = "";
    
    TypeDecl t = lookup(name);
    if(t == null) {
      t = new ClassDecl(new IdDecl(name), new List(), new List(), new List(), new List(), new List(), new List(), new List(), "", 0 ,0, comment);
      addTypeDecl(t);
    }
    return t;
  }
  
  public TypeDecl Grammar.findInterfaceDecl(String name, String comment) {
    comment = comment.trim();
    if(!comment.startsWith("/"))
      comment = "";
    TypeDecl t = lookup(name);
    if(t == null) {
      t = new InterfaceDecl(new IdDecl(name), new List(), new List(), new List(), new List(), new List(), new List(), new List(), "", 0, 0, comment);
      addTypeDecl(t);
    }
    return t;
  }
    
  syn lazy Components TypeDecl.lookupComponents(String name) = null;
  eq ASTDecl.lookupComponents(String name) {
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(c.name().equals(name))
        return c;
    }
    return null;
  }
}

aspect Names {
  syn String TypeDecl.name() = getIdDecl().name();
  syn String IdDecl.name() = getID();
  
  syn String Components.name();
  eq ListComponents.name() = getId().name();
  eq OptionalComponent.name() = getId().name();
  eq TokenComponent.name() = getTokenId().name();
  eq AggregateComponents.name() = getId().name();

  syn String Id.name() = hasNameNode() ?
    getNameNode().name() : getIdUse().name();

  syn String NameNode.name() = getID();
  syn String IdUse.name() = getID();

  syn String TokenId.name() = getID();

  // ES_2011-12-05: Name to RegionDecl, coarse incremental evaluation
  syn String RegionDecl.name() = getIdUse().name();
  //
}

aspect Types {
  syn String Components.type();
  eq ListComponents.type() = getId().type();
  eq OptionalComponent.type() = getId().type();
  eq TokenComponent.type() = getTokenId().type();
  eq AggregateComponents.type() = getId().type();

  syn String Id.type() = getIdUse().name();

  syn String TokenId.type() = getTYPE();
}

aspect ComponentsHostClass {
  syn String Components.className() = hostClass().name();
}
