/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;
import java.util.*;

aspect Lookup {
  syn TypeDecl Grammar.lookup(String name) {
    for (int i = 0; i < getNumTypeDecl(); i++) {
      if (getTypeDecl(i).name().equals(name)) {
        return getTypeDecl(i);
      }
    }
    return null;
  }

  public TypeDecl Grammar.findClassDecl(String name, String comment,
      String fileName, int beginLine, String enclosingAspect) {
    comment = comment.trim();
    if (!comment.startsWith("//") || !comment.startsWith("/*")) {
      comment = "";
    }
    TypeDecl t = lookup(name);
    if (t == null) {
      t = new ClassDecl(new IdDecl(name), new List(), new List(), new List(),
          new List(), new List(), new List(), new List(),
          fileName, beginLine ,-1, comment,
          enclosingAspect);
      addTypeDecl(t);
    }
    return t;
  }

  public TypeDecl Grammar.findInterfaceDecl(String name, String comment,
      String fileName, int beginLine, String enclosingAspect) {
    comment = comment.trim();
    if (!comment.startsWith("//") || !comment.startsWith("/*")) {
      comment = "";
    }
    TypeDecl t = lookup(name);
    if (t == null) {
      t = new InterfaceDecl(new IdDecl(name), new List(), new List(),
          new List(), new List(), new List(), new List(), new List(),
          fileName, beginLine, -1, comment, enclosingAspect);
      addTypeDecl(t);
    }
    return t;
  }

  public TypeDecl Grammar.findEnumDecl(String name, String comment,
      String fileName, int beginLine, String enclosingAspect) {
    comment = comment.trim();
    if (!comment.startsWith("//") || !comment.startsWith("/*")) {
      comment = "";
    }
    TypeDecl t = lookup(name);
    if (t == null) {
      t = new EnumDecl(new IdDecl(name), new List(), new List(),
          new List(), new List(), new List(), new List(), new List(),
          fileName, beginLine, -1, comment, enclosingAspect);
      addTypeDecl(t);
    }
    return t;
  }

  syn lazy Component TypeDecl.lookupComponent(String name) = null;

  eq ASTDecl.lookupComponent(String name) {
    for (Component c : components()) {
      if (c.name().equals(name)) {
        return c;
      }
    }
    return null;
  }
}

aspect Names {
  syn String TypeDecl.name() = getIdDecl().name();
  syn String IdDecl.name() = getID();

  syn String Component.name();
  eq ListComponent.name() = getId().name();
  eq OptionalComponent.name() = getId().name();
  eq TokenComponent.name() = getTokenId().name();
  eq AggregateComponent.name() = getId().name();

  syn String Id.name() = hasNameNode() ?  getNameNode().name() : getIdUse().name();

  syn String NameNode.name() = getID();
  syn String IdUse.name() = getID();

  syn String TokenId.name() = getID();

  syn String RegionDecl.name() = getIdUse().name();
}

aspect Types {
  syn String Component.type();
  eq ListComponent.type() = getId().type();
  eq OptionalComponent.type() = getId().type();
  eq TokenComponent.type() = getTokenId().type();
  eq AggregateComponent.type() = getId().type();

  syn String Id.type() = getIdUse().name();

  syn String TokenId.type() = getTYPE();
}

aspect ComponentHostClass {
  syn String Component.className() = hostClass().name();

  syn String AttrDecl.className() = hostClass().name();

  syn String AttrEq.className() = hostClass().name();
}

aspect Kind {
  syn String Component.kind();
  eq ListComponent.kind() = "List";
  eq OptionalComponent.kind() = "Opt";
  eq TokenComponent.kind() = "Token";
  eq AggregateComponent.kind() = "Child";
}
