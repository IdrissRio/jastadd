/* Copyright (c) 2005-2015, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jastadd.jrag.AST.ASTExpression;

import org.jastadd.jrag.Unparser;

import org.jastadd.Problem;

public aspect Attributes {

  public Collection<Problem> Grammar.problems = new LinkedList<Problem>();

  /**
   * Add an error to the grammar.
   */
  public void Grammar.error(String message, String file, int line) {
    problems.add(Problem.builder()
        .message(message)
        .sourceFile(file)
        .sourceLine(line)
        .buildError());
  }

  /**
   * Add an error to the grammar.
   */
  public void Grammar.error(String message) {
    problems.add(Problem.builder()
        .message(message)
        .buildError());
  }

  /**
   * Add an error to the grammar.
   */
  public void Grammar.errorf(String messagefmt, Object... args) {
    error(String.format(messagefmt, args));
  }

  public Collection<Problem> Grammar.weavingProblems() {
    return problems;
  }

  public void ASTNode.refineError(String what, String file, int line) {
    grammar().error("cannot find " + what + " to refine\n"
        + "Warning: implicitly generated methods and equations must be refined"
        + " without an explicit aspect name", file, line);
  }

  public HashMap Grammar.aspectMap = new HashMap();

  public void Grammar.registerAspect(String name, String comment) {
    aspectMap.put(name, comment);
  }

  public void Grammar.addRewrite(
      String className,
      org.jastadd.jrag.AST.SimpleNode condition,
      org.jastadd.jrag.AST.SimpleNode result,
      String type,
      String fileName,
      int startLine,
      int endLine,
      String aspectName) {

    if (!config().rewriteEnabled()) {
      error("cannot use rewrites while rewrites are disabled (enable with --rewrite=cnta)",
          fileName, startLine);
      return;
    }

    TypeDecl c = lookup(className);
    if (c != null && c instanceof ASTDecl) {
      Rewrite r = new Rewrite();
      r.setFileName(fileName);
      r.setStartLine(startLine);
      r.setEndLine(endLine);
      r.setCondition(condition);
      r.setResult(result);
      r.setReturnType(type);
      r.setAspectName(aspectName);
      ((ASTDecl)c).addRewrite(r);
    } else if (c != null) {
      error("cannot rewrite to non AST class '" + className + "'", fileName, startLine);
    } else {
      error("cannot rewrite to unknown class '" + className + "'", fileName, startLine);
    }
  }

  public class CacheDecl {
    public String mode;
    public String hostName;
    public String attrName;
    public String signature;
    public String fileName;
    public int startLine;
  }

  public ArrayList<CacheDecl> Grammar.cacheDecls = new ArrayList<CacheDecl>();

  /**
   * Configures the caching behavior for an attribute.
   *
   * @param mode The cache configuration, should be "cache" or "uncache"
   * @param hostName The node type hosting the attribute
   * @param attrName The attribute name
   * @param paramList The list of attribute parameters
   * @param fileName The name of the file with the attribute declaration
   * @param startLine The line of the attribute declaration
   */
  public void Grammar.setAttributeCacheMode(String mode, String hostName, String attrName,
      org.jastadd.ast.AST.List paramList, String fileName, int startLine) {
    CacheDecl decl = new CacheDecl();
    decl.mode = mode;
    decl.hostName = hostName;
    decl.attrName = attrName;
    decl.fileName = fileName;
    decl.startLine = startLine;
    StringBuilder signature = new StringBuilder();
    signature.append(attrName);
    for (int i = 0; i < paramList.getNumChild(); i++) {
      signature.append("_" + ((Parameter) paramList.getChild(i)).getTypeInSignature());
    }
    decl.signature = signature.toString();
    cacheDecls.add(decl);
  }

  public void Grammar.applyCacheMode(CacheDecl decl, Collection<Problem> problems) {
    // Lookup type.
    TypeDecl type = lookup(decl.hostName);
    if (type == null) {
      problems.add(Problem.builder()
          .message("cannot find attribute %s in unknown class %s", decl.attrName, decl.hostName)
          .sourceFile(decl.fileName)
          .sourceLine(decl.startLine)
          .buildError());
      return;
    }
    // Lookup attribute; first 'syn' then 'inh'.
    AttrDecl attr = null;
    if ((attr = type.lookupSynDecl(decl.signature)) == null
        && (attr = type.lookupInhDecl(decl.signature)) == null) {
      problems.add(Problem.builder()
          .message("cannot find attribute %s.%s", decl.hostName, decl.attrName)
          .sourceFile(decl.fileName)
          .sourceLine(decl.startLine)
          .buildError());
      return;
    }
    // Configure attribute caching.
    if (decl.mode.equals("cache")) {
      attr.setCacheMode(CacheMode.CACHED);
    } else if (decl.mode.equals("uncache")) {
      attr.setCacheMode(CacheMode.UNCACHED);
    } else {
      problems.add(Problem.builder()
          .message("unknown configuration %s for attribute %s.%s", decl.mode, decl.hostName,
              decl.attrName)
          .sourceFile(decl.fileName)
          .sourceLine(decl.startLine)
          .buildError());
    }
  }

  public Collection<SynDecl> Grammar.synDecls = new ArrayList<SynDecl>();

  public Collection<SynEq> Grammar.synEqs = new ArrayList<SynEq>();

  public String AttrDecl.hostName = "";

  public String AttrEq.hostName = "";

  public Collection<InhDecl> Grammar.inhDecls = new ArrayList<InhDecl>();

  public Collection<InhEq> Grammar.inhEqs = new ArrayList<InhEq>();

  public void Grammar.addSynDecl(
      String name,
      String type,
      String className,
      boolean isLazy,
      String fileName,
      int startLine,
      int endLine,
      org.jastadd.ast.AST.List parameterList,
      String bottomValue,
      boolean isFinal,
      boolean isNTA,
      org.jastadd.jrag.AST.SimpleNode node,
      String aspectName,
      ArrayList<String> annotations,
      boolean isNonCircular) {
    SynDecl decl = new SynDecl(
        parameterList,
        name,
        type,
        (isLazy | isNTA) ? CacheMode.LAZY : CacheMode.DEFAULT,
        fileName,
        startLine,
        endLine,
        isFinal | isNTA,
        isNTA,
        Unparser.unparseComment(node),
        aspectName,
        new List(),
        isNonCircular);
    for (String annotation : annotations) {
      decl.addAnnotation(new Annotation(annotation));
    }
    decl.setBottomValue(bottomValue);
    decl.hostName = className;
    synDecls.add(decl);
  }

  public void Grammar.addSynEq(
      String name,
      String className,
      org.jastadd.jrag.AST.SimpleNode rhs,
      String fileName,
      int startLine,
      int endLine,
      org.jastadd.ast.AST.List list,
      org.jastadd.jrag.AST.SimpleNode node,
      String aspectName,
      ArrayList<String> annotations) {
    SynEq equ = new SynEq();
    equ.setName(name);
    equ.setFileName(fileName);
    equ.setStartLine(startLine);
    equ.setEndLine(endLine);
    equ.setRHS(rhs);
    equ.setParameterList(list);
    equ.setComment(Unparser.unparseComment(node));
    equ.setAspectName(aspectName);
    for (String annotation : annotations) {
      equ.addAnnotation(new Annotation(annotation));
    }
    equ.hostName = className;
    synEqs.add(equ);
  }

  public void Grammar.addInhDecl(String name, String type, String className,
      boolean isLazy, String fileName, int startLine, int endLine,
      org.jastadd.ast.AST.List parameterList, String bottomValue,
      boolean isFinal, boolean isNTA, org.jastadd.jrag.AST.SimpleNode node,
      String aspectName, ArrayList<String> annotations) {
    InhDecl decl = new InhDecl(
        parameterList,
        name,
        type,
        (isLazy | isNTA) ? CacheMode.LAZY : CacheMode.DEFAULT,
        fileName,
        startLine,
        endLine,
        isFinal | isNTA,
        isNTA,
        Unparser.unparseComment(node),
        aspectName,
        new List()
    );
    for (String annotation : annotations) {
      decl.addAnnotation(new Annotation(annotation));
    }
    decl.setBottomValue(bottomValue);
    decl.hostName = className;
    inhDecls.add(decl);
  }

  public void Grammar.addInhEq(String childName, String name, String className,
      org.jastadd.jrag.AST.SimpleNode rhs, String fileName, int startLine,
      int endLine, org.jastadd.ast.AST.List list,
      org.jastadd.jrag.AST.SimpleNode node, String aspectName,
      ArrayList<String> annotations) {
    addInhEq(childName, name, className, rhs, fileName, startLine, endLine,
        list, null, node, aspectName, annotations);
  }

  public void Grammar.addInhEq(String childName, String name, String className,
      org.jastadd.jrag.AST.SimpleNode rhs, String fileName, int startLine,
      int endLine, org.jastadd.ast.AST.List list, Parameter p,
      org.jastadd.jrag.AST.SimpleNode node, String aspectName,
      ArrayList<String> annotations) {
    InhEq equ = new InhEq();
    equ.setName(name);
    equ.setFileName(fileName);
    equ.setStartLine(startLine);
    equ.setEndLine(endLine);
    equ.setRHS(rhs);
    equ.setChildName(childName);
    equ.setParameterList(list);
    equ.setComment(Unparser.unparseComment(node));
    equ.setAspectName(aspectName);
    for (String annotation : annotations) {
      equ.addAnnotation(new Annotation(annotation));
    }
    if (p != null) {
      equ.setIndex(p);
    }
    equ.hostName = className;
    inhEqs.add(equ);
  }

  public void Grammar.addComponents(String className, org.jastadd.ast.AST.List componentsList) {
    TypeDecl d = lookup(className);
    if (d != null) {
      d.setComponentList(componentsList);
    }
  }

  /** Find the component with the given name. */
  syn lazy Component TypeDecl.component(String name) {
    for (Component c : components()) {
      if (c.name().equals(name)) {
        return c;
      }
    }
    return null;
  }

  public void Grammar.addCompUnit(org.jastadd.jrag.AST.ASTCompilationUnit compUnit) {
    compilationUnits.add(compUnit);
  }

  public void Grammar.addMethodDecl(org.jastadd.jrag.AST.SimpleNode n, String className,
      String fileName, String modifiers, String aspectName) {
    TypeDecl c = lookup(className);
    if (c != null) {
      ClassBodyObject obj = new ClassBodyObject(n, fileName, n.firstToken.beginLine, aspectName);
      obj.modifiers = modifiers;
      c.classBodyDecls.add(obj);
    } else {
      error("cannot add member to unknown class " + className, fileName, n.firstToken.beginLine);
    }
  }

  public Map<String, Collection<ClassBodyObject>> Grammar.interTypeDecls
      = new HashMap<String, Collection<ClassBodyObject>>();

  protected void Grammar.addInterTypeDecl(String className, ClassBodyObject decl) {
    if (!interTypeDecls.containsKey(className)) {
      interTypeDecls.put(className, new ArrayList<ClassBodyObject>());
    }
    interTypeDecls.get(className).add(decl);
  }

  public void Grammar.addClassBodyDecl(org.jastadd.jrag.AST.SimpleNode n,
      String className, String fileName, String aspectName) {
    addInterTypeDecl(className, new ClassBodyObject(n, fileName, n.firstToken.beginLine, aspectName));
  }

  public void Grammar.addClassBodyDecl(org.jastadd.jrag.AST.SimpleNode n,
      String className, String fileName, String modifiers, String aspectName) {
    ClassBodyObject obj = new ClassBodyObject(n, fileName, n.firstToken.beginLine, aspectName);
    obj.modifiers = modifiers;
    addInterTypeDecl(className, obj);
  }

  public Collection<ClassBodyObject> TypeDecl.classBodyDecls = new LinkedHashSet<ClassBodyObject>();

  public String AttrEq.aspectName() {
    return getAspectName();
  }

  public String AttrEq.legacyAspectName() {
    String name = getFileName();
    if (name.endsWith(".jrag")) {
      name = name.substring(0, name.length() - 5);
    } else if (name.endsWith(".jadd")) {
      name = name.substring(0, name.length() - 5);
    } else if (name.endsWith(".ast")) {
      name = name.substring(0, name.length() - 4);
    }
    String pattern = File.separator.equals("\\") ? pattern = "\\\\" : File.separator;
    String[] names = name.split(pattern);
    return names[names.length-1];
  }

  public void Grammar.processRefinements() {
    for (int i = 0; i < getNumTypeDecl(); i++) {
      TypeDecl typeDecl = getTypeDecl(i);
      if (!(typeDecl instanceof InterfaceDecl)) {
        typeDecl.processRefinedClassBodyDecls();
        typeDecl.processRefinedSynEqs();
        typeDecl.processRefinedInhEqs();
      }
    }
  }

  public void Grammar.processInterfaceRefinements() {
    for (int i = 0; i < getNumTypeDecl(); i++) {
      TypeDecl typeDecl = getTypeDecl(i);
      if (typeDecl instanceof InterfaceDecl) {
        typeDecl.processRefinedClassBodyDecls();
        typeDecl.processRefinedSynEqs();
        typeDecl.processRefinedInhEqs();
      }
    }
  }

  public int TypeDecl.numRefinedSynEqs = 0;
  public Collection<SynEq> TypeDecl.refinedSynEqs = new LinkedList<SynEq>();

  public void Grammar.addRefinedSynEq(String name, String className,
      org.jastadd.jrag.AST.SimpleNode rhs, String fileName, int startLine, int endLine,
      org.jastadd.ast.AST.List list, String aspectName, org.jastadd.jrag.AST.SimpleNode node,
      String declaredAspect) {
    TypeDecl c = lookup(className);
    if (c != null) {
      SynEq equ = new SynEq();
      equ.setName(name);
      equ.setFileName(fileName);
      equ.setStartLine(startLine);
      equ.setEndLine(endLine);
      equ.setRHS(rhs);
      equ.setParameterList(list);
      equ.refinesAspect = aspectName;
      equ.setComment(Unparser.unparseComment(node));
      equ.setAspectName(declaredAspect);
      c.refinedSynEqs.add(equ);
      c.numRefinedSynEqs += 1;
    } else {
      error("cannot add equation for synthesized attribute " + name + " to unknown class "
          + className, fileName, startLine);
    }
  }

  public String AttrEq.replacesAspect = null;

  public String AttrEq.refinesAspect = null;

  // Multiple refinements done in order specified by the selected aspect name
  // error detection:
  //   detect attempts to refine equation using the wrong aspect name
  //   detect multiple attempts to refine an equation using the same aspect name
  public void TypeDecl.processRefinedSynEqs() {
    boolean change = true;
    while (change && !refinedSynEqs.isEmpty()) {
      change = false;
      for (int i = 0; i < getNumSynEq(); i++) {
        SynEq equ = getSynEq(i);
        SynEq refinedEqu = null;
        Iterator<SynEq> outerIter = refinedSynEqs.iterator();
        while (outerIter.hasNext()) {
          SynEq refinedCandidate = outerIter.next();
          boolean legacyCondition = config().refineLegacy()
              && equ.legacyAspectName().equals(refinedCandidate.refinesAspect);
          if (equ.signature().equals(refinedCandidate.signature())
             && (equ.aspectName().equals(refinedCandidate.refinesAspect) || legacyCondition)) {
            change = true;
            if (refinedEqu == null) {
              refinedEqu = refinedCandidate;
            } else {
              grammar().error("refinement previously defined at " +
                  refinedCandidate.getFileName() + ":" + refinedCandidate.getStartLine(),
                  refinedEqu.getFileName(), refinedEqu.getStartLine());
            }
            outerIter.remove();
          }
        }
        if (refinedEqu != null) {
          refineWith(equ, refinedEqu);
        }
      }
    }
    for (SynEq equ : refinedSynEqs) {
      refineError("syn equation", equ.getFileName(), equ.getStartLine());
    }
  }

  public void TypeDecl.refineWith(SynEq equ, SynEq refinedEqu) {
    StringBuffer s = new StringBuffer();
    String newMethodName
        = String.format("refined_%s_%s_%s", equ.aspectName(), name(), equ.signature());
    if (equ.decl() == null) {
      throw new Error(String.format(
          "Error: could not find declaration of refined synthesized equation %s (%s:%d)",
          equ.name(), equ.getFileName(), equ.getStartLine()));
    }
    s.append(String.format("private %s %s(%s)\n",
          equ.decl().getType(), newMethodName, equ.parametersDecl()));
    if (equ.getRHS() instanceof ASTBlock) {
      s.append(Unparser.unparse(equ.getRHS()));
    } else {
      s.append("{ return " + Unparser.unparse(equ.getRHS()) + "; }");
    }
    org.jastadd.jrag.AST.SimpleNode n = new org.jastadd.jrag.AST.ASTBlock(0);
    n.firstToken = n.lastToken = org.jastadd.jrag.AST.Token.newToken(0);
    n.firstToken.image = s.toString();
    ClassBodyObject object = new ClassBodyObject(n, equ.getFileName(),
        equ.getStartLine(), equ.getAspectName());

    if (refinedEqu.getRHS() instanceof org.jastadd.jrag.AST.ASTBlock) {
      n = new org.jastadd.jrag.AST.ASTBlock(0);
    } else {
      n = new org.jastadd.jrag.AST.SimpleNode(0);
    }

    n.firstToken = n.lastToken = org.jastadd.jrag.AST.Token.newToken(0);
    s = new StringBuffer();
    refinedEqu.getRHS().jjtAccept(new ClassBodyDeclUnparser(), s);

    String pattern = "\\brefined\\b";
    if (config().refineLegacy()) {
      StringBuffer buf = new StringBuffer();
      buf.append("(");
      buf.append(pattern);
      buf.append(")|(");
      buf.append("\\b");
      buf.append(equ.legacyAspectName());
      buf.append("\\.[a-zA-Z0-9_$]+\\.");
      buf.append(equ.name());
      buf.append("\\b)");
      pattern = buf.toString();
    }
    Matcher matcher = Pattern.compile(pattern).matcher(s.toString());
    if (matcher.find()) {
      n.firstToken.image = matcher.replaceAll(newMethodName);
      classBodyDecls.add(object);
    } else {
      n.firstToken.image = s.toString();
    }
    // Change body of original equation to the refined body.
    equ.setRHS(n);
    equ.setFileName(refinedEqu.getFileName());
    equ.setStartLine(refinedEqu.getStartLine());
    equ.setEndLine(refinedEqu.getEndLine());
    equ.setAspectName(refinedEqu.getAspectName());
  }

  public int TypeDecl.numRefinedInhEqs = 0;
  public Collection<InhEq> TypeDecl.refinedInhEqs = new LinkedList<InhEq>();

  public void Grammar.addRefinedInhEq(String childName, String name, String className,
      org.jastadd.jrag.AST.SimpleNode rhs, String fileName, int startLine, int endLine,
      org.jastadd.ast.AST.List list, String aspectName, org.jastadd.jrag.AST.SimpleNode node,
      String declaredAspect) {
    addRefinedInhEq(childName, name, className, rhs, fileName, startLine, endLine, list, null,
        aspectName, node, declaredAspect);
  }

  public void Grammar.addRefinedInhEq(String childName, String name, String className,
      org.jastadd.jrag.AST.SimpleNode rhs, String fileName, int startLine, int endLine,
      org.jastadd.ast.AST.List list, Parameter p, String aspectName,
      org.jastadd.jrag.AST.SimpleNode node, String declaredAspect) {
    TypeDecl c = lookup(className);
    if (c != null) {
        InhEq equ = new InhEq();
        equ.setName(name);
        equ.setFileName(fileName);
        equ.setStartLine(startLine);
        equ.setEndLine(endLine);
        equ.setRHS(rhs);
        equ.setChildName(childName);
        equ.setParameterList(list);
        equ.refinesAspect = aspectName;
        equ.setComment(Unparser.unparseComment(node));
        equ.setAspectName(declaredAspect);
        if (p != null) {
          equ.setIndex(p);
        }
        c.refinedInhEqs.add(equ); // Sort in alphabetical order, then non-NTAs first.
        c.numRefinedInhEqs += 1;
    } else {
      error("cannot add equation for inherited attribute " + name + " to unknown class "
          + className, fileName, startLine);
    }
  }

  public void TypeDecl.processRefinedInhEqs() {
    boolean change = true;
    while (change && !refinedInhEqs.isEmpty()) {
      change = false;
      for (int i = 0; i < getNumInhEq(); i++) {
        InhEq equ = getInhEq(i);
        InhEq refinedEqu = null;
        Iterator<InhEq> outerIter = refinedInhEqs.iterator();
        while (outerIter.hasNext()) {
          InhEq refinedCandidate = outerIter.next();
          boolean legacyCondition = config().refineLegacy() &&
              equ.legacyAspectName().equals(refinedCandidate.refinesAspect);
          if (equ.signature().equals(refinedCandidate.signature()) &&
             equ.childName().equals(refinedCandidate.childName()) &&
             (equ.aspectName().equals(refinedCandidate.refinesAspect) || legacyCondition)) {
            change = true;
            if (refinedEqu == null) {
              refinedEqu = refinedCandidate;
            } else {
              grammar().error("refinement previously defined at " +
                  refinedCandidate.getFileName() + ":" + refinedCandidate.getStartLine(),
                  refinedEqu.getFileName(), refinedEqu.getStartLine());
            }
            outerIter.remove();
          }
        }
        if (refinedEqu != null) {
          refineWith(equ, refinedEqu);
        }
      }
    }
    for (InhEq equ : refinedInhEqs) {
      refineError("inh equation", equ.getFileName(), equ.getStartLine());
    }
  }

  public void TypeDecl.refineWith(InhEq equ, InhEq refinedEqu) {
    // Build a ClassBodyObject from the original equation.
    StringBuffer s = new StringBuffer();
    String newMethodName = "refined_" + equ.aspectName() + "_" + name() + "_" + equ.childName()
        + "_" + equ.signature();

    String indexName = "";
    String indexDecl = "";
    boolean isList = equ.getComponent() instanceof ListComponent;
    if (isList) {
      indexName = equ.hasIndex() ? equ.getIndex().getName() : "childIndex";
      indexDecl = "int " + indexName;
      if (equ.getNumParameter() != 0) {
        indexName += ", ";
        indexDecl += ", ";
      }
    }

    s.append(String.format("private %s %s(%s%s)\n",
      equ.decl().getType(), newMethodName, indexDecl, equ.parametersDecl()));
    if (equ.getRHS() instanceof ASTBlock) {
      s.append(Unparser.unparse(equ.getRHS()));
    } else {
      s.append("{ return " + Unparser.unparse(equ.getRHS()) + "; }");
    }
    org.jastadd.jrag.AST.SimpleNode n = new org.jastadd.jrag.AST.ASTBlock(0);
    n.firstToken = n.lastToken = org.jastadd.jrag.AST.Token.newToken(0);
    n.firstToken.image = s.toString();
    ClassBodyObject object = new ClassBodyObject(n, equ.getFileName(),
        equ.getStartLine(), equ.getAspectName());
    // Change references to original equation in refined body.
    if (refinedEqu.getRHS() instanceof org.jastadd.jrag.AST.ASTBlock) {
      n = new org.jastadd.jrag.AST.ASTBlock(0);
    } else {
      n = new org.jastadd.jrag.AST.SimpleNode(0);
    }
    n.firstToken = n.lastToken = org.jastadd.jrag.AST.Token.newToken(0);
    s = new StringBuffer();
    refinedEqu.getRHS().jjtAccept(new ClassBodyDeclUnparser(), s);

    String pattern = "refined\\(";
    if (config().refineLegacy()) {
      pattern = String.format("(%s)|(%s\\.[a-zA-Z0-9]+\\.get%s\\([^\\)]*\\)\\.%s\\()",
          pattern, equ.legacyAspectName(), equ.childName(), equ.name());
    }

    Matcher matcher = Pattern.compile(pattern).matcher(s.toString());
    if (matcher.find()) {
      n.firstToken.image = matcher.replaceAll(newMethodName + "(" + indexName);
      classBodyDecls.add(object);
    } else {
      n.firstToken.image = s.toString();
    }

    // Change body of original equation to the refined body.
    equ.setRHS(n);
    equ.setFileName(refinedEqu.getFileName());
    equ.setStartLine(refinedEqu.getStartLine());
    equ.setEndLine(refinedEqu.getEndLine());
    equ.setAspectName(refinedEqu.getAspectName());
  }

  public int TypeDecl.numRefinedCBDecls = 0;
  public Collection<ClassBodyObject> TypeDecl.refinedClassBodyDecls =
      new LinkedList<ClassBodyObject>();

  public void Grammar.addRefinedClassBodyDecl(org.jastadd.jrag.AST.SimpleNode n, String className,
      String fileName, String aspectName, String declaredAspect) {
    TypeDecl c = lookup(className);
    if (c != null) {
      ClassBodyObject o = new ClassBodyObject(n, fileName, n.firstToken.beginLine, declaredAspect);
      o.refinesAspect = aspectName;
      c.refinedClassBodyDecls.add(o);
      c.numRefinedCBDecls += 1;
    } else {
      error("cannot add member to unknown class " + className + " in " + fileName);
    }
  }

  /*
  process all refine - to
    if there are multiple refines to that target the same class body decl then error
    if there is a single refine to then
      remove that target class body decl
      turn the refine into a class body decl
  process all normal refines
    if there are multiple refine that target the same class body decl then error
    if there is a single refine then
      change the name of the target class body decl
      turn the refine into a class body decl
        replace all delegations of refined class body decl
  */
  public void TypeDecl.processRefinedClassBodyDecls() {
    boolean change = true;
    Collection<ClassBodyObject> list = new ArrayList<ClassBodyObject>();

    while (change && !refinedClassBodyDecls.isEmpty()) {
      change = false;
      Iterator<ClassBodyObject> iter = classBodyDecls.iterator();
      while (iter.hasNext()) {
        ClassBodyObject decl = iter.next();
        ClassBodyObject refinedDecl = null;
        Iterator<ClassBodyObject> outerIter = refinedClassBodyDecls.iterator();
        while (outerIter.hasNext()) {
          ClassBodyObject refinedCandidate = outerIter.next();

          boolean legacyCondition = config().refineLegacy()
              && decl.legacyAspectName().equals(refinedCandidate.refinesAspect);
          if (decl.signature().equals(refinedCandidate.signature())
              && (decl.aspectName().equals(refinedCandidate.refinesAspect) || legacyCondition)) {
            change = true;
            if (refinedDecl == null) {
              refinedDecl = refinedCandidate;
            } else {
              grammar().error(
                  String.format("refinement previously defined at %s:%s",
                      refinedCandidate.getFileName(), refinedCandidate.getStartLine()),
                  refinedDecl.getFileName(), refinedDecl.getStartLine());
            }
            outerIter.remove();
          }
        }
        if (refinedDecl != null) {
          if (!refineWith(decl, refinedDecl)) {
            iter.remove();
          }
          list.add(refinedDecl);
        }
      }
      classBodyDecls.addAll(list);
    }
    for (ClassBodyObject decl : refinedClassBodyDecls) {
      refineError("method", decl.getFileName(), decl.getStartLine());
    }
  }

  private void TypeDecl.replaceWith(ClassBodyObject o) {
    o.replaceAspect = null;

    org.jastadd.jrag.AST.SimpleNode node = o.node;
    // The first two children contain the extra signature in the refine to declaration.
    node.firstToken =
        ((org.jastadd.jrag.AST.SimpleNode) node.jjtGetChild(1)).lastToken.next.next.next;
    node.jjtAddChild(node.jjtGetChild(2), 0);
    node.jjtAddChild(node.jjtGetChild(3), 1);
    node.jjtAddChild(node.jjtGetChild(4), 2);
    // Clear remaining children.
    for (int i = 3; i < node.jjtGetNumChildren(); i++) {
      node.jjtAddChild(null, i);
    }
  }

  /**
   * Compute the name of an aspect (refine) method declaration.
   */
  private static String TypeDecl.methodName(ClassBodyObject decl) {
    org.jastadd.jrag.AST.SimpleNode node = decl.node;
    for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
      if (node.jjtGetChild(i) instanceof org.jastadd.jrag.AST.ASTMethodDeclarator) {
        // The first child of a MethodDeclarator is the literal method name.
        return ((org.jastadd.jrag.AST.SimpleNode) node.jjtGetChild(i)).firstToken.image;
      }
    }
    return "<unknown refinement target method>";
  }

  /**
   * Modify the name of an aspect (refine) method declaration.
   */
  private static void TypeDecl.setMethodName(ClassBodyObject decl, String name) {
    org.jastadd.jrag.AST.SimpleNode node = decl.node;
    for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
      if (node.jjtGetChild(i) instanceof org.jastadd.jrag.AST.ASTMethodDeclarator) {
        // The first child of a MethodDeclarator is the literal method name.
        ((org.jastadd.jrag.AST.SimpleNode) node.jjtGetChild(i)).firstToken.image = name;
        return;
      }
    }
  }

  /**
   * Process a member declaration refinement (methods, constructors, fields).
   *
   * <p>The original member is renamed to refined_aspectname_name, and the
   * refinement is added into the host type.
   *
   * @param original the original member declaration that is being refined.
   * @param refinedDecl the refinement declaration.
   */
  public boolean TypeDecl.refineWith(ClassBodyObject original, ClassBodyObject refinedDecl) {
    org.jastadd.jrag.AST.SimpleNode refinement = refinedDecl.node;
    boolean keep = true;

    if (refinement instanceof org.jastadd.jrag.AST.ASTAspectConstructorDeclaration
        || refinement instanceof org.jastadd.jrag.AST.ASTAspectRefineConstructorDeclaration) {
      // The name of a constructor is the same as the type name.
      String methodName = name();

      // Add prefix "void refined_".
      org.jastadd.jrag.AST.Token t1 = ((org.jastadd.jrag.AST.SimpleNode) original.node.jjtGetChild(0)).firstToken;
      org.jastadd.jrag.AST.Token t2 = ((org.jastadd.jrag.AST.SimpleNode) original.node).firstToken;
      while (t2.next != t1) {
        t2 = t2.next;
      }
      t2.image = "void refined_" + original.aspectName() + "_" + name() + "_" + t2.image;

      // Find block node.
      org.jastadd.jrag.AST.SimpleNode parent = refinement;
      boolean first = true;
      keep = false;
      for (int index = 1; index < parent.jjtGetNumChildren(); index++) {
        org.jastadd.jrag.AST.SimpleNode child =
            (org.jastadd.jrag.AST.SimpleNode)parent.jjtGetChild(index);
        if (child instanceof org.jastadd.jrag.AST.ASTBlockStatement
            || child instanceof org.jastadd.jrag.AST.ASTExplicitConstructorInvocation) {
          refinement = child;
          // Replace "aspectName.typeName.methodName" in refinedDecl with
          // "refined_aspectName_methodName".
          StringBuffer buf = new StringBuffer();
          refinement.jjtAccept(new ClassBodyDeclUnparser(), buf);
          String s = buf.toString();

          String pattern = "\\brefined\\b";
          if (config().refineLegacy()) {
            buf = new StringBuffer();
            buf.append("(");
            buf.append(pattern);
            buf.append(")|(");
            buf.append("\\b");
            buf.append(original.legacyAspectName());
            buf.append("\\.[a-zA-Z0-9_$]+\\.");
            buf.append(methodName);
            buf.append("\\b)");
            pattern = buf.toString();
          }
          String newContents = String.format("refined_%s_%s_%s",
              original.aspectName(), name(), methodName);
          // TODO: update keep to false if no strings are replaced.

          Matcher matcher = Pattern.compile(pattern).matcher(s);
          if (matcher.find()) {
            s = matcher.replaceAll(newContents);
            keep = true;
          }

          if (first) {
            s = " {" + s;
            first = false;
          }
          if (index == (parent.jjtGetNumChildren() - 1)) {
            s = s + "\n}\n";
          }

          org.jastadd.jrag.AST.Token token = org.jastadd.jrag.AST.Token.newToken(0);
          token.image = s;

          ((org.jastadd.jrag.AST.SimpleNode)parent.jjtGetChild(index-1)).lastToken.next = token;
          token.next = token;
          refinement = new org.jastadd.jrag.AST.ASTBlock(0);
          parent.lastToken = token;
          refinement.firstToken = refinement.lastToken = token;
          parent.jjtAddChild(refinement, index);
          refinement.jjtSetParent(parent);
        }
      }

      parent = original.node;
      first = true;
      for (int index = 1; index < parent.jjtGetNumChildren(); index++) {
        org.jastadd.jrag.AST.SimpleNode child = (org.jastadd.jrag.AST.SimpleNode)parent.jjtGetChild(index);
        if (child instanceof org.jastadd.jrag.AST.ASTExplicitConstructorInvocation) {
          refinement = child;
          // Replace "aspectName.typeName.methodName" in refinedDecl with
          // "refined_aspectName_methodName".
          StringBuffer buf = new StringBuffer();
          refinement.jjtAccept(new ClassBodyDeclUnparser(), buf);
          String s = buf.toString();
          if (child instanceof org.jastadd.jrag.AST.ASTExplicitConstructorInvocation) {
            s = "";
          }
          if (first) {
            s = " {" + s;
            first = false;
          }

          org.jastadd.jrag.AST.Token token = org.jastadd.jrag.AST.Token.newToken(0);
          token.image = s;

          ((org.jastadd.jrag.AST.SimpleNode)parent.jjtGetChild(index-1)).lastToken.next = token;
          token.next = refinement.lastToken.next;
          refinement = new org.jastadd.jrag.AST.ASTExplicitConstructorInvocation(0);
          refinement.firstToken = refinement.lastToken = token;
          parent.jjtAddChild(refinement, index);
          refinement.jjtSetParent(parent);
        }
      }
    } else if (refinement instanceof org.jastadd.jrag.AST.ASTAspectMethodDeclaration
        || refinement instanceof org.jastadd.jrag.AST.ASTAspectRefineMethodDeclaration) {
      // Find the original method name.
      String idDecl = methodName(original);
      String methodName = idDecl.trim();

      // Add prefix refined_aspectName_.
      idDecl = idDecl.replaceAll(methodName,
          "refined_" + original.aspectName() + "_" + name() + "_" + methodName);
      setMethodName(original, idDecl);

      org.jastadd.jrag.AST.SimpleNode parent = refinement;
      int index = 2;
      while (index < refinement.jjtGetNumChildren()
          && !(refinement.jjtGetChild(index) instanceof org.jastadd.jrag.AST.ASTBlock)) {
        index++;
      }
      if (index >= refinement.jjtGetNumChildren()) {
        throw new Error("Could not find block node");
      }
      refinement = (org.jastadd.jrag.AST.SimpleNode) refinement.jjtGetChild(index);

      // Replace "aspectName.typeName.methodName" in refinedDecl with
      // "refined_aspectName_methodName".
      StringBuffer buf = new StringBuffer();
      refinement.jjtAccept(new ClassBodyDeclUnparser(), buf);
      String s = buf.toString();
      String pattern = "\\brefined\\b";
      if (config().refineLegacy()) {
        buf = new StringBuffer();
        buf.append("(");
        buf.append(pattern);
        buf.append(")|(");
        buf.append("\\b");
        buf.append(original.legacyAspectName());
        buf.append("\\.[a-zA-Z0-9_$]+\\.");
        buf.append(methodName);
        buf.append("\\b)");
        pattern = buf.toString();
      }
      String newContents = "refined_" + original.aspectName() + "_" + name() + "_" + methodName;
      // TODO: update keep to false if no strings are replaced.

      Matcher matcher = Pattern.compile(pattern).matcher(s);
      if (matcher.find()) {
        s = matcher.replaceAll(newContents);
      } else {
        keep = false;
      }

      org.jastadd.jrag.AST.Token token = org.jastadd.jrag.AST.Token.newToken(0);
      token.image = s;

      ((org.jastadd.jrag.AST.SimpleNode)parent.jjtGetChild(index-1)).lastToken.next = token;
      token.next = token;
      refinement = new org.jastadd.jrag.AST.ASTBlock(0);
      parent.lastToken = token;
      refinement.firstToken = refinement.lastToken = token;
      parent.jjtAddChild(refinement, index);
      refinement.jjtSetParent(parent);
    } else {
      throw new Error("Unexpected node type " + refinement.getClass().getName());
    }

    return keep;
  }

  public Collection<ASTCompilationUnit> Grammar.compilationUnits =
      new LinkedList<ASTCompilationUnit>();

  public org.jastadd.jrag.AST.SimpleNode AttrEq.rhs;

  public void AttrEq.setRHS(org.jastadd.jrag.AST.SimpleNode node) {
    rhs = node;
  }

  public org.jastadd.jrag.AST.SimpleNode AttrEq.getRHS() {
    return rhs;
  }

  syn String AttrEq.parametersDecl() {
    StringBuffer s = new StringBuffer();
    for (int i = 0; i < getNumParameter(); i++) {
      Parameter p = getParameter(i);
      s.append(p.getType() + " " + p.getName());
      if (i < getNumParameter() - 1) {
        s.append(", ");
      }
    }
    return s.toString();
  }

  syn String AttrEq.parameters() {
    StringBuffer s = new StringBuffer();
    for (int i = 0; i < getNumParameter(); i++) {
      Parameter p = getParameter(i);
      s.append(p.getName());
      if (i < getNumParameter() - 1) {
        s.append(", ");
      }
    }
    return s.toString();
  }

  syn String AttrDecl.parametersDecl() {
    StringBuffer s = new StringBuffer();
    for (int i = 0; i < getNumParameter(); i++) {
      Parameter p = getParameter(i);
      s.append(p.getType() + " " + p.getName());
      if (i < getNumParameter() - 1) {
        s.append(", ");
      }
    }
    return s.toString();
  }

  syn String AttrDecl.parameters() {
    StringBuffer s = new StringBuffer();
    for (int i = 0; i < getNumParameter(); i++) {
      Parameter p = getParameter(i);
      s.append(p.getName());
      if (i < getNumParameter() - 1) {
        s.append(", ");
      }
    }
    return s.toString();
  }

  public org.jastadd.jrag.AST.SimpleNode Rewrite.condition;

  public org.jastadd.jrag.AST.SimpleNode Rewrite.getCondition() {
    return condition;
  }

  public void Rewrite.setCondition(org.jastadd.jrag.AST.SimpleNode c) {
    condition = c;
  }

  public org.jastadd.jrag.AST.SimpleNode Rewrite.result;

  public org.jastadd.jrag.AST.SimpleNode Rewrite.getResult() {
    return result;
  }

  public void Rewrite.setResult(org.jastadd.jrag.AST.SimpleNode r) {
    result = r;
  }

  public String Rewrite.returnType;

  public String Rewrite.getReturnType() {
    return returnType;
  }

  public void Rewrite.setReturnType(String type) {
    returnType = type;
  }
}
