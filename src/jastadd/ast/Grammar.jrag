/* Copyright (c) 2005-2015, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import java.util.Collection;
import java.util.LinkedList;

/**
 * Helper attributes for the abstract grammar.
 */
aspect Grammar {

  /** The list of interfaces this type implements. */
  public LinkedList TypeDecl.implementsList = new LinkedList();

  public boolean ASTDecl.implementsInterface(String name) { // DRAGONS
    for (Iterator iter = implementsList.iterator(); iter.hasNext(); ) {
      org.jastadd.jrag.AST.SimpleNode n = (org.jastadd.jrag.AST.SimpleNode) iter.next();
      StringBuffer s = new StringBuffer();
      n.jjtAccept(new Unparser(), s);
      String i = s.toString();
      int index = i.indexOf(name);
      if (index == -1) {
        continue;
      }
      if (index > 0 && Character.isJavaIdentifierPart(i.charAt(index-1))) {
        continue;
      }
      if (index + name.length() < i.length()
          && Character.isJavaIdentifierPart(i.charAt(index + name.length()))) {
        continue;
      }
      return true;
    }
    return false;
  }

  public void Grammar.addInterface(org.jastadd.jrag.AST.SimpleNode nameList,
      String className, String fileName) {
    if (nameList == null) {
      System.err.println("Panic");
    } else {
      TypeDecl c = lookup(className);
      if (c != null) {
        c.implementsList.add(nameList);
      } else {
        int line = nameList.firstToken.beginLine;
        error("can not add interface to unknown class " + className, fileName, line);
      }
    }
  }

  public void Grammar.extendInterface(org.jastadd.jrag.AST.SimpleNode nameList, String className,
      String fileName) {
    if (nameList == null) {
      System.err.println("Panic");
    } else {
      TypeDecl c = lookup(className);
      if (c instanceof InterfaceDecl) {
        c.implementsList.add(nameList);
      } else if (c != null) {
        int line = nameList.firstToken.beginLine;
        error(className + " is not an interface and can therefore not be extended", fileName, line);
      } else {
        int line = nameList.firstToken.beginLine;
        error("can not add interface to unknown interface " + className, fileName, line);
      }
    }
  }

  /**
   * @return a collection of the interfaces this type implements.
   */
  syn Collection<InterfaceDecl> TypeDecl.implementedInterfaces() {
    LinkedList<InterfaceDecl> list = new LinkedList<InterfaceDecl>();
    for (Iterator iter = implementsList.iterator(); iter.hasNext(); ) {
      String typename = Unparser.unparse((org.jastadd.jrag.AST.SimpleNode) iter.next());
      int index = typename.indexOf('<');
      if (index != -1) {
        typename = typename.substring(0, index);
      }
      TypeDecl type = grammar().lookup(typename);
      if (type instanceof InterfaceDecl) {
        list.add((InterfaceDecl) type);
      }
    }
    return list;
  }

  /**
   * Add a member to this type declaration.
   */
  protected void TypeDecl.addClassDeclaration(String declaration, String sourceFile,
      int sourceLine) {
    org.jastadd.jrag.AST.SimpleNode n = new org.jastadd.jrag.AST.ASTBlock(0);
    n.firstToken = n.lastToken = org.jastadd.jrag.AST.Token.newToken(0);
    n.firstToken.image = declaration;
    classBodyDecls.add(new ClassBodyObject(n, sourceFile, sourceLine, "<NoAspect>"));
  }
}
