/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;

import java.io.*;
import java.util.*;
import java.util.regex.*;

aspect JaddCodeGen {

  /**
   * Build the default AST node types (ASTNode, List, Opt)
   * and insert them into the grammar.
   */
  public void Grammar.genDefaultNodeTypes() {
    ASTDecl cl;
    IdDecl name;

    // Add ASTNode
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(grammar().astNodeType);
    cl.setIdDecl(name);
    cl.setFileName("");
    addTypeDecl(cl);

    // Add List
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(grammar().listType);
    cl.setIdDecl(name);
    cl.setFileName("");
    addTypeDecl(cl);

    // Add Opt
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(grammar().optType);
    cl.setIdDecl(name);
    cl.setFileName("");
    addTypeDecl(cl);
  }

  syn int ASTDecl.numNonNTAComponents() {
    int num = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        num++;
      }
    }
    return num;
  }

  /**
   * Number of children, including NTAs but excluding tokens
   */
  syn int ASTDecl.childCount() {
    int i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

  /**
   * Number of children, excluding NTAs and tokens
   */
  syn int ASTDecl.numRegularChildren() {
    int i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA() && !(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

  /**
   * Default constructor: creates list and opt nodes for
   * all list and opt children. Initializes NTAs.
   */
  public void ASTDecl.emitDefaultConstructor(PrintWriter out) {

    TemplateContext tt = templateContext();

    String finalInit = "";
    if(grammar().rewriteEnabled && isRootNode()) {
      if(grammar().stagedRewrites) {
        finalInit = "is$Final(state().rewritePhase);";
      } else {
        finalInit = "is$Final(true);";
      }
    }

    tt.bind("FinalInit", finalInit);

    tt.expand("ASTDecl.emitDefaultConstructor", out);
  }

  /**
   * Emits the (nta) child initialization method
   */
  public void ASTDecl.emitChildInitMethod(PrintWriter out) {
    TemplateContext tt = templateContext();

    String initChildArray = "";
    if (childCount() > 0) {
      initChildArray = "children = new " + grammar().astNodeType + "[" + childCount() + "];";
      initChildArray += genIncrementalInitChildHandlers();
    }

    tt.bind("InitChildArray", initChildArray);

    StringBuffer childInit = new StringBuffer();
    childInit.append(tt.expand("State.incHookConstructionStart"));
    int i = 0;
    for (Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(c instanceof ListComponents) {
        childInit.append("setChild(new " + grammar().listType + "(), " + i + ");\n");
        i++;
      } else if(c instanceof OptionalComponent) {
        childInit.append("setChild(new " + grammar().optType + "(), " + i + ");\n");
        i++;
      } else if(c instanceof AggregateComponents) {
        i++;
      }
    }
    childInit.append(tt.expand("State.incHookConstructionEnd"));

    tt.bind("ChildInit", childInit.toString());
    tt.expand("ASTDecl.emitChildInitMethod", out);
  }

  /**
   * Emits the constructor body for tree building constructors
   */
  public void ASTDecl.emitBuildingConstructorBody(PrintWriter out) {
    if(grammar().block) out.print(grammar().blockBegin);

    TemplateContext tt = templateContext();
    out.print(tt.expand("State.incHookConstructionStart"));

    int param = 0;
    int childIndex = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        if(c instanceof TokenComponent) {
          TokenComponent t = (TokenComponent)c;
          String tokenId = t.getTokenId().getID();
          out.println(grammar().ind(2) + "set" + tokenId + "(p" + param + ");");
        }
        else {
          out.println(grammar().ind(2) + "setChild(p" + param + ", " + childIndex + ");");
          childIndex++;
        }
        param += 1;
      } else {
        if(c instanceof ListComponents ||
          c instanceof OptionalComponent ||
          c instanceof AggregateComponents) {
        childIndex++;
        }
      }
    }
    if(grammar().rewriteEnabled && isRootNode()) {
      if(grammar().stagedRewrites)
        out.println(grammar().ind(2) + "is$Final(java.lang.Integer.MAX_VALUE);");
      else
        out.println(grammar().ind(2) + "is$Final(true);");
    }

    out.print(tt.expand("State.incHookConstructionEnd"));

    if(grammar().block) out.print(grammar().blockEnd);
  }

  /**
   * Constructor to build trees bottom up
   */
  public void ASTDecl.emitBuildingConstructor(PrintWriter out) {
    // we only build constructors if there are components
    if(!getComponents().hasNext())
      return;
    out.print(grammar().ind + "public " + name() + "." + name() + "(");
    int i = 0; // parameter index
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        if(i != 0) out.print(", ");
        out.print(c.constrParmType() + " p" + i);
        i++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(grammar().ind + "}");
  }

  public void ASTDecl.emitSymbolConstructor(PrintWriter out) {
    // we only build constructors if there are components ...
    if(!getComponents().hasNext())
      return;
    // ... and one of these components is a string token component
    boolean stringArg = false;
    for(Iterator iter = getComponents(); !stringArg && iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA() && c instanceof TokenComponent && c.constrParmType().equals("String") || c.constrParmType().equals("java.lang.String"))
        stringArg = true;
    }
    if(!stringArg) return;

    out.print(grammar().ind + "public " + name() + "." + name() + "(");
    int i = 0; // parameter index
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        if(i != 0) out.print(", ");
        if(c instanceof TokenComponent && c.constrParmType().equals("String") || c.constrParmType().equals("java.lang.String"))
          out.print("beaver.Symbol p" + i);
        else
          out.print(c.constrParmType() + " p" + i);
        i++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(grammar().ind + "}");
  }

  public void Grammar.genReset(PrintWriter out) {
    templateContext().expand("ASTNode$State.reset", out);
  }

  /**
   * Generate ASTNode$State aspect declarations.
   *
   * @param out Aspect output stream
   */
  public void Grammar.emitASTNode$State(PrintWriter out) {
    templateContext().expand("ASTNode$State", out);
  }

  /**
   * Generate Tracer class.
   *
   * @param out Aspect output stream
   */
  public void Grammar.emitTracer(PrintWriter out) {
    templateContext().expand("Tracer", out);
  }


  /**
   * String for calculating the initial child array size.
   * List nodes use the minimum list size as the initial child
   * array size.
   */
  syn String ASTDecl.initialChildArraySize() {
    return "(i+1>" + grammar().minListSize + " || !(this instanceof " + grammar().listType + "))?i+1:" + grammar().minListSize;
  }

  /**
   * Checks that ASTNode.state can be evaluated.
   */
  syn String ASTDecl.debugASTNodeState() {
    if(grammar().debugMode) {
      // Debug mode should (probably) not be used here to ensure safe use of the state field
      //  Jesper 2013-01-10

      // Check if a new state object is created for a node that is not a root node
      StringBuilder buf = new StringBuilder();
      buf.append("if(");
      boolean first = true;
      for (Iterator iter = env().roots().iterator(); iter.hasNext(); ) {
        ASTDecl root = (ASTDecl)iter.next();
        if (!first) {
          buf.append(" && ");
        }
        first = false;
        buf.append("!(this instanceof " + root.name() + ")");
      }
      buf.append(")\n");
      buf.append(grammar().ind + "throw new RuntimeException(\"Trying to evaluate state in a node which is not attached to the main tree\");");
      return buf.toString();
    } else {
      return "";
    }
  }

  /**
   * Generate implicit aspect declarations for the ASTNode type.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitASTNodeDecls(PrintWriter out) {
    TemplateContext tt = templateContext();

    /* emit general declarations */
    tt.expand("ASTNode.declarations", out);

    /* emit getChild */
    tt.bind("ReturnTypeCast", grammar().java5 ? "(T) " : "");
    tt.bind("PositiveRewriteLimit", grammar().rewriteLimit > 0);
    tt.expand("ASTNode.getChild", out);

    /* emit addChild */
    tt.expand("ASTNode.addChild", out);

    /* emit getChildNoTransform */
    tt.expand("ASTNode.getChildNoTransform", out);

    /* emit numChildren */
    tt.expand("ASTNode.numChildren", out);

    /* emit setChild */
    tt.expand("ASTNode.setChild", out);

    /* emit insertChild */
    tt.expand("ASTNode.insertChild", out);

    /* emit removeChild */
    tt.expand("ASTNode.removeChild", out);

    /* emit setParent & getParent */
    tt.expand("ASTNode.getParent", out);
    tt.expand("ASTNode.setParent", out);

    /* emit debug declarations */
    tt.expand("ASTNode.debugDecls", out);

    /* emit declarations for line and column */
    if (grammar().lineColumnNumbers) {
      tt.expand("ASTNode.lineColumnNumbers", out);
    }
  }

  /**
   * @return <code>true</code> if the list$touched field is needed for this
   * ASTDecl.
   */
  syn boolean ASTDecl.needsListTouched() =
    !(grammar().incremental || grammar().fullFlush);

  /**
   * Generate implicit aspect declarations for the List type.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitListDecls(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("List.implicitAspectDecls", out);
  }

  /**
   * Generate implicit aspect declarations for regular
   * (non-ASTNode, non-List, non-Opt) node types.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitRegularNodeDecls(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("RegularNodeType.getNumChild", out);
    if (grammar().debugMode && isRootNode()) {
      tt.expand("RegularNodeType.debugNodeAttachmentIsRoot", out);
    }
  }

  syn boolean ASTDecl.isASTNodeDecl() = name().equals(grammar().astNodeType);
  syn boolean ASTDecl.isOptDecl() = name().equals(grammar().optType);
  syn boolean ASTDecl.isListDecl() = name().equals(grammar().listType);

  /**
   * Check the node structure of a regular (non-Opt, non-List)
   * JJTree node.
   */
  syn String ASTDecl.checkRegularNodeStructure() {
    StringBuilder buf = new StringBuilder();
    int j = 0;
    for (Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      buf.append(c.checkComponentStructure(j));
      if (!(c instanceof TokenComponent)) {
        j++;
      }
    }
    return buf.toString();
  }

  /**
   * Check the structure of a single JJTree component.
   */
  syn String Components.checkComponentStructure(int childIndex) = "";

  eq ListComponents.checkComponentStructure(int childIndex) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + childIndex);
    tt.bind("HostClassName", hostClass().name());
    return tt.expand("ListComponents.checkComponentStructure");
  }

  eq OptionalComponent.checkComponentStructure(int childIndex) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + childIndex);
    tt.bind("HostClassName", hostClass().name());
    return tt.expand("OptionalComponent.checkComponentStructure");
  }

  eq AggregateComponents.checkComponentStructure(int childIndex) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + childIndex);
    tt.bind("HostClassName", hostClass().name());
    return tt.expand("AggregateComponents.checkComponentStructure");
  }

  syn String ASTDecl.jjtGenPrintChildren() {
    StringBuilder buf = new StringBuilder();
    for (Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if (c instanceof TokenComponent) {
        TokenComponent t = (TokenComponent)c;
        String id = t.getTokenId().getID();
        buf.append("out.print(\"\\\"\" + get" + id + "() + \"\\\"\");\n");
      }
    }
    return buf.toString();
  }

  public void ASTDecl.emitConstructor(PrintWriter out) {

    emitDefaultConstructor(out);

    emitChildInitMethod(out);

    if(numNonNTAComponents() != 0) {
      emitBuildingConstructor(out);
      if(grammar().beaver)
        emitSymbolConstructor(out);
    }

    if(isOptDecl()) {
      TemplateContext tt = templateContext();
      tt.expand("OptDecl.constructor", out);
    }

    if(isListDecl()) {
      TemplateContext tt = templateContext();
      tt.expand("ListDecl.constructor", out);
    }
  }

  /**
   * Emit aspect declaration for the mayHaveRewrite method
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitMayHaveRewrite(PrintWriter out) {
    String ind = grammar().ind;
    String ind2 = grammar().ind(2);
    out.println(ind + "/**");
    out.println(ind + " * @apilevel internal");
    out.println(ind + " */");
    out.println(ind + "public boolean " + name() + ".mayHaveRewrite() {");
    if(name().equals(grammar().listType)) {

      // Avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) {
        out.println(ind2 + "return true;");  // old code
      } else {
        out.println(ind2 + "return false;");
      }

    } else if(!hasRewrites()) {
      out.println(ind2 + "return false;");
    } else if(!grammar().stagedRewrites || rewriteWithNoPhaseCondition()) {
      out.println(ind2 + "return true;");
    } else {
      for(Iterator iter = rewritePhaseConditions().iterator(); iter.hasNext(); ) {
        String condition = (String)iter.next();
        out.println(ind2 + "if(" + condition + ") return true;");
      }
      out.println(ind2 + "return false;");
    }
    out.println(ind + "}");
  }

  /**
   * Generate aspect code for implicit methods and fields in the default node
   * types ASTNode, List, Opt.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitDeclarations(PrintWriter out) {
    String s;

    emitConstructor(out);

    if (grammar().jjtree) {
      TemplateContext tt = templateContext();

      // emit the dumpTree method
      tt.expand("JJTree.dumpTree", out);

      // emit the jjtAccept method
      tt.expand("JJTree.jjtAccept", out);

      // emit the jjtAddChild method
      tt.expand("JJTree.jjtAddChild", out);

      // emit method to check the structure of a JJTree node
      tt.expand("JJTree.checkChild", out);
    }

    // Generate code common for all nodes by adding them to ASTNode
    if (isASTNodeDecl()) {
      emitImplicitASTNodeDecls(out);
      env().genRewriteOrderChecks(out);
      env().genReset(out);
      if (grammar().java5) {
        templateContext().expand("ASTNode.iterator", out);
      }
    } else if (isListDecl()) {
      emitImplicitListDecls(out);
    } else if (isOptDecl()) {
      // do not override getNumChild with regular node implementation
    } else {
      emitImplicitRegularNodeDecls(out);
    }

    if (grammar().rewriteEnabled) {
      emitMayHaveRewrite(out);
    }

    emitFlushCache(out);

    genIncremental(out);
  }

  syn boolean ASTDecl.rewriteWithNoPhaseCondition() {
    for(int i = 0; i < getNumRewrite(); i++) {
      if(getRewrite(i).getCondition() == null)
        return true;
      String condition = Unparser.unparse(getRewrite(i).getCondition());
      if(condition.indexOf("inRewritePhase") == -1 && condition.indexOf("inExactRewritePhase") == -1)
        return true;
    }
    return superClass() instanceof ASTDecl && ((ASTDecl)superClass()).rewriteWithNoPhaseCondition();
  }

  syn java.util.Set ASTDecl.rewritePhaseConditions() {
    java.util.Set set = new java.util.LinkedHashSet();
    Pattern p = Pattern.compile("inRewritePhase\\([\\w\\.]*\\)|inExactRewritePhase\\([\\w\\.]*\\)");
    for(int i = 0; i < getNumRewrite(); i++) {
      if(getRewrite(i).getCondition() != null) {
        String condition = Unparser.unparse(getRewrite(i).getCondition());
        Matcher m = p.matcher(condition);
        while(m.find()) {
          String match = m.group();
          set.add(match);
        }
      }
    }
    if(superClass() instanceof ASTDecl)
      set.addAll(((ASTDecl)superClass()).rewritePhaseConditions());
    return set;
  }

  public abstract void Components.jaddGen(int index, boolean publicModifier, ASTDecl decl);

  public void ListComponents.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("ListType", grammar().java5 ? grammar().listType + "<" + getId().type() + ">" : grammar().listType);
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("ListComponent"));
  }

  public void OptionalComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("OptType", grammar().java5 ? grammar().optType + "<" + getId().type() + ">" : grammar().optType);
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("OptionalComponent"));
  }

  private boolean TokenComponent.called = false;

  public void TokenComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("Id", getTokenId().getID());
    tt.bind("Type", getTokenId().getTYPE());
    tt.bind("TypeInSignature", ASTNode.convTypeNameToSignature(getTokenId().getTYPE()));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    boolean isStringToken = getTokenId().getTYPE().equals("String") || getTokenId().getTYPE().equals("java.lang.String");
    boolean isRedefined = decl.redefinesTokenComponent(this);
    tt.bind("IsStringToken", isStringToken);
    tt.bind("IsRedefined", isRedefined);

    parse(tt.expand("TokenComponent"));
  }

  public void AggregateComponents.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("AggregateComponent"));
  }

  protected void Components.parse(String s) {
    org.jastadd.jrag.AST.JragParser jp = new org.jastadd.jrag.AST.JragParser(new java.io.StringReader(s));
    jp.root = hostClass().env();

    // The file name is not meaningful, as the component is completely generated
    // from a node type specification
    jp.setFileName("");

    // EMMA_2011-09-08: Adding this to give .ast generated methods an enclosing
    // aspect "Ast" which allows for refinement of these methods. For example,
    // "getA" generated from "B ::= A" can be refined using the "Ast" aspect.
    //jp.enclosingAspect = "Ast";

    try {
      while(true) {
        jp.AspectBodyDeclaration();
      }
    } catch (Exception e) {
      // TODO: handle aspect parsing exception
      //System.err.println("Aspect parsing error: " + e.getMessage());
      //e.printStackTrace(System.err);
    }
  }
}
