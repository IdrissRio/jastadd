/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import ast.AST.*;

import java.io.*;
import java.util.*;
import java.util.regex.*;

aspect JaddCodeGen {
  public void Grammar.abstractAncestors() {
    ASTDecl cl;
    IdDecl name;
    
    // Add ASTNode
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID("ASTNode");
    cl.setIdDecl(name);
    cl.setFileName("");
    addTypeDecl(cl);
    
    // Add List
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID("List");
    cl.setIdDecl(name);
    cl.setFileName("");
    addTypeDecl(cl);

    // Add Opt
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID("Opt");
    cl.setIdDecl(name);
    cl.setFileName("");
    addTypeDecl(cl);
  }

  syn int ASTDecl.numNonNTAComponents() {
    int num = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        num++;
      }
    }
    return num;
  }

  /**
   * Number of children, including NTAs but excluding tokens
   */
  syn int ASTDecl.childCount() {
    int i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

  /**
   * Number of children, excluding NTAs and tokens
   */
  syn int ASTDecl.numRegularChildren() {
    int i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA() && !(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

  /**
   * Default constructor: creates list and opt nodes for
   * all list and opt children. Initializes NTAs.
   */
  public void ASTDecl.emitDefaultConstructor(PrintWriter out) {

    TemplateContext tt = templateContext();

    String finalInit = "";
    if(grammar().rewriteEnabled && isRootNode()) {
      if(grammar().stagedRewrites)
        finalInit = "is$Final(state().rewritePhase);";
      else
        finalInit = "is$Final(true);";
    }

    tt.bind("FinalInit", finalInit);

    if (isASTNode()) {
      tt.bind("InitChildren", "init$Children();");
    } else {
      tt.bind("InitChildren", "");
    }

    if (grammar().jjtree) {
      tt.bind("ParserName", grammar().parserName);
      tt.expand("ast.constructor.default:jjtree", out);
    } else {
      tt.expand("ast.constructor.default", out);
    }
  }

  /**
   * Emits the (nta) child initialization method
   */
  public void ASTDecl.emitChildInitMethod(PrintWriter out) {
    TemplateContext tt = templateContext();

    String initChildArray = "";
    if (childCount() > 0) {
      initChildArray = "children = new ASTNode[" + childCount() + "];";
      initChildArray += genIncrementalInitChildHandlers();
    }
    
    tt.bind("InitChildArray", initChildArray);

    StringBuffer childInit = new StringBuffer();
    childInit.append(genIncrementalConstructorStartConstruction());
    int i = 0;
    for (Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(c instanceof ListComponents) {
        childInit.append("setChild(new List(), " + i + ");\n");
        i++;
      } else if(c instanceof OptionalComponent) {
        childInit.append("setChild(new Opt(), " + i + ");\n");
        i++;
      } else if(c instanceof AggregateComponents) {
        i++;
      }
    }
    childInit.append(genIncrementalConstructorEndConstruction());

    tt.bind("ChildInit", childInit.toString());
    tt.expand("initChildren", out);
  }

  /**
   * Emits the constructor body for tree building constructors
   */
  public void ASTDecl.emitBuildingConstructorBody(PrintWriter out) {
    if(grammar().block) out.print(grammar().blockBegin);
      
    out.print(genIncrementalConstructorStartConstruction());
    
    int param = 0;
    int childIndex = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        if(c instanceof TokenComponent) {
          TokenComponent t = (TokenComponent)c;
          String tokenId = t.getTokenId().getID();
          out.println(ind(2) + "set" + tokenId + "(p" + param + ");");
        }
        else {
          out.println(ind(2) + "setChild(p" + param + ", " + childIndex + ");");
          childIndex++;
        }
        param += 1;
      } else {
        if(c instanceof ListComponents ||
          c instanceof OptionalComponent ||
          c instanceof AggregateComponents) {
        childIndex++;
        }
      }
    }
    if(grammar().rewriteEnabled && isRootNode()) {
      if(grammar().stagedRewrites)
        out.println(ind(2) + "is$Final(java.lang.Integer.MAX_VALUE);");
      else
        out.println(ind(2) + "is$Final(true);");
    }

    out.print(genIncrementalConstructorEndConstruction());

    if(grammar().block) out.print(grammar().blockEnd);
  }

  /**
   * Constructor to build trees bottom up
   */
  public void ASTDecl.emitBuildingConstructor(PrintWriter out) {
    // we only build constructors if there are components
    if(!getComponents().hasNext())
      return;
    out.print(ind + "public " + name() + "." + name() + "(");
    int i = 0; // parameter index
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        if(i != 0) out.print(", ");
        out.print(c.constrParmType() + " p" + i);
        i++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(ind + "}");
  }

  public void ASTDecl.emitSymbolConstructor(PrintWriter out) {
    // we only build constructors if there are components ...
    if(!getComponents().hasNext())
      return;
    // ... and one of these components is a string token component
    boolean stringArg = false;
    for(Iterator iter = getComponents(); !stringArg && iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA() && c instanceof TokenComponent && c.constrParmType().equals("String") || c.constrParmType().equals("java.lang.String"))
        stringArg = true;
    }
    if(!stringArg) return;

    out.print(ind + "public " + name() + "." + name() + "(");
    int i = 0; // parameter index
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        if(i != 0) out.print(", ");
        if(c instanceof TokenComponent && c.constrParmType().equals("String") || c.constrParmType().equals("java.lang.String"))
          out.print("beaver.Symbol p" + i);
        else
          out.print(c.constrParmType() + " p" + i);
        i++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(ind + "}");
  }

  public void Grammar.genReset(PrintWriter out) {
    templateContext().expand("ASTNode$State.reset", out);
  }

  public void Grammar.jjtGenASTNode$State(PrintWriter out) {
    templateContext().expand("ASTNode$State", out);
  }

  /**
   * String for calculating the initial child array size.
   * List nodes use the minimum list size as the initial child
   * array size.
   */
  syn String ASTDecl.initialChildArraySize() {
    return "(i+1>" + grammar().minListSize + " || !(this instanceof List))?i+1:" + grammar().minListSize;
  }

  /**
   * Print the getChild method to the output stream.
   */
  public void ASTDecl.emitGetChild(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.bind("ReturnTypeCast", grammar().java5 ? "(T) " : "");
    tt.bind("PositiveRewriteLimit", grammar().rewriteLimit > 0);
    tt.expand("ASTNode.getChild", out);
  }

  public void ASTDecl.emitAddChild(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.addChild", out);
  }

  public void ASTDecl.emitGetChildNoTransform(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.bind("IsRegionRoot", isRegionRoot());
    tt.expand("ASTNode.getChildNoTransform", out);
  }

  public void ASTDecl.emitNumChildren(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.numChildren", out);
  }

  public void ASTDecl.emitSetChild(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.setChild", out);
  }

  public void ASTDecl.emitInsertChild(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.insertChild", out);
  }

  public void ASTDecl.emitRemoveChild(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.removeChild", out);
  }

  public void ASTDecl.emitSetGetParent(PrintWriter out) {
    TemplateContext tt = templateContext();  
    tt.bind("IsRegionRoot", isRegionRoot());  
    tt.expand("ASTNode.getParent", out);
    tt.expand("ASTNode.setParent", out);
  }

  public void ASTDecl.jjtGenASTNode(PrintWriter stream) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.declarations", stream);

    if(grammar().noStatic) {
      stream.println(ind + "/**");
      stream.println(ind + " * @apilevel internal");
      stream.println(ind + " */");
      stream.println(ind + "protected ASTNode$State ASTNode.state = null;");
      stream.println(ind + "/**");
      stream.println(ind + " * @apilevel internal");
      stream.println(ind + " */");
      stream.println(ind + "public final ASTNode$State ASTNode.state() {");
      stream.println(ind(2) + "if(state == null) {");
      stream.println(ind(3) + "if(parent == null) {");
      stream.println(ind(4) + "state = new ASTNode$State();");
      if(grammar().debugMode) {
        // Debug mode should (probably) not be used here to ensure safe use of the state field
        //  Jesper 2013-01-10

        // Check if a new state object is created for a node that is not a root node
        StringBuffer s = new StringBuffer();
        s.append("if(");
        boolean first = true;
        for(Iterator iter = env().roots().iterator(); iter.hasNext(); ) {
          ASTDecl root = (ASTDecl)iter.next();
          if(!first)
            s.append(" && ");
          first = false;
          s.append("!(this instanceof " + root.name() + ")");
        }
        s.append(") throw new RuntimeException(\"Trying to evaluate state in a node which is not attached to the main tree\");");
        stream.println(s.toString());
      }
      stream.println(ind(3) + "}");
      stream.println(ind(3) + "else {");
      stream.println(ind(4) + "state = parent.state();");
      stream.println(ind(3) + "}");
      stream.println(ind(2) + "}");
      stream.println(ind(2) + "return state;");
      stream.println(ind + "}");
    }

    emitGetChild(stream);

    emitAddChild(stream);

    emitGetChildNoTransform(stream);

    emitNumChildren(stream);

    emitSetChild(stream);

    emitInsertChild(stream);

    emitRemoveChild(stream);

    emitSetGetParent(stream);

    tt.expand("ASTNode.debugDecls", stream);
  }

  public void ASTDecl.genCheckTreeStructure(PrintWriter stream) {
    stream.println(ind + "public void " + name() + ".jjtAddChild(Node n, int i) {");
    stream.println(ind(2) + "checkChild(n, i);");
    if(name().equals("ASTNode")) {
      stream.println(ind(2) + "if(i >= numChildren) numChildren = i+1;");
    }
    stream.println(ind(2) + "super.jjtAddChild(n, i);");
    stream.println("}\n");
    if(name().equals("Opt")) {
      stream.println(ind + "public void Opt.checkChild(Node n, int i) {");
      stream.println(ind(2) + "if(i > 0) throw new Error(\"Optional nodes can only have one child\");");
      stream.println(ind(2) + "if(!(n instanceof ASTNode)) throw new Error(\"Node type must be an instance of ASTNode\");");
      stream.println(ind + "}\n");
    }
    else if(name().equals("List")) {
      stream.println(ind + "public void List.checkChild(Node n, int i) {");
      stream.println(ind(2) + "if(!(n instanceof ASTNode)) throw new Error(\"The node type of child \" + i + \" must be an instance of ASTNode\");");
      stream.println(ind + "}\n");
    }
    else {
      int j = 0;
      stream.println(ind + "public void " + name() + ".checkChild(Node n, int i) {");
      for(Iterator iter = getComponents(); iter.hasNext(); ) {
        Components c = (Components)iter.next();
        c.genCheckTreeStructure(stream, j);
        if(!(c instanceof TokenComponent)) {
          j++;
        }
      }
      stream.println(ind + "}\n");
    }
  }

  public void Components.genCheckTreeStructure(PrintWriter stream, int j) {
  }

  public void ListComponents.genCheckTreeStructure(PrintWriter stream, int j) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + j);
    tt.bind("HostClassName", hostClass().name());
    tt.expand("ListComponents.genCheckTreeStructure", stream);
  }

  public void OptionalComponent.genCheckTreeStructure(PrintWriter stream, int j) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + j);
    tt.bind("HostClassName", hostClass().name());
    tt.expand("OptionalComponent.genCheckTreeStructure", stream);
  }

  public void AggregateComponents.genCheckTreeStructure(PrintWriter stream, int j) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + j);
    tt.bind("HostClassName", hostClass().name());
    tt.expand("AggregateComponents.genCheckTreeStructure", stream);
  }

  public void ASTDecl.jjtGenDumpTree(PrintWriter stream) {
    stream.println(ind + "public void " + name() + ".dumpTree(String indent, java.io.PrintStream pStream) {");
    stream.print(ind(2) + "pStream.println(indent + \"" + name() + "\"");
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(c instanceof TokenComponent) {
        TokenComponent t = (TokenComponent)c;
        String id = t.getTokenId().getID();
        stream.print("+ \"\\\"\" + get" + id + "() + \"\\\"\"");
      }
    }
    stream.println(");");
    stream.println(ind(2) + "String childIndent = indent + \"  \";");
    stream.println(ind(2) + "for(int i = 0; i < getNumChild(); i++)");
    stream.println(ind(3) +   "getChild(i).dumpTree(childIndent, pStream);");
    stream.println(ind    + "}");
  }

  public void ASTDecl.jjtGenVisitor(PrintWriter stream) {
    stream.println(ind + "public Object " + name() + ".jjtAccept(" + grammar().parserName + "Visitor visitor, Object data) {");
    stream.println(ind(2) + "return visitor.visit(this, data);");
    stream.println(ind + "}");
  }

  public void ASTDecl.jjtGenConstructor(PrintWriter out) {

    emitDefaultConstructor(out);

    emitChildInitMethod(out);

    if(numNonNTAComponents() != 0) {
      emitBuildingConstructor(out);
      if(grammar().beaver)
        emitSymbolConstructor(out);
    }

    if(name().equals("Opt")) {
      if(grammar().java5)
        out.println(ind + "public Opt.Opt(T opt) {");
      else
        out.println(ind + "public Opt.Opt(ASTNode opt) {");  
      out.println(ind(2) + genIncrementalConstructorStartConstruction());
      out.println(ind(2) + "setChild(opt, 0);");
      out.println(ind(2) + genIncrementalConstructorEndConstruction());
      out.println(ind + "}\n");
    }
  }

  public void ASTDecl.jjtGen(PrintWriter stream) {
    String s;

    jjtGenConstructor(stream);
    //emitCloneNode(stream);
    //emitCopyNode(stream);
    //emitFullCopy(stream);
    //emitFlushCache(stream);
    if(grammar().jjtree) {
      jjtGenDumpTree(stream);
      jjtGenVisitor(stream);
      try {
        genCheckTreeStructure(stream);
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    // Generate code common for all nodes by adding them to ASTNode
    if(name().equals("ASTNode")) {
      jjtGenASTNode(stream);
      env().genRewriteOrderChecks(stream);
      env().genReset(stream);
      if(grammar().java5) {
        templateContext().expand("ASTNode.iterator", stream);
      }
    }
    else if(name().equals("List")) {
      if(grammar().java5)
        stream.println(ind + "public List<T> List.add(T node) {");
      else
        stream.println(ind + "public List List.add(ASTNode node) {");
      if(grammar().block) stream.append(grammar().blockBegin);
      if(grammar().debugMode) {
        stream.println(ind(2) + "if(node instanceof List)");
        stream.println(ind(3) + "throw new RuntimeException(\"Lists can not have children of type List\");");
        stream.println(ind(2) + "if(node instanceof Opt)");
        stream.println(ind(3) + "throw new RuntimeException(\"Lists can not have children of type Opt\");");
      }
      stream.println(ind(2) + "addChild(node);");
      stream.println(ind(2) + "return this;");
      if(grammar().block) stream.append(grammar().blockEnd);
      stream.println(ind + "}\n");
      stream.println(ind + "public void List.insertChild(ASTNode node, int i) {");
      if(grammar().block) stream.append(grammar().blockBegin);
      
      // Avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) { 
        stream.println(ind(2) + "list$touched = true;");
      }
      
      stream.println(ind(2) + "super.insertChild(node, i);");
      if(grammar().block) stream.append(grammar().blockEnd);
      stream.println(ind + "}");
      if(grammar().java5)
        stream.println(ind + "public void List.addChild(T node) {");
      else
        stream.println(ind + "public void List.addChild(ASTNode node) {");
      if(grammar().block) stream.append(grammar().blockBegin);
      
      // Avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) { 
        stream.println(ind(2) + "list$touched = true;");
      }
      
      stream.println(ind(2) + "super.addChild(node);");
      if(grammar().block) stream.append(grammar().blockEnd);
      stream.println(ind + "}");
      stream.println(ind + "/**");
      stream.println(ind + " * @apilevel low-level");
      stream.println(ind + " */");
      stream.println(ind + "public void List.removeChild(int i) {");
      if(grammar().block) stream.append(grammar().blockBegin);
      
      // Avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) { 
        stream.println(ind(2) + "list$touched = true;");
      }
      
      stream.println(ind(2) + "super.removeChild(i);");
      if(grammar().block) stream.append(grammar().blockEnd);
      stream.println(ind + "}");
      stream.println(ind + "public int List.getNumChild() {");
      if(grammar().block) stream.append(grammar().blockBegin);
      
      // Avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) {
        stream.println(ind(2) + "if(list$touched) {");
        stream.println(ind(3) + "for(int i = 0; i < getNumChildNoTransform(); i++)");
        stream.println(ind(4) + "getChild(i);");
        stream.println(ind(4) + "list$touched = false;");
        stream.println(ind(3) + "}");
      } 
      
      stream.println(ind(3) + "return getNumChildNoTransform();");
      if(grammar().block) stream.append(grammar().blockEnd);
      stream.println(ind + "}");
      
      // Avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) { 
        stream.println(ind + "private boolean List.list$touched = true;");
      }
    }
    else if(name().equals("Opt")) {
      // do not override getNumChild with implementation below
    }
    else {
      TemplateContext tt = templateContext();
      if(grammar().jjtree) {
        stream.println(ind + "/**");
        stream.println(ind + " * @apilevel low-level");
        stream.println(ind + " */");
        stream.println(ind + "public int " + name() + ".getNumChild() {");
        stream.println(tt.expand("ASTNode.incHookNumChildren"));
        stream.println(ind(2) + "return " + numRegularChildren() + ";");
        stream.println(ind + "}");
      }
      else {
        stream.println(ind + "/**");
        stream.println(ind + " * @apilevel low-level");
        stream.println(ind + " */");
        stream.println(ind + "protected int " +name() + ".numChildren() {");
        stream.println(tt.expand("ASTNode.incHookNumChildren"));
        stream.println(ind(2) + "return " + numRegularChildren() + ";");
        stream.println(ind + "}");
      }
      if(grammar().debugMode && isRootNode()) {
        stream.println(ind + "/**");
        stream.println(ind + " * @apilevel internal");
        stream.println(ind + " */");
        stream.println(ind + "protected boolean " + name() + ".debugNodeAttachmentIsRoot() { return true; }");
      }
    }
    if(grammar().rewriteEnabled) {
      stream.println(ind + "/**");
      stream.println(ind + " * @apilevel internal");
      stream.println(ind + " */");
      stream.println(ind + "public boolean " + name() + ".mayHaveRewrite() {");
      if(name().equals("List")) {
        
        // Avoiding list touch rewrite
        if (!(grammar().incremental || grammar().fullFlush)) {
          stream.println(ind(2) + "return true;");  // old code
        } else {
          stream.println(ind(2) + "return false;");
        }
        
      } else if(!hasRewrites())
        stream.println(ind(2) + "return false;");
      else if(!grammar().stagedRewrites || rewriteWithNoPhaseCondition())
        stream.println(ind(2) + "return true;");
      else {
        for(Iterator iter = rewritePhaseConditions().iterator(); iter.hasNext(); ) {
          String condition = (String)iter.next();
          stream.println(ind(2) + "if(" + condition + ") return true;");
        }
        stream.println(ind(2) + "return false;");
      }
      stream.println(ind + "}");
    }

    genIncremental(stream);
  }

  syn boolean ASTDecl.rewriteWithNoPhaseCondition() {
    for(int i = 0; i < getNumRewrite(); i++) {
      if(getRewrite(i).getCondition() == null)
        return true;
      String condition = Unparser.unparse(getRewrite(i).getCondition());
      if(condition.indexOf("inRewritePhase") == -1 && condition.indexOf("inExactRewritePhase") == -1)
        return true;
    }
    return superClass() instanceof ASTDecl && ((ASTDecl)superClass()).rewriteWithNoPhaseCondition();
  }

  syn java.util.Set ASTDecl.rewritePhaseConditions() {
    java.util.Set set = new java.util.LinkedHashSet();
    Pattern p = Pattern.compile("inRewritePhase\\([\\w\\.]*\\)|inExactRewritePhase\\([\\w\\.]*\\)");
    for(int i = 0; i < getNumRewrite(); i++) {
      if(getRewrite(i).getCondition() != null) {
        String condition = Unparser.unparse(getRewrite(i).getCondition());
        Matcher m = p.matcher(condition);
        while(m.find()) {
          String match = m.group();
          set.add(match);
        }
      }
    }
    if(superClass() instanceof ASTDecl)
      set.addAll(((ASTDecl)superClass()).rewritePhaseConditions());
    return set;
  }

  public abstract void Components.jaddGen(int index, boolean publicModifier, ASTDecl decl);

  syn String ListComponents.annotations() = suppressWarnings();

  public void ListComponents.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("ListType", grammar().java5 ? "List<" + getId().type() + ">" : "List");
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("ListComponent"));
  }

  syn String OptionalComponent.annotations() = suppressWarnings();

  public void OptionalComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("OptType", grammar().java5 ? "Opt<" + getId().type() + ">" : "Opt");
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("OptionalComponent"));
  }

  syn String TokenComponent.annotations() = suppressWarnings();

  private boolean TokenComponent.called = false;

  public void TokenComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("Id", getTokenId().getID());
    tt.bind("Type", getTokenId().getTYPE());
    tt.bind("TypeInSignature", ASTNode.convTypeNameToSignature(getTokenId().getTYPE()));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    boolean isStringToken = getTokenId().getTYPE().equals("String") || getTokenId().getTYPE().equals("java.lang.String");
    boolean isRedefined = decl.redefinesTokenComponent(this);
    tt.bind("IsStringToken", isStringToken);
    tt.bind("IsRedefined", isRedefined);
    
    parse(tt.expand("TokenComponent"));
  }

  public void AggregateComponents.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("AggregateComponent"));
  }

  protected void Components.parse(String s) {
    jrag.AST.JragParser jp = new jrag.AST.JragParser(new java.io.StringReader(s));
    jp.root = hostClass().env();

    // The file name is not meaningful, as the component is completely generated
    // from a node type specification
    jp.setFileName("");

    // EMMA_2011-09-08: Adding this to give .ast generated methods an enclosing 
    // aspect "Ast" which allows for refinement of these methods. For example,
    // "getA" generated from "B ::= A" can be refined using the "Ast" aspect.
    //jp.enclosingAspect = "Ast";

    try {
      while(true) {
        jp.AspectBodyDeclaration();
      }
    } catch (Exception e) {
      // TODO: handle aspect parsing exception
      //System.err.println("Aspect parsing error: " + e.getMessage());
      //e.printStackTrace(System.err);
    }
  }
}
