/* Copyright (c) 2005-2019, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import java.util.Set;
import java.util.HashSet;
import java.util.Collection;
import java.util.LinkedList;

aspect CollectionAttributes {

  syn boolean AttrDecl.isCollection() = false;

  eq CollDecl.isCollection() = true;

  /** @return the type name of the collection root node */
  syn String CollDecl.rootType() = root().name();

  /** Returns {@code true} if the declaration does not have an explicit root type. */
  syn boolean CollDecl.implicitRoot() = root == null;

  /** @return the type name of the collection root node */
  syn String CollEq.rootType() = decl().rootType();

  /** @return the return type of the collection attribute */
  syn String CollEq.getType() = decl().getType();

  /**
   * @return the element type of this collection, or Object if the collection
   * is not parameterized
   */
  syn String CollEq.elementType() {
    String type = decl().getType();
    int start = type.indexOf('<');
    int end = type.lastIndexOf('>');
    if (start != -1 && end != -1) {
      return type.substring(start + 1, end);
    } else {
      return "Object";
    }
  }

  private boolean CollEq.iterableValue = false;

  private boolean CollEq.iterableTarget = false;

  public boolean CollEq.iterableTarget() {
    return iterableTarget;
  }

  public void CollEq.setIterableTarget(boolean b) {
    iterableTarget = b;
  }

  public boolean CollEq.iterableValue() {
    return iterableValue;
  }

  public void CollEq.setIterableValue(boolean b) {
    iterableValue = b;
  }

  /** @return {@code true} if this contribution implicitly contributes to the collection root. */
  syn boolean CollEq.implicitTarget() = getReference().isEmpty();

  /**
   * This gives the element type of the collection attribute's collection type.
   *
   * Note: only uses the declared typename for the collection attribute, can't handle
   * for example a subclass of {@code List<Foo>}.
   */
  syn String CollDecl.componentType() {
    String type = config().astNodeType();
    if (getType().indexOf('<') < getType().indexOf('>')) {
      type = getType().substring(getType().indexOf('<') + 1, getType().indexOf('>'));
    }
    return type;
  }

  public void ASTDecl.emitCollDecls(PrintStream out) {
    for (CollDecl decl : collDecls()) {
      emitCollDecl(out, decl);
    }
  }

  public void ASTDecl.emitCollDecl(PrintStream out, CollDecl attr) {
    if (attr.circularCollection()) {
      attr.emitVisitedDeclarations(out);
      attr.emitCircularCollectionEval(out);
      attr.emitComputeMethod(out);
      attr.emitCacheDeclarations(out);
    } else {
      attr.emitVisitedDeclarations(out);
      attr.emitAttrEquation(out);
      attr.emitComputeMethod(out);
      attr.emitCacheDeclarations(out);
    }
  }

  syn TypeDecl CollDecl.root() {
    if (root != null) {
      return grammar().lookup(root);
    } else {
      Collection<ASTDecl> roots = grammar().roots();
      if (roots.size() == 1) {
        return roots.iterator().next();
      } else {
        return grammar().lookup(config().astNodeType());
      }
    }
  }

  // Only used by circular collection attributes.
  public void AttrDecl.emitCircularCollectionEval(PrintStream out) {
    TemplateContext tt = templateContext();
    tt.bind("BottomValue", getBottomValue());
    tt.bind("ChangeCondition", valueComparisonExpr("new_" + signature() + "_value",
        signature() + "_value"));
    tt.bind("CircularComputeRhs", name() + "_compute()");
    tt.bind("TracePrintReturnNewValue", tracePrintReturnNewValue(signature() + "_value"));
    tt.bind("TracePrintReturnPreviousValue", tracePrintReturnPreviousValue(signature() + "_value"));
    tt.expand("AttrDecl.circularEquation:unparameterized", out);
  }

  // Only used by non-circular collection attributes.
  public void CollDecl.emitComputeMethod(PrintStream out) {
    String rootType = root().name();
    TemplateContext tt = templateContext();
    tt.bind("BottomValue", getBottomValue());
    if (onePhase()) {
      tt.expand("CollDecl.computeMethod:onePhase", out);
    } else {
      tt.expand("CollDecl.computeMethod:twoPhase", out);
    }
  }

  syn boolean TypeDecl.hasCollEq(CollDecl decl) = false;

  eq ASTDecl.hasCollEq(CollDecl decl) {
    for (int i = 0; i < getNumCollEq(); i++) {
      if (getCollEq(i).decl() == decl) {
        return true;
      }
    }
    return false;
  }

  syn lazy String CollEq.contributionSignature() = decl().getTarget() + "_" + signature();

  /**
   * Lazy condition means that the condition is evaluated during the
   * combination phase in two-phase collection evaluation, as opposed to
   * eagerly evaluating the condition during the survey phase.
   *
   * <p>This corresponds to "late condition evaluation" in the collection
   * attribute paper, as opposed to "early condition evaluation".
   *
   * <p>Defaults to {@code true}.
   */
  syn boolean AttrDecl.lazyCondition() =
      hasAnnotation("@LazyCondition")
      || hasAnnotation("@Parallel");

  syn boolean AttrEq.lazyCondition() = decl().lazyCondition();

  syn boolean AttrDecl.parallel() = hasAnnotation("@Parallel");

  syn boolean AttrDecl.parallelSurvey() = hasAnnotation("@ParallelSurvey");

  /**
   * One phase evaluation combines the survey and combination phases.
   *
   * <p>Defaults to {@code false}.
   */
  syn boolean AttrDecl.onePhase() = hasAnnotation("@OnePhase") && !config().concurrentEval();
  syn boolean AttrEq.onePhase() = decl().onePhase();

  /**
   * In naive evaluation the tree is traversed once per collection attribute,
   * and there is only one phase.
   *
   * <p>Defaults to {@code false}.
   */
  syn boolean AttrDecl.naive() = hasAnnotation("@Naive");
  syn boolean AttrEq.naive() = decl().naive();

  public void ASTDecl.emitCollContributions(PrintStream out) {
    // Find all collection equations in this node and group them according to either
    // the collection declaration or group name.
    collectContributors(out);
    contributeTo(out);
  }

  syn boolean CollEq.hasCondition() = !getCondition().isEmpty();

  interface SurveyContribution {
    void emitSurveyCode(CollDecl delc, PrintStream out);
  }

  class EqSurveyContribution implements SurveyContribution {
    private final CollEq eq;
    public EqSurveyContribution(CollEq eq) {
      this.eq = eq;
    }

    @Override
    public void emitSurveyCode(CollDecl decl, PrintStream out) {
      TemplateContext tt = eq.templateContext();
      tt.bind("BottomValue", decl.getBottomValue());
      tt.bind("CombOp", decl.getCombOp());
      if (decl.onePhase()) {
        tt.bind("HasCondition", eq.hasCondition());
        tt.expand("CollEq.collectContributors:onePhase", out);
      } else {
        tt.bind("HasCondition", eq.hasCondition() && !decl.lazyCondition());
        tt.expand("CollEq.collectContributors:twoPhase", out);
      }
    }
  }

  abstract class CustomSurveyContribution implements SurveyContribution {
    protected final String collName;
    protected final String collHost;
    protected final String fileName;
    protected final int startLine;
    protected final int endLine;
    protected final String comment;
    protected final String aspectName;

    public CustomSurveyContribution(String collName, String collHost,
        String fileName, int startLine, int endLine, String comment,
        String aspectName) {
      this.collName = collName;
      this.collHost = collHost;
      this.fileName = fileName;
      this.startLine = startLine;
      this.endLine = endLine;
      this.comment = comment;
      this.aspectName = aspectName;
    }

    public CollDecl lookupCollDecl(Grammar grammar) {
      CollDecl decl = grammar.lookupCollDecl(collHost, collName);
      if (decl == null) {
        throw new Error(String.format(
              "%s:%d: Cannot add custom survey code for unknown collection attribute: %s.%s()",
              fileName, startLine, collHost, collName));
      }
      return decl;
    }
  }

  class BlockSurveyContribution extends CustomSurveyContribution {
    private final String surveyCode;

    public BlockSurveyContribution(String collName, String collHost, String surveyCode,
        String fileName, int startLine, int endLine, String comment,
        String aspectName) {
      super(collName, collHost, fileName, startLine, endLine, comment, aspectName);
      this.surveyCode = surveyCode;
    }

    @Override
    public void emitSurveyCode(CollDecl decl, PrintStream out) {
      out.println(comment);
      String replacement;
      if (decl.onePhase()) {
        replacement = String.format(".collect_contributors_%s(_root);", decl.collectionId());
      } else {
        replacement = String.format(".collect_contributors_%s(_root, _map);", decl.collectionId());
      }
      out.println(surveyCode.replaceAll("\\.collectContributions\\(\\);", replacement));
    }
  }

  class ExpressionSurveyContribution extends CustomSurveyContribution {
    private final String ntaExpression;

    public ExpressionSurveyContribution(String collName, String collHost, String ntaExpression,
        String fileName, int startLine, int endLine, String comment,
        String aspectName) {
      super(collName, collHost, fileName, startLine, endLine, comment, aspectName);
      this.ntaExpression = ntaExpression;
    }

    @Override
    public void emitSurveyCode(CollDecl decl, PrintStream out) {
      out.println(comment);
      if (decl.onePhase()) {
        out.format("%s.collect_contributors_%s(_root);%n", ntaExpression, decl.collectionId());
      } else {
        out.format("%s.collect_contributors_%s(_root, _map);%n",
            ntaExpression, decl.collectionId());
      }
    }
  }

  /**
   * Generates the survey method for each type with a collection contribution.
   */
  private void ASTDecl.collectContributors(PrintStream out) {
    // Mapping collection declaration to collection equations.
    HashMap<CollDecl, Collection<SurveyContribution>> map =
        new LinkedHashMap<CollDecl, Collection<SurveyContribution>>();

    for (CollEq attr : getCollEqList()) {
      CollDecl decl = attr.decl();
      Collection<SurveyContribution> equations = map.get(decl);
      if (equations == null) {
        equations = new ArrayList<SurveyContribution>();
        map.put(decl, equations);
      }
      equations.add(new EqSurveyContribution(attr));
    }

    for (CustomSurveyContribution survey : surveyContributions) {
      CollDecl decl = survey.lookupCollDecl(grammar());
      Collection<SurveyContribution> contributions = map.get(decl);
      if (contributions == null) {
        contributions = new ArrayList<SurveyContribution>();
        map.put(decl, contributions);
      }
      contributions.add(survey);
    }

    for (Map.Entry<CollDecl, Collection<SurveyContribution>> entry : map.entrySet()) {
      CollDecl decl = entry.getKey();
      Collection<SurveyContribution> equations = entry.getValue();
      decl.templateContext().expand("CollDecl.collectContributors:header", out);
      boolean skipSuperCall = false;
      for (SurveyContribution contribution : equations) {
        contribution.emitSurveyCode(decl, out);
        skipSuperCall |= contribution instanceof BlockSurveyContribution;
      }
      if (skipSuperCall) {
        out.println(config().indent + "}");
      } else if (isASTNodeDecl() && !decl.parallelSurvey()) {
        decl.templateContext().expand("CollDecl.collectContributors:default", out);
      } else {
        if (isASTNodeDecl()) {
          decl.templateContext().expand("CollDecl.collectContributors:default", out);
        } else {
          decl.templateContext().expand("CollDecl.collectContributors:end", out);
        }
      }
    }
  }

  private void ASTDecl.contributeTo(PrintStream out) {
    HashMap<CollDecl, Collection<CollEq>> map = new LinkedHashMap<CollDecl, Collection<CollEq>>();
    for (CollEq attr : getCollEqList()) {
      if (!attr.onePhase()) {
        CollDecl decl = attr.decl();
        Collection<CollEq> equations = map.get(decl);
        if (equations == null) {
          equations = new ArrayList<CollEq>();
          map.put(decl, equations);
        }
        equations.add(attr);
      }
    }

    for (Map.Entry<CollDecl, Collection<CollEq>> entry : map.entrySet()) {
      CollDecl decl = entry.getKey();
      Collection<CollEq> equations = entry.getValue();

      decl.templateContext().bind("IsAstNode", isASTNodeDecl());
      decl.templateContext().expand("CollDecl.contributeTo:header", out);
      for (CollEq equation : equations) {
        TemplateContext tt = equation.templateContext();
        tt.bind("CombOp", decl.getCombOp());
        tt.expand("CollEq.contributeStatement", out);
      }
      out.println(config().indent + "}");
    }
  }

  syn String CollEq.collectionId() = decl().collectionId();

  syn lazy String AttrDecl.collectionId() = signature();

  eq CollDecl.collectionId() {
    String value = getAnnotationValue("@CollectionGroup");
    if (value != null) {
      return "CollectionGroup_" + value;
    }
    return signature();
  }

  syn String CollEq.signature() = decl().signature();

  syn lazy String CollDecl.signature() {
    StringBuffer s = new StringBuffer();
    s.append(getTarget());
    s.append("_");
    s.append(name());
    for (int i = 0; i < getNumParameter(); i++) {
      s.append("_" + getParameter(i).getType());
    }
    return s.toString();
  }

  /**
   * Finds all roots in the grammar.
   * A root is not a child of any other node.
   */
  syn lazy Collection<ASTDecl> Grammar.roots() {
    Collection<ASTDecl> roots = new HashSet<ASTDecl>();
    for (TypeDecl decl : getTypeDeclList()) {
      if (decl.isRootNode()) {
        roots.add((ASTDecl) decl);
      }
    }
    return roots;
  }

  /**
   * Returns {@code true} if this type is a root in the abstract grammar.
   * A root is not abstract and not a child of any other type in the grammar.
   */
  syn boolean TypeDecl.isRootNode() = false;

  eq ASTDecl.isRootNode() = isPotentialRootNode() && parents().isEmpty();

  syn boolean TypeDecl.isPotentialRootNode() = false;

  eq ASTDecl.isPotentialRootNode() =
      !hasAbstract() && !isASTNodeDecl() && !isOptSubtype() && !isListSubtype();

  eq ASTDecl.collDecls().hostClass() = this;

  eq ASTDecl.getCollEq().hostClass() = this;

  public void Grammar.weaveCollectionAttributes() {
    for (int i = 0; i < getNumTypeDecl(); i++) {
      getTypeDecl(i).weaveCollectionAttributes();
    }
  }

  public void TypeDecl.weaveCollectionAttributes() { }

  private Set<String> TypeDecl.processedCollectingSignatures = new HashSet<String>();

  protected boolean TypeDecl.processedCollectingSignature(String signature) {
    if (processedCollectingSignatures.contains(signature)) {
      return true;
    } else {
      processedCollectingSignatures.add(signature);
      return false;
    }
  }

  protected String TypeDecl.collectionReset() {
    StringBuilder res = new StringBuilder();
    for (int k = 0; k < grammar().getNumTypeDecl(); k++) {
      TypeDecl typeDecl = grammar().getTypeDecl(k);
      for (CollDecl decl : typeDecl.collDecls()) {
        TemplateContext tt = decl.templateContext();
        if (decl.root() == this) {
          res.append(tt.expand("Collection.flush"));
        }
      }
    }
    return res.toString();
  }

  public void ASTDecl.weaveCollectionAttributes() {
    for (CollDecl decl : collDecls()) {
      decl.weaveCollectionAttribute();
    }
  }

  public void CollDecl.weaveCollectionAttribute() {
    TemplateContext tt = templateContext();

    TypeDecl astNode = grammar().lookup(config().astNodeType());
    TypeDecl rootDecl = root();
    if (astNode != null && rootDecl != null) {
      if (!astNode.processedCollectingSignature(collectionId())) {
        if (!astNode.hasCollEq(this)) {
          String s = "";
          s += tt.expand("CollDecl.collectContributors:header");
          s += tt.expand("CollDecl.collectContributors:default");
          if (isCircular() || !onePhase()) {
            s += tt.expand("CollDecl.contributeTo:default");
          }
          astNode.addClassDeclaration(s, getFileName(), getStartLine());
        }
        String surveyMethod = tt.expand("CollDecl.surveyMethod");
        rootDecl.addClassDeclaration(surveyMethod, getFileName(), getStartLine());
      }
    }
  }

  /**
   * Finds the declaration node of a collection equation.
   *
   * @return the collection attribute declaration, or {@code null} if no
   * declaration was found.
   */
  syn CollDecl CollEq.decl() = grammar().lookupCollDecl(getTargetName(), getTargetAttributeName());

  syn CollDecl Grammar.lookupCollDecl(String hostName, String collName) {
    TypeDecl typeDecl = lookup(hostName);
    if (typeDecl != null) {
      for (CollDecl decl : typeDecl.collDecls()) {
        if (decl.getName().equals(collName)) {
          return decl;
        }
      }
    }
    return null;
  }

  coll HashSet CollDecl.uses() [new LinkedHashSet()] root Grammar;

  CollEq contributes this when decl() != null to CollDecl.uses() for decl();

  public Collection<CollDecl> Grammar.collDecls = new ArrayList<CollDecl>();

  public Grammar CollDecl.grammar;

  public void Grammar.addCollDecl(String name, String type, String className,
      String fileName, int startLine, int endLine, String startValue,
      String combOp, boolean isCircular, ArrayList<String> annotations,
      org.jastadd.jrag.AST.SimpleNode node, String root, String aspectName) {
    CollDecl decl = new CollDecl();
    decl.setName(name);
    decl.setType(type);
    decl.setCacheMode(CacheMode.LAZY);
    decl.setFileName(fileName);
    decl.setStartLine(startLine);
    decl.setEndLine(endLine);
    decl.setParameterList(new List());
    decl.setStartValue(startValue);
    decl.setCombOp(combOp);
    for (String annotation : annotations) {
      decl.addAnnotation(new Annotation(annotation));
    }
    decl.setCircularCollection(isCircular || annotations.contains("@Circular"));
    decl.setComment(Unparser.unparseComment(node));
    decl.setTarget(className);
    decl.root = root;
    decl.setAspectName(aspectName);
		decl.hostName = className;
    decl.grammar = this;
    // Defer collection attribute declaration.
    collDecls.add(decl);
  }

  public String CollDecl.root = null;

  syn boolean AttrDecl.hasAnnotation(String name) {
    for (int i = 0; i < getNumAnnotation(); ++i) {
      if (getAnnotation(i).isAnnotation(name)) {
        return true;
      }
    }
    return false;
  }

  syn String AttrDecl.getAnnotationValue(String name) {
    for (int i = 0; i < getNumAnnotation(); ++i) {
      if (getAnnotation(i).isAnnotation(name)) {
        return getAnnotation(i).value();
      }
    }
    // TODO(jesper): don't return null here, use a null object.
    return null;
  }

  public final Collection<CustomSurveyContribution> ASTDecl.surveyContributions =
      new LinkedList<CustomSurveyContribution>();

  /**
   * Adds code to the survey method for a particular collection attribute in the
   * given node type.
   */
  public void Grammar.addCustomSurveyBlock(String collHost,
      String collName,
      String nodeType,
      String codeBlock,
      String fileName,
      int startLine,
      int endLine,
      org.jastadd.jrag.AST.SimpleNode commentNode,
      String aspectName,
      ArrayList<String> annotations) {
    TypeDecl type = lookup(nodeType);
    if (type != null && type instanceof ASTDecl) {
      ((ASTDecl) type).surveyContributions.add(new BlockSurveyContribution(
          collName,
          collHost,
          codeBlock,
          fileName,
          startLine,
          endLine,
          Unparser.unparseComment(commentNode),
          aspectName));
      for (String annotation : annotations) {
        errorf("annotation %s not allowed for custom survey blocks.", annotation);
      }
    } else {
      errorf("Cannot add custom collection survey code to unknown class %s in %s at line %d",
          nodeType, fileName, startLine);
    }
  }

  /**
   * Adds an expression for an NTA child which should be searched during the
   * survey phase of a collection attribute.
   */
  public void Grammar.addCustomSurveyExpression(String collHost,
      String collName,
      String nodeType,
      String ntaExpression,
      String fileName,
      int startLine,
      int endLine,
      org.jastadd.jrag.AST.SimpleNode commentNode,
      String aspectName,
      ArrayList<String> annotations) {
    TypeDecl type = lookup(nodeType);
    if (type != null && type instanceof ASTDecl) {
      ((ASTDecl) type).surveyContributions.add(new ExpressionSurveyContribution(
          collName,
          collHost,
          ntaExpression,
          fileName,
          startLine,
          endLine,
          Unparser.unparseComment(commentNode),
          aspectName));
      for (String annotation : annotations) {
        errorf("annotation %s not allowed for custom survey blocks.", annotation);
      }
    } else {
      errorf("Cannot add custom collection survey code to unknown class %s in %s at line %d",
          nodeType, fileName, startLine);
    }
  }

  public CollEq Grammar.addCollEq(String collHost,
      String collName,
      String nodeType, String reference, String fileName,
      int startLine, int endLine, boolean iterableValue, boolean iterableTarget,
      org.jastadd.jrag.AST.SimpleNode commentNode, String aspectName,
      ArrayList<String> annotations) {
    TypeDecl type = lookup(nodeType);
    if (type != null && type instanceof ASTDecl) {
      CollEq equ = new CollEq(
          new List(),
          new List(),
          collHost,
          fileName,
          startLine,
          endLine,
          Unparser.unparseComment(commentNode),
          aspectName,
          "",
          "",
          collHost,
          collName,
          reference);
      equ.setIterableValue(iterableValue);
      equ.setIterableTarget(iterableTarget);
      for (String annotation : annotations) {
        equ.addAnnotation(new Annotation(annotation));
      }
      // TODO(joqvist): defer collection attribute weaving.
      ((ASTDecl) type).addCollEq(equ);
      return equ;
    } else {
      errorf("Cannot add collection contribution to unknown class %s in %s at line %d",
          nodeType, fileName, startLine);
      // TODO(joqvist): defer weaving so we can return non-null.
      return null;
    }
  }

  private String CollDecl.startValue;

  public void CollDecl.setStartValue(String expression) {
    startValue = expression;
  }

  public String CollDecl.getBottomValue() {
    return startValue;
  }

  /** The combining method used to update the collection. */
  private String CollDecl.combOp;

  public void CollDecl.setCombOp(String s) {
    combOp = s;
  }

  public String CollDecl.getCombOp() {
    return combOp;
  }

  private boolean CollDecl.circularCollection;

  public void CollDecl.setCircularCollection(boolean b) {
    circularCollection = b;
  }

  public boolean CollDecl.circularCollection() {
    return circularCollection;
  }

  public boolean CollDecl.isCircular() {
    return circularCollection();
  }

  private static boolean CollDecl.isValidIdentifierPart(String s) {
    for (int i = 0; i < s.length(); i++) {
      if (!Character.isJavaIdentifierPart(s.charAt(i))) {
        return false;
      }
    }
    return true;
  }
}
