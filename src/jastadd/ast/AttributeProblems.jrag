/* Copyright (c) 2005-2015, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;

import java.util.*;

import org.jastadd.jrag.*;

import org.jastadd.Problem;

/**
 * Collection attributes to retreive all attribute problems in the AST
 */
aspect AttributeProblems {

  /**
   * Collects semantic problems for attributes.
   */
  syn Collection<Problem> Grammar.attributeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (config().inhEqCheck()) {
      problems.addAll(missingInhEqProblems());
    }
    for (int i = 0; i < getNumTypeDecl(); i++) {
      problems.addAll(getTypeDecl(i).attributeProblems());
    }
    return problems;
  }

  syn Collection<Problem> Grammar.missingInhEqProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();

    for (InhDecl inhDecl: missingInhEqs()) {

      if (inhDecl.hostClass().isRootNode()) {
        // This is reported as an error - skip the warning!
        continue;
      }

      StringBuilder buf = new StringBuilder();
      buf.append("missing inherited equation for attribute " + inhDecl.name() + " ");

      boolean first1 = true;
      for (Map.Entry<ASTDecl, Map<ASTDecl, String>> e: inhDecl.missingEqs().entrySet()) {
        if (!first1) {
          buf.append(", and ");
        }
        first1 = false;
        buf.append("in class " + e.getKey().name() + " when being child of ");

        boolean first2 = true;
        for (Map.Entry<ASTDecl, String> parent: e.getValue().entrySet()) {
          if (!first2) {
            buf.append(", ");
          }
          first2 = false;
          buf.append(parent.getKey().name());
          buf.append(" (path: " + parent.getValue() + ")");
        }
      }
      problems.add(inhDecl.warning(buf.toString()));
    }
    return problems;
  }


  coll Collection<Problem> TypeDecl.attributeProblems()
      [new LinkedList<Problem>()]
      with add
      root TypeDecl;

  /**
   * Hack to make collection only on ASTdecls that are not
   * ClassDecl or InterfaceDecl.
   */
  syn Collection<Problem> ClassDecl.attributeProblems() =
      Collections.emptyList(); // Don't collect problems for attributes in ClassDecls.

  /**
   * Hack to make collection only on ASTdecls that are not
   * ClassDecl or InterfaceDecl.
   */
  syn Collection<Problem> InterfaceDecl.attributeProblems() =
      Collections.emptyList(); // Don't collect problems for attributes in InterfaceDecls.

  SynEq contributes errorf("synthesized attribute %s assigned in class %s is not declared",
      name(), hostClass().name())
    when decl() == null
    to TypeDecl.attributeProblems()
    for hostClass();

  /**
   * Create a new error object with relevant file name and line number.
   */
  syn Problem AttrEq.error(String message) =
      new Problem.Error(message, getFileName(), getStartLine());

  /**
   * Create a new error object with relevant file name and line number.
   */
  public Problem AttrEq.errorf(String messagefmt, Object... args) {
    return error(String.format(messagefmt, args));
  }

  /**
   * Create a new error object with relevant file name and line number.
   */
  syn Problem AttrDecl.error(String message) =
      new Problem.Error(message, getFileName(), getStartLine());

  /**
   * Create a new error object with relevant file name and line number.
   */
  public Problem AttrDecl.errorf(String messagefmt, Object... args) {
    return error(String.format(messagefmt, args));
  }

  /** Create a new warning with the relevant file name and line number. */
  syn Problem AttrDecl.warning(String message) =
      new Problem.Warning(message, getFileName(), getStartLine());

  /** Create a new warning with the relevant file name and line number. */
  public Problem AttrDecl.warningf(String messagefmt, Object... args) {
    return warning(String.format(messagefmt, args));
  }

  /**
   * @return Previous equation for same synthesized attribute
   */
  syn SynEq SynEq.prevEq() = hostClass().lookupSynEq(signature());

  SynEq contributes errorf("multiple equations for synthesized attribute %s.%s, previously defined in %s:%d",
      hostClass().name(), name(), prevEq().getFileName(), prevEq().getStartLine())
    when decl() != null && prevEq() != null && prevEq() != this
    to TypeDecl.attributeProblems()
    for hostClass();

  SynEq contributes errorf(
      "equation must have the same parameter names as attribute declaration in %s:%d",
      decl().getFileName(), decl().getStartLine())
    when decl() != null && !decl().parametersDecl().equals(parametersDecl())
    to TypeDecl.attributeProblems()
    for hostClass();

  // TODO(jesper): Check if there is a parameter list mismatch that might be causing the problem.
  InhEq contributes errorf("missing declaration for inherited attribute %s", attributeName())
    when decl() == null
    to TypeDecl.attributeProblems()
    for hostClass();

  InhEq contributes errorf(
      "equation must have the same parameter names as attribute declaration in %s:%d",
      decl().getFileName(), decl().getStartLine())
    when decl() != null && !decl().parametersDecl().equals(parametersDecl())
    to TypeDecl.attributeProblems()
    for hostClass();

  syn SynDecl SynDecl.prevDecl() = hostClass().lookupSynDecl(signature());

  SynDecl contributes errorf(
      "multiple declaration of attribute %s.%s, previously declared in %s:%d",
      hostClass().name(), name(), prevDecl().getFileName(), prevDecl().getStartLine())
    when prevDecl() != null && prevDecl() != this
    to TypeDecl.attributeProblems()
    for hostClass();

  SynDecl contributes missingEqProblem()
    when !missingEqs().isEmpty()
    to TypeDecl.attributeProblems()
    for hostClass();

  SynDecl contributes error("return type of NTA must be an AST node")
    when declaredNTA() && !(grammar().lookup(type().split("<")[0]) instanceof ASTDecl)
    to TypeDecl.attributeProblems()
    for hostClass();

  syn Problem SynDecl.missingEqProblem() {
    StringBuilder buf = new StringBuilder();
    buf.append("equation for synthesized attribute " + name() + " missing in the following classes:");
    for (TypeDecl decl: missingEqs()) {
      buf.append("\n    " + decl.name());
    }
    return error(buf.toString());
  }

  syn lazy Collection<? extends TypeDecl> SynDecl.missingEqs() =
    hostClass().missingSynEqs(signature());

  /**
   * @param signature the signature of the attribute
   * @return the subclasses of this AST class that are missing an
   * equation for for the synthesized attribute
   */
  syn Collection<? extends TypeDecl> TypeDecl.missingSynEqs(String signature) =
      lookupSynEq(signature) == null
      ? Collections.singleton(this)
      : Collections.<TypeDecl>emptyList();

  eq InterfaceDecl.missingSynEqs(String signature) = Collections.emptyList();

  /**
   * @param signature the signature of the attribute
   * @return the subclasses of this AST class that are missing an
   * equation for for the synthesized attribute
   */
  eq ASTDecl.missingSynEqs(String signature) {
    if (lookupSynEq(signature) != null) {
      // if there is an equation defined for this class we are done
      return Collections.emptyList();
    } else if (!hasAbstract()) {
      // if the class is not abstract then it is missing an equation
      return Collections.singletonList(this);
    } else {
      // the class was abstract so we must check that all subclasses define the equation
      Collection<TypeDecl> missing = new LinkedList<TypeDecl>();
      for (ASTDecl subclass: subclasses()) {
        missing.addAll(subclass.missingSynEqs(signature));
      }
      return missing;
    }
  }

  InhEq contributes unknownChildProblem()
    when hasUnknownChildProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean InhEq.hasUnknownChildProblem() =
    getComponent() == null &&
    getChildName().startsWith("get") &&
    !getChildName().equals("getChild");

  syn Problem InhEq.unknownChildProblem() {
    StringBuilder buf = new StringBuilder();
    buf.append(String.format("inherited equation for unknown child %s in class %s",
        childName(), hostClass().name()));
    for (Component c : hostClass().components()) {
      buf.append("\n    " + c.type() + " " + c.name());
    }
    return error(buf.toString());
  }

  InhEq contributes unknownNTAProblem()
    when hasUnknownNTAProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean InhEq.hasUnknownNTAProblem() =
    !hasUnknownChildProblem() &&
    (getChildAttrDecl() == null || !getChildAttrDecl().declaredNTA()) &&
    (getComponent() == null && !getChildName().equals("getChild"));

  syn Problem InhEq.unknownNTAProblem() {
    StringBuilder buf = new StringBuilder();
    AttrDecl decl = getChildAttrDecl();
    if (decl == null) {
      buf.append(String.format("inherited equation for unknown NTA %s in class %s",
          childName(), hostClass().name()));
    } else if (!decl.declaredNTA()) {
      buf.append("inherited equation for attribute " + childName() + " which is not a NTA");
    }
    return error(buf.toString());
  }

  InhEq contributes multiEqProblem()
    when hasMultiEqProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  /**
   * @return Previous equation for this inherited attribute
   */
  syn InhEq InhEq.prevEq() = hostClass().lookupInhEq(signature(), childName());

  syn boolean InhEq.hasMultiEqProblem() = prevEq() != null && prevEq() != this;

  syn Problem InhEq.multiEqProblem() = errorf(
      "multiple equations for inherited attribute %s.%s in class %s and %s in class %s in %s:%d",
      childName(), name(), hostClass().name(), prevEq().name(), prevEq().hostClass().name(),
      prevEq().getFileName(), prevEq().getStartLine());

  InhEq contributes badIndexProblem()
    when hasBadIndexProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean InhEq.hasBadIndexProblem() =
      hasIndex()
      && getComponent() != null
      && !(getComponent() instanceof ListComponent)
      && !getChildName().equals("getChild");

  syn Problem InhEq.badIndexProblem() =
      errorf("may not supply index for non list child %s in class %s",
          childName(), hostClass().name());

  InhDecl contributes multiDeclProblem()
    when isDuplicateInhDecl()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn Problem InhDecl.multiDeclProblem() =
      warningf("multiple declarations of inherited attribute %s.%s, previously declared in %s:%d",
          hostClass().name(), name(), prevDecl().getFileName(), prevDecl().getStartLine());

  InhDecl contributes errorf("inherited attribute %s defined on root node %s",
      name(), hostClass().name())
    when hostClass().isRootNode()
    to TypeDecl.attributeProblems()
    for hostClass();

  AttrDecl contributes unsupportedAnnotationProblem()
    when hasUnsupportedAnnotation()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean AttrDecl.hasUnsupportedAnnotation() {
    for (Annotation annotation: getAnnotationList()) {
      if (!supportedAnnotation(annotation)) {
        return true;
      }
    }
    return false;
  }

  syn Problem AttrDecl.unsupportedAnnotationProblem() {
    StringBuilder buf = new StringBuilder();
    buf.append("unsupported annotations for this attribute declaration: ");
    boolean first = true;
    for (Annotation annotation: getAnnotationList()) {
      if (!supportedAnnotation(annotation)) {
        if (!first) {
          buf.append(", ");
        }
        first = false;
        buf.append(annotation.getAnnotation());
      }
    }
    return error(buf.toString());
  }

  AttrEq contributes unsupportedAnnotationProblem()
    when hasUnsupportedAnnotation()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean AttrEq.hasUnsupportedAnnotation() {
    for (Annotation annotation: getAnnotationList()) {
      if (!supportedAnnotation(annotation)) {
        return true;
      }
    }
    return false;
  }

  syn Problem AttrEq.unsupportedAnnotationProblem() {
    StringBuilder buf = new StringBuilder();
    buf.append("unsupported annotations for this attribute equation: ");
    boolean first = true;
    for (Annotation annotation: getAnnotationList()) {
      if (!supportedAnnotation(annotation)) {
        if (!first) {
          buf.append(", ");
        }
        first = false;
        buf.append(annotation.getAnnotation());
      }
    }
    return error(buf.toString());
  }

  CollDecl contributes collectionGroupProblem()
    when hasCollectionGroupProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean CollDecl.hasCollectionGroupProblem() {
    if (hasAnnotation("@CollectionGroup")) {
      String value = getAnnotationValue("@CollectionGroup");
      return (value == null)
            || (value.equals(""))
            || (!isValidIdentifierPart(value));
    }
    return false;
  }

  syn Problem CollDecl.collectionGroupProblem() {
    String msg = "";
    if (hasAnnotation("@CollectionGroup")) {
      String value = getAnnotationValue("@CollectionGroup");
      if (value == null) {
        msg = "missing CollectionGroup argument";
      } else if (value.equals("")) {
        msg = "CollectionGroup argument can not be empty";
      } else if (!isValidIdentifierPart(value)) {
        msg = "CollectionGroup argument must be a valid identifier part";
      }
    }
    return error(msg);
  }

  CollDecl contributes multipleRootsProblem()
    when hasMultipleRootsProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean CollDecl.hasMultipleRootsProblem() = root == null && grammar().roots().size() > 1;

  syn Problem CollDecl.multipleRootsProblem() {
    StringBuilder buf = new StringBuilder();
    buf.append("multiple tree roots to search for contributions. Please explicitly select one of");
    for (ASTDecl decl : grammar().roots()) {
      buf.append(" " + decl.name());
    }
    return error(buf.toString());
  }

  CollDecl contributes error("No tree roots to search for contributions. "
      + "Please declare an explicit root node.")
    when hasNoRootProblem()
    to TypeDecl.attributeProblems()
    for hostClass();

  syn boolean CollDecl.hasNoRootProblem() = root == null && grammar().roots().isEmpty();

  CollDecl contributes warning("no contributions for this collection attribute")
    when uses().isEmpty()
    to TypeDecl.attributeProblems()
    for hostClass();

  CollEq contributes errorf("undeclared collection attribute '%s'", name())
    when decl() == null
    to TypeDecl.attributeProblems()
    for hostClass();

  CollDecl contributes errorf("Unknown collection root: \"%s\"", root)
    when root != null && root() == null
    to TypeDecl.attributeProblems()
    for hostClass();

}
