/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;
import java.util.*;

aspect ASTDecl {
  syn Collection<Component> ASTDecl.components() {
    LinkedList<Component> list = new LinkedList<Component>();
    if (superClass() != null) {
      list.addAll(superClass().components());
    }
    for (int i = 0; i < getNumComponent(); i++) {
      boolean done = false;
      for (ListIterator<Component> iter = list.listIterator(); !done && iter.hasNext(); ) {
        Component c = iter.next();
        if (c.name().equals(getComponent(i).name()) && c.type().equals(getComponent(i).type())) {
          iter.remove();
          done = true;
        }
      }
      if (getComponent(i).isNTA()) {
        list.add(getComponent(i));
      } else {
        int j = 0;
        while (j < list.size() && !((Component) list.get(j)).isNTA()) {
          j++;
        }
        list.add(j, getComponent(i));
      }
    }
    return list;
  }

  syn boolean ASTDecl.redefinesTokenComponent(TokenComponent c) {
    if (c.hostClass() != this) {
      // Inherited component.
      return false;
    }
    if (superClass() == null) {
      // No definition in superclass.
      return true;
    }
    for (Component d : superClass().components()) {
      if (d.name().equals(c.name()) && d instanceof TokenComponent && c.isNTA() == d.isNTA()) {
        return false;
      }
    }
    return true; // No equal definition in superclass.
  }
}

aspect Comp {
  syn lazy Collection<Component> TypeDecl.components() {
    LinkedList list = new LinkedList();
    for (int i = 0; i < getNumComponent(); i++) {
      list.add(getComponent(i));
    }
    return list;
  }

  /**
   * @return {@code true} if this attribute is an NTA shadowing a non-NTA child
   * of a supertype
   */
  syn boolean Component.ntaShadowingNonNTA() {
    if (!isNTA()) {
      return false;
    }
    String name = name();
    TypeDecl hostClass = hostClass();
    while (true) {
      hostClass = hostClass instanceof ASTDecl ? ((ASTDecl) hostClass).superClass() : null;
      if (hostClass == null) {
        return false;
      }
      for (Component comp : hostClass.components()) {
        if (!comp.isNTA() && name.equals(comp.name())) {
          return true;
        }
      }
    }
  }

}

aspect NTADetector {
  syn boolean Component.isNTA() = false;
  eq ListComponentNTA.isNTA() = true;
  eq OptionalComponentNTA.isNTA() = true;
  eq TokenComponentNTA.isNTA() = true;
  eq AggregateComponentNTA.isNTA() = true;
}

aspect ConstructorParameterTypes {
  syn String Component.constrParmType();
  eq ListComponent.constrParmType() = config().listType() + "<" + getId().type() + ">";
  eq OptionalComponent.constrParmType() = config().optType() + "<" + getId().type() + ">";
  eq TokenComponent.constrParmType() = getTokenId().getTYPE();
  eq AggregateComponent.constrParmType() = getId().type();
}

aspect ComponentHostClass {
  inh TypeDecl Component.hostClass();

  public String ClassDecl.extendsName = "java.lang.Object";
}

aspect CoarseIncremental {

  syn lazy boolean ASTDecl.isRegionRoot() = isRootNode() || lookupRegionDecl(name()) != null;

  inh RegionDecl ASTDecl.lookupRegionDecl(String name);
  eq Grammar.getTypeDecl().lookupRegionDecl(String name) {
    for (int i = 0; i < getNumRegionDecl(); i++) {
      RegionDecl decl = getRegionDecl(i);
      if (decl.name().equals(name)) {
        return decl;
      }
    }
    return null;
  }

  syn lazy boolean ASTDecl.hasRegionRootAsSuperClass() {
    ASTDecl superDecl = superClass();
    if (superDecl != null) {
      if (superDecl.isRegionRoot()) {
        return true;
      }
      return superDecl.hasRegionRootAsSuperClass();
    }
    return false;
  }

  syn lazy boolean ASTDecl.isRegionLeaf() {
    if (name().equals(config().listType()) || name().equals(config().optType())) {
      TypeDecl type = grammar().lookup(config().astNodeType());
      if (type != null && type instanceof ASTDecl && ((ASTDecl) type).isRegionRoot()) {
          return false;
      }
      return true;
    }
    for (int i = 0; i < getNumComponent(); i++) {
      Component comp = getComponent(i);
      TypeDecl type = grammar().lookup(comp.type());
      if (type != null && type instanceof ASTDecl && ((ASTDecl) type).isRegionRoot()) {
        return true;
      }
    }
    return false;
  }
}
