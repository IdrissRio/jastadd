/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Flush {

  public void ASTDecl.jjtGenFullFlush1(PrintWriter stream) {
    if (!grammar().fullFlush) return;
    stream.println(ind(2) + "if(this.init_children == null) {");
    stream.println(ind(3) +   "this.init_children = new ASTNode[this.children.length];");
    stream.println(ind(3) +   "this.rewritten_children = new boolean[this.children.length];");
    stream.println(ind(2) + "}");
    stream.println(ind(2) + "if(!node.inc_hasEnclosingRewrittenNode()) {");
    stream.println(ind(3) +   "this.init_children[i] = node.fullCopy();");
    stream.println(ind(3) +   "this.rewritten_children[i] = true;");
    stream.println(ind(2) + "}");
  }

  public void ASTDecl.jjtGenFullFlush2(PrintWriter stream) {
    if (!grammar().fullFlush) return;
    stream.println(ind(4) + "if (rewriteState == ASTNode$State.REWRITE_CHANGE) {");
    stream.println(ind(5) +   "this.rewritten_children[i] = true;");
    stream.println(ind(4) + "}");
  }
  
  public void ASTDecl.jjtGenFullFlushSetChild1(PrintWriter stream) {
    if (!grammar().fullFlush) return;
    stream.println(ind(2) + "if (init_children != null) {");
    stream.println(ind(3) +   "ASTNode d[] = new ASTNode[i << 1];");
    stream.println(ind(3) +   "System.arraycopy(init_children, 0, d, 0, init_children.length);");
    stream.println(ind(3) +   "init_children = d;");
    stream.println(ind(2) + "}");
    stream.println(ind(2) + "if (rewritten_children != null) {");
    stream.println(ind(3) +   "boolean[] b = new boolean[i << 1];");
    stream.println(ind(3) +   "System.arraycopy(rewritten_children, 0, b, 0, rewritten_children.length);");
    stream.println(ind(3) +   "rewritten_children = b;");
    stream.println(ind(2) + "}");
  }

  public void ASTDecl.jjtGenFullFlushSetChild2(PrintWriter stream) {
    if (!grammar().fullFlush) return;
    stream.println(ind(2) + "if (rewritten_children != null) {");
    stream.println(ind(3) +   "rewritten_children[i] = false;"); 
    stream.println(ind(2) + "}");   
  }

  public void ASTDecl.jjtGenFullFlushInsertChild1(PrintWriter stream) {
    if (!grammar().fullFlush) return;
    stream.println(ind(2) + "if (init_children != null) {");
    stream.println(ind(3) +   "ASTNode d[] = new ASTNode[init_children.length + 1];");
    stream.println(ind(3) +   "System.arraycopy(init_children, 0, d, 0, init_children.length);");
    stream.println(ind(3) +   "if (i < init_children.length) {");
    stream.println(ind(4) +     "System.arraycopy(init_children, i, d, i+1, init_children.length - i);");
    stream.println(ind(3) +   "}");
    stream.println(ind(3) +   "init_children = d;");
    stream.println(ind(2) + "}");
    stream.println(ind(2) + "if (rewritten_children != null) {");
    stream.println(ind(3) +   "boolean b[] = new boolean[rewritten_children.length + 1];");
    stream.println(ind(3) +   "System.arraycopy(rewritten_children, 0, b, 0, rewritten_children.length);");
    stream.println(ind(3) +   "if (i < rewritten_children.length) {");
    stream.println(ind(4) +     "System.arraycopy(rewritten_children, i, b, i+1, rewritten_children.length - i);");
    stream.println(ind(3) +   "}");
    stream.println(ind(3) +   "rewritten_children = b;");
    stream.println(ind(2) + "}");
  }

  public void ASTDecl.jjtGenFullFlushRemoveChild1(PrintWriter stream) {
    if (!grammar().fullFlush) return;
    stream.println(ind(3) + "if (init_children != null) {");
    stream.println(ind(4) +   "System.arraycopy(init_children, i+1, init_children, i, init_children.length-i-1);");
    stream.println(ind(3) + "}");      
    stream.println(ind(3) + "if (rewritten_children != null) {");
    stream.println(ind(4) +   "System.arraycopy(rewritten_children, i+1, rewritten_children, i, rewritten_children.length-i-1);");
    stream.println(ind(3) + "}");
  }
}
