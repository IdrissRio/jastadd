/* Copyright (c) 2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Annotations {
  syn boolean Annotation.isAnnotation(String name) =
      getAnnotation().equals(name) || getAnnotation().startsWith(name + "(");

  syn String Annotation.value() {
    // TODO: this is a hackjob - replace me!
    String key = getAnnotation();
    key = key.replace('(', ',');
    key = key.replace(')', ',');
    String[] strs = key.split(",");
    if (strs.length > 1) {
      return strs[1].substring(1, strs[1].length() - 1); // Remove quotes.
    } else {
      return null;
    }
  }

  /**
   * @param a the annotation
   * @return <code>true</code> if the given annotation is supported
   * for this type of attribute declaration
   */
  syn boolean AttrDecl.supportedAnnotation(Annotation a) = false;

  eq SynDecl.supportedAnnotation(Annotation a) = true;

  syn boolean CollDecl.supportedAnnotation(Annotation a) {
    // TODO(joqvist): document these annotations!
    return a.isAnnotation("@OnePhase")
        || a.isAnnotation("@LazyCondition")
        || a.isAnnotation("@Circular")
        || a.isAnnotation("@CollectionGroup")
        || a.isAnnotation("@Naive")
        || a.isAnnotation("@Parallel")
        || a.isAnnotation("@ParallelSurvey");
  }

  /**
   * @param a the annotation
   * @return <code>true</code> if the given annotation is supported
   * for this type of attribute equation
   */
  syn boolean AttrEq.supportedAnnotation(Annotation a) = false;

  eq SynEq.supportedAnnotation(Annotation a) = true;

  /**
   * @return the annotations of this attribute equation.
   */
  syn String AttrEq.annotations() {
    StringBuilder sb = new StringBuilder();
    for (Annotation annotation: getAnnotationList()) {
      if (sb.length() > 0) {
        sb.append("\n");
      }
      sb.append(annotation.getAnnotation());
    }
    return sb.toString();
  }

  syn String ASTDecl.annotations() = "";

  /**
   * @return the annotations of this attribute declaration.
   */
  syn String AttrDecl.annotations() {
    StringBuilder sb = new StringBuilder();
    for (Annotation annotation : getAnnotationList()) {
      if (sb.length() > 0) {
        sb.append("\n");
      }
      sb.append(annotation.getAnnotation());
    }
    return sb.toString();
  }

  eq CollDecl.annotations() = "";

  syn String ListComponent.annotations() = "";

  syn String OptionalComponent.annotations() = "";

  syn String TokenComponent.annotations() = "";
}
