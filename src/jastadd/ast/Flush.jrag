/* Copyright (c) 2011-2013, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Flush {

  public void ASTDecl.emitFlushCache(PrintWriter out) {
    TemplateContext tt = templateContext();
    
    tt.expand("ASTNode.flushTreeCacheMethod", out);
    tt.expand("ASTDecl.flushCacheMethod", out);
    
    tt.bind("FlushSynAttrCache", emitFlushSynAttrCacheString());
    tt.bind("FlushInhAttrCache", emitFlushInhAttrCacheString());
    // TODO: Figure out if flushing of NTAs are missing when this is excluded 
    //tt.bind("FlushNTACache", emitFlushNTACacheString()); 
    tt.expand("ASTDecl.flushAttrCacheMethod", out);
    
    tt.bind("FlushCollectionCache", emitFlushCollectionCacheString());
    tt.expand("ASTDecl.flushCollectionCacheMethod", out);
    
    tt.expand("ASTDecl.flushRewriteCacheMethod", out);
    
    if (config().flushRewrite) {
      tt.expand("ASTNode.flushRewritesInitValue", out);
      tt.expand("ASTNode.flushRewritesHasEnclosingRewriteMethod", out);
    }
  }

  /**
   * Creates string with code flush synthesized attributes in a node.
   */
  public String ASTDecl.emitFlushSynAttrCacheString() {
    StringBuffer res = new StringBuffer();
    for (int k = 0; k < getNumSynEq(); k++) {
      AttrDecl attr = getSynEq(k).decl();
      if (attr == null) continue;
      res.append(attr.resetVisit());
      res.append(attr.resetCache());
    }
    return res.toString();
  }

  /**
   * Creates string with code flush inherited attributes in a node.
   */
  public String ASTDecl.emitFlushInhAttrCacheString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (int k = 0; k < getNumInhDecl(); k++) {
      AttrDecl attr = getInhDecl(k);
      if (attr == null) continue;
      res.append(attr.resetVisit());
      res.append(attr.resetCache());
    }
    return res.toString();
  }

  syn String AttrDecl.resetCache() = templateContext().expand("AttrDecl.resetAttrCache");

  syn String AttrDecl.resetVisit() = templateContext().expand("AttrDecl.resetAttrVisit");


  /**
   * Creates string with code flushing NTAs in a node.
   */
  public String ASTDecl.emitFlushNTACacheString() {
    StringBuffer res = new StringBuffer();
    TemplateContext tt = templateContext();
    for (int c = 0; c < getNumComponents(); c++) {
      Components comp = getComponents(c);
      if (comp instanceof TokenComponent) {
        TokenComponent tokenComp = (TokenComponent)comp;
        String type = tokenComp.getTokenId().getTYPE();
        tt.bind("IsStringToken", type.equals("String") || type.equals("java.lang.String"));
        tt.bind("IsPrimitive", tokenComp.isPrimitive());
        tt.bind("Id", tokenComp.getTokenId().getID());
        tt.bind("TypeSign", ASTNode.convTypeNameToSignature(type));
        res.append(tt.expand("TokenComponent.flushNTACache"));
      }
    }
    return res.toString();
  }

  /**
   * Creates string with code flushing collection attributes in a node.
   */
  public String ASTDecl.emitFlushCollectionCacheString() {
    StringBuffer res = new StringBuffer();
    for (int i = 0; i < getNumCollDecl(); i++) {
      CollDecl attr = getCollDecl(i);
      res.append(attr.resetVisit());
      res.append(attr.resetCache());
      if (!attr.separateEvaluation() && !attr.onePhase()) {
        res.append(config().ind(2) + attr.signature() + "_contributors = " + (config().lazyMaps ? "null" : config().createContributorSet) + ";\n");
      }
    }
    res.append(collectionReset());
    return res.toString();
  }
}
