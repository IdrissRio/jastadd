/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect ASTCloneNode {

  syn String ASTDecl.copyReturnType() {
    if (config().java5()) {
      if (isOptDecl() || isListDecl() || isASTNodeDecl()) {
        return name() + "<T>";
      } else {
        return name();
      }
    } else {
      return config().astNodeType();
    }
  }

  public void ASTDecl.emitCloneNode(PrintWriter stream) {
    templateContext().expand("ASTDecl.emitCloneNode", stream);
  }

  public void ASTDecl.emitCopyNode(PrintWriter stream) {

    if (hasAbstract())
      // Don't generate copy methods for abstract node types
      return;

    templateContext().expand("ASTDecl.emitCopyNode", stream);
  }

  public void ASTDecl.emitFullCopy(PrintWriter stream) {
    // We skip copying NTA children
    // Build list of NTA indices - these are skipped when copying the children
    LinkedList ntaAggregateIndices = new LinkedList();
    LinkedList ntaOptIndices = new LinkedList();
    LinkedList ntaListIndices = new LinkedList();
    int i = 0;
    for (Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if (c.isNTA()) {
        if (c instanceof ListComponentsNTA) {
          ntaListIndices.add(new Integer(i));
        } else if (c instanceof OptionalComponentNTA) {
          ntaOptIndices.add(new Integer(i));
        } else if (c instanceof AggregateComponentsNTA) {
          ntaAggregateIndices.add(new Integer(i));
        }
      }

      if (!(c instanceof TokenComponent)) {
        // tokens are not stored in child array
        i += 1;
      }
    }

    // The skipNTAs string will include a switch statement that excludes
    // the NTA children from the full copy, but for Opt and List NTAs
    // we still need to create a placeholder Opt/List node
    String skipNTAs = "";
    String ind = config().indent;
    if (!ntaAggregateIndices.isEmpty() || !ntaOptIndices.isEmpty() ||
      !ntaListIndices.isEmpty()) {

      skipNTAs = "switch (i) {\n";
      Iterator iter;
      if (!ntaAggregateIndices.isEmpty()) {
        iter = ntaAggregateIndices.iterator();
        while (iter.hasNext()) {
          skipNTAs += "case " + (iter.next()) + ":\n";
        }
        skipNTAs += ind + "tree.children[i] = null;\n";
        skipNTAs += ind + "continue;\n";
      }
      if (!ntaOptIndices.isEmpty()) {
        iter = ntaOptIndices.iterator();
        while (iter.hasNext()) {
          skipNTAs += "case " + (iter.next()) + ":\n";
        }
        skipNTAs += ind + "tree.children[i] = new " + config().optType() + "();\n";
        skipNTAs += ind + "continue;\n";
      }
      if (!ntaListIndices.isEmpty()) {
        iter = ntaListIndices.iterator();
        while (iter.hasNext()) {
          skipNTAs += "case " + (iter.next()) + ":\n";
        }
        skipNTAs += ind + "tree.children[i] = new " + config().listType() + "();\n";
        skipNTAs += ind + "continue;\n";
      }
      skipNTAs += "}\n";
    }

    TemplateContext tt = templateContext();
    tt.bind("SkipNTAs", skipNTAs);
    
    tt.expand("ASTDecl.emitFullCopy", stream);
    tt.expand("ASTDecl.emitTreeCopyNoTransform", stream);
    tt.expand("ASTDecl.emitTreeCopy", stream);
    if (isASTNodeDecl()) {
      tt.expand("ASTNode.emitDoFullTraversal", stream);
    }
  }
}
