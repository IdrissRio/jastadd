/* Copyright (c) 2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect InheritedAttributes {

  /**
   * The tail of the list of inherited attribute parameters after removing caller and child.
   */
  syn String InhDecl.inhParametersTail() =
    parameters().equals("") ? "" : (", " + parameters());

  /**
   * The tail of the list of inherited attribute parameters after removing caller and child.
   */
  syn String InhEq.inhParametersTail() =
    parameters().equals("") ? "" : (", " + parameters());

  /**
   * The tail of the list of inherited attribute parameter declarations after removing caller and child.
   */
  syn String InhDecl.inhParametersDeclTail() =
    parametersDecl().equals("") ? "" : (", " + parametersDecl());

  /**
   * The tail of the list of inherited attribute parameter declarations after removing caller and child.
   */
  syn String InhEq.inhParametersDeclTail() =
    parametersDecl().equals("") ? "" : (", " + parametersDecl());

  /**
   * Ensure no duplicate inherited declarations.
   * Warnings are reported for duplicate inherited declarations.
   * See AttributeProblems.jrag
   */
  public void Grammar.removeDuplicateInhDecls() {
    for (int i = 0; i < getNumTypeDecl(); ++i) {
      getTypeDecl(i).removeDuplicateInhDecls();
    }
  }

  public void TypeDecl.removeDuplicateInhDecls() {
  }

  public void ASTDecl.removeDuplicateInhDecls() {
    for (int i = 0; i < getNumInhDecl(); ++i) {
      AttrDecl decl = getInhDecl(i);
      if (decl.isDuplicateInhDecl()) {
        getInhDeclList().removeChild(i);
      }
    }
  }

  syn boolean AttrDecl.isDuplicateInhDecl() = false;
  eq InhDecl.isDuplicateInhDecl() = prevDecl() != this;

  syn InhDecl InhDecl.prevDecl() = hostClass().lookupInhDecl(signature());

  syn lazy InhDecl TypeDecl.lookupInhDecl(String signature) {
    for (int i = 0; i < getNumInhDecl(); i++) {
      if (getInhDecl(i).signature().equals(signature)) {
        return getInhDecl(i);
      }
    }
    return null;
  }

  eq ASTDecl.lookupInhDecl(String signature) {
    InhDecl decl = super.lookupInhDecl(signature);
    if (decl != null || superClass() == null) {
      return decl;
    }
    return superClass().lookupInhDecl(signature);
  }

  /**
   * Find all inherited attribute declarations in the grammar. Used for
   * semantic analysis and error checkin of inherited attributes.
   *
   * @return map containing all inherited attribute declarations in
   * the grammar
   */
  Map<String,InhDecl> Grammar.inhDecls() {
    Map<String,InhDecl> decls = new HashMap<String,InhDecl>();
    for (TypeDecl type: getTypeDecls()) {
      for (int i = 0; i < type.getNumInhDecl(); ++i) {
        InhDecl decl = type.getInhDecl(i);
        decls.put(decl.signature(), decl);
      }
    }
    return decls;
  }

}

aspect FindInheritedEquations {
  /**
   * @return declarations of inherited attributes that lack an equation in the
   * tree.
   */
  syn lazy Collection<InhDecl> Grammar.missingInhEqs() {
    Collection<InhDecl> missing = new HashSet<InhDecl>();
    for (ASTDecl root: roots()) {
      missing.addAll(root.missingInhEqs());
    }
    return missing;
  }

  syn lazy Collection<String> ASTDecl.defaultInhEqs() {
    Collection<String> defaultEqs = new HashSet<String>();
    for (InhEq equ: getInhEqList()) {
      String childName = equ.childName();
      String signature = equ.signature();
      if (childName.equals("Child")) {
        defaultEqs.add(signature);
      }
    }
    if (superClass() != null) {
      defaultEqs.addAll(superClass().defaultInhEqs());
    }
    return defaultEqs;
  }

  syn lazy Map<String,Collection<String>> ASTDecl.componentInhEqs() {
    Map<String,Collection<String>> componentEqs = new HashMap<String,Collection<String>>();
    for (InhEq equ: getInhEqList()) {
      String childName = equ.childName();
      String signature = equ.signature();
      if (!childName.equals("Child")) {
        Collection<String> eqs = componentEqs.get(childName);
        if (eqs == null) {
          eqs = new HashSet<String>();
          componentEqs.put(childName, eqs);
        }
        eqs.add(signature);
      }
    }
    if (superClass() != null) {
      componentEqs.putAll(superClass().componentInhEqs());
    }
    return componentEqs;
  }

  private Collection<InhDecl> ASTDecl.missingInhEqs = null;

  /**
   * Finds inherited attribute declarations that lack equations
   * in subtrees rooted at this node.
   *
   * @return a collection of inherited declarations "visible" from
   * AST nodes of this type
   */
  public Collection<InhDecl> ASTDecl.missingInhEqs() {
    if (missingInhEqs != null) {
      return missingInhEqs;
    }

    missingInhEqs = Collections.emptyList();

    Collection<InhDecl> missing = new HashSet<InhDecl>();
    for (Component c: components()) {
      if (c instanceof TokenComponent) {
        continue;
      }
      TypeDecl type = c.typeDecl();
      if (type instanceof ASTDecl) {
        ASTDecl decl = (ASTDecl) type;
        String childName = c.name();

        addMissingChildInhEqs(missing, childName, decl.missingInhEqs());

        // any subtype of the component type can replace the component type
        for (ASTDecl subtype: decl.subclassesTransitive()) {
          addMissingChildInhEqs(missing, childName, subtype.missingInhEqs());
        }
      }
    }

    if (!isRootNode()) {
      // add all inh attrs declared on this node
      for (InhDecl decl: getInhDeclList()) {
        missing.add(decl);
      }

      // add all missing equations from supertypes
      for (ASTDecl supertype: supertypes()) {
        for (InhDecl decl: supertype.getInhDeclList()) {
          missing.add(decl);
        }
      }
    }

    missingInhEqs = missing;
    return missingInhEqs;
  }

  private void ASTDecl.addMissingChildInhEqs(Collection<InhDecl> missing,
      String childName, Collection<InhDecl> childMissing) {

      for (InhDecl decl: childMissing) {
        if (!hasInhEqForDecl(childName, decl.signature())) {
          // we have no equation X.getY() = ...;
          missing.add(decl);
        }
      }
  }

  /**
   * Lookup matching equation for an inherited attribute declaration.
   * @param childName name of child component containing declaration
   * @param signature signature of the declaration
   * @return {@code true} if there is an equation matching the declaration
   */
  syn boolean ASTDecl.hasInhEqForDecl(String childName, String signature) {
    if (defaultInhEqs().contains(signature)) {
      return true;
    }
    Collection<String> componentEqs = componentInhEqs().get(childName);
    return componentEqs != null && componentEqs.contains(signature);
  }

  /**
   * Check missing inherited equations.
   */
  syn lazy Map<ASTDecl, Map<ASTDecl, String>> InhDecl.missingEqs() {
    Map<ASTDecl, Map<ASTDecl, String>> missing = new LinkedHashMap<ASTDecl, Map<ASTDecl, String>>();

    if (hostClass() instanceof ASTDecl) {
      ASTDecl host = (ASTDecl) hostClass();
      Map<ASTDecl, String> map;

      // The visited set is used for caching (also for sub classes).
      Map<ASTDecl, Set<ASTDecl>> visited = new HashMap<ASTDecl, Set<ASTDecl>>();

      // check class
      map = host.missingInhEqs(signature(), host.parents(), visited);
      if (!map.isEmpty()) {
        missing.put(host, map);
      }

      // check sub classes (transitive)
      for (ASTDecl sub: host.subclassesTransitive()) {
        map = sub.missingInhEqs(signature(), sub.parentsIntransitive(), visited);
        if (!map.isEmpty()) {
          missing.put(sub, map);
        }
      }
    }

    return missing;
  }

  /**
   * Checks if an inherited attribute is defined for this class.
   *
   * @return a map of parents of the class for which the attribute is not
   * defined.
   */
  protected Map<ASTDecl, String> ASTDecl.missingInhEqs(String signature,
      Collection<ASTDecl> parentSet, Map<ASTDecl, Set<ASTDecl>> visited) {

    Map<ASTDecl, String> missing = new LinkedHashMap<ASTDecl, String>();
    for (ASTDecl parent: parentSet) {
      if (!parent.hasInhEq(this, signature)) {
        String path = parent.missingInhEqPath(signature, visited);
        if (path != null) {
          missing.put(parent, path + "->" + name());
        }
      }
    }
    return missing;
  }

  /**
   * The recursive search for equations of inherited attributes.
   *
   * @return <code>null</code> if the attribute is defined, otherwise a path in
   * the abstract grammar.
   */
  protected String ASTDecl.missingInhEqPath(String signature,
      Map<ASTDecl, Set<ASTDecl>> visited) {

    if (parents().isEmpty()) {
      return name();
    }
    for (ASTDecl parent: parents()) {
      // Cache for efficiency
      Set<ASTDecl> visitedChildren = visited.get(parent);
      if (visitedChildren == null) {
        visitedChildren = new HashSet<ASTDecl>();
        visited.put(parent, visitedChildren);
      } else if (visitedChildren.contains(this)) {
        break;
      }
      visitedChildren.add(this);

      if (!parent.hasInhEq(this, signature)) {
        String path = parent.missingInhEqPath(signature, visited);
        if (path != null) {
            return path + "->" + name();
        }
      }
    }
    return null;
  }

  syn lazy TypeDecl Component.typeDecl() = grammar().lookup(type());

  protected boolean ASTDecl.hasInhEq(ASTDecl child, String signature) {
    for (Component c: components()) {
      if (child.instanceOf(c.typeDecl())) {
        if (lookupInhEq(signature, c.name()) == null) {
          return false;
        }
      }
    }
    return true;
  }
}

aspect InheritedAttributeCodeGen {
  /**
   * Generate method to compute inherited attribute.
   * @param out
   */
  public void ASTDecl.emitInhEquations(PrintStream out) {
    for (String attrId: inhAttrSet()) {
      emitDefineInhMethod(out, attrId);
    }
  }

  public void ASTDecl.emitDefineInhMethod(PrintStream out, String attrId) {
    Collection<InhEq> inhEqs = inhAttrEqs(attrId);
    assert(inhEqs.iterator().hasNext());

    InhDecl decl = (InhDecl) inhEqs.iterator().next().decl();

    TemplateContext tc = decl.templateContext();
    tc.bind("InhEqClauses", inhEqClauses(decl, inhEqs));
    tc.expand("InhDecl.DefineInhMethod", out);
  }

  private String ASTDecl.inhEqClauses(InhDecl decl, Collection<InhEq> inhEqs) {
    StringBuffer sb = new StringBuffer();

    // have we already generated a component equation?
    boolean hasComponentEq = false;

    for (InhEq equ: inhEqs) {
      if (hasComponentEq) {
        sb.append("else ");
      }

      String rhs = Unparser.unparse(equ.getRHS());

      TemplateContext tc = equ.templateContext();

      if (equ.getRHS() instanceof ASTBlock) {
        // Block
        tc.bind("EvalStmt", rhs);
      } else {
        // Expr
        tc.bind("EvalStmt", "return " + rhs + ";");
      }

      Component c = equ.getComponent();
      if (c != null) {
        if (c instanceof ListComponent) {
          tc.bind("ChildIndexVar", equ.hasIndex() ? equ.getIndex().getName() : "childIndex");
          tc.expand("InhEq.emitListClause", sb);
        } else if (c instanceof OptionalComponent) {
          tc.expand("InhEq.emitOptClause", sb);
        } else {
          tc.expand("InhEq.emitChildClause", sb);
        }
      } else if (equ.getChildName().equals("getChild")) {
        tc.bind("ChildIndexVar", equ.hasIndex() ? equ.getIndex().getName() : "childIndex");
        tc.bind("HasComponentEq", hasComponentEq);
        tc.expand("InhEq.emitDefaultClause", sb);
        // the getChild equation, if present, is always last in the equation list, so we are done now
        return sb.toString();
      } else {
        // NTA child equation
        AttrDecl attrDecl = equ.getChildAttrDecl();
        tc.bind("IsParameterized", attrDecl.isParameterized());
        if (attrDecl.isParameterized()) {
          tc.bind("ChildIndexVar", equ.hasIndex() ? equ.getIndex().getName() : "childIndex");
          tc.bind("AttrSignature", attrDecl.signature());
        }
        tc.expand("InhEq.emitNTAClause", sb);
      }

      hasComponentEq = true;
    }

    // there was no default (getChild) equation
    TemplateContext tc = decl.templateContext();
    tc.bind("HasComponentEq", hasComponentEq);
    tc.bind("HasEqInSupertype", superClass() != null && superClass().hasInhEq(decl.name()));
    tc.expand("InhDecl.fallthrough", sb);
    return sb.toString();
  }

}

