/* Copyright (c) 2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect InheritedAttributes {
  /**
   * Ensure no duplicate inherited declarations.
   * Warnings are reported for duplicate inherited declarations.
   * See AttributeProblems.jrag
   */
  public void Grammar.removeDuplicateInhDecls() {
    for (int i = 0; i < getNumTypeDecl(); ++i) {
      getTypeDecl(i).removeDuplicateInhDecls();
    }
  }

  public void TypeDecl.removeDuplicateInhDecls() {
  }

  public void ASTDecl.removeDuplicateInhDecls() {
    for (int i = 0; i < getNumInhDecl(); ++i) {
      AttrDecl decl = getInhDecl(i);
      if (decl.isDuplicateInhDecl()) {
        getInhDeclList().removeChild(i);
      }
    }
  }
}

aspect FindInheritedEquations {
  syn lazy Map<ASTDecl, Map<ASTDecl, String>> InhDecl.missingEqs() {
    Map<ASTDecl, Map<ASTDecl, String>> missing = new LinkedHashMap<ASTDecl, Map<ASTDecl, String>>();

    if (hostClass() instanceof ASTDecl) {
      ASTDecl host = (ASTDecl) hostClass();
      Map<ASTDecl, String> map;

      // The visited set is used for caching (also for sub classes).
      Map<ASTDecl, Set<ASTDecl>> visited = new HashMap<ASTDecl, Set<ASTDecl>>();

      // check class
      map = host.missingInhEqs(signature(), host.parents(), visited);
      if (!map.isEmpty()) {
        missing.put(host, map);
      }

      // check sub classes (transitive)
      for (ASTDecl sub: host.subclassesTransitive()) {
        map = sub.missingInhEqs(signature(), sub.parentsIntransitive(), visited);
        if (!map.isEmpty()) {
          missing.put(sub, map);
        }
      }
    }

    return missing;
  }

  /**
   * Checks if an inherited attribute is defined for this class.
   *
   * @return a map of parents of the class for which the attribute is not
   * defined.
   */
  protected Map<ASTDecl, String> ASTDecl.missingInhEqs(String signature,
      Collection<ASTDecl> parentSet, Map<ASTDecl, Set<ASTDecl>> visited) {

    Map<ASTDecl, String> missing = new LinkedHashMap<ASTDecl, String>();
    for (ASTDecl parent: parentSet) {
      if (!parent.hasInhEq(this, signature)) {
        String path = parent.missingInhEqPath(signature, visited);
        if (path != null) {
          missing.put(parent, path + "->" + name());
        }
      }
    }
    return missing;
  }

  /**
   * The recursive search for equations of inherited attributes.
   *
   * @return <code>null</code> if the attribute is defined, otherwise a path in
   * the abstract grammar.
   */
  protected String ASTDecl.missingInhEqPath(String signature,
      Map<ASTDecl, Set<ASTDecl>> visited) {

    if (parents().isEmpty()) {
      return name();
    }
    for (ASTDecl parent: parents()) {
      // Cache for efficiency
      Set<ASTDecl> visitedChildren = visited.get(parent);
      if (visitedChildren == null) {
        visitedChildren = new HashSet<ASTDecl>();
        visited.put(parent, visitedChildren);
      } else if (visitedChildren.contains(this)) {
        break;
      }
      visitedChildren.add(this);

      if (!parent.hasInhEq(this, signature)) {
        String path = parent.missingInhEqPath(signature, visited);
        if (path != null) {
            return path + "->" + name();
        }
      }
    }
    return null;
  }

  syn lazy TypeDecl Components.typeDecl() = grammar().lookup(type());

  protected boolean ASTDecl.hasInhEq(ASTDecl child, String signature) {
    for (Iterator children = getComponents(); children.hasNext(); ) {
      Components c = (Components)children.next();
      if (child.instanceOf(c.typeDecl())) {
        if (lookupInhEq(signature, c.name()) == null) {
          return false;
        }
      }
    }
    return true;
  }
}

aspect InheritedAttributeCodeGen {
  /**
   * Generate method to compute inherited attribute.
   * @param out
   */
  public void ASTDecl.emitInhEquations(PrintStream out) {
    String ind = grammar().ind;
    String ind2 = grammar().ind(2);
    String ind3 = grammar().ind(3);
    for(Iterator idIter = inhAttrSet(); idIter.hasNext(); ) {
      String attrId = (String)idIter.next();
      Iterator iter = inhAttrEqs(attrId);
      InhEq equ = (InhEq)iter.next();
      InhDecl decl = (InhDecl)equ.decl();

      out.println(ind + "/**");
      out.println(ind + " * " + equ.declaredat());
      out.println(ind + " * @apilevel internal");
      out.println(ind + " */");
      out.println(ind + "public " + decl.getType() + " Define_" + decl.getTypeInSignature() + "_" + decl.attributeName() + "(" + decl.interfaceParametersDecl() + ") {");

      // have we already generated a component equation?
      boolean hasComponentEq = false;
      boolean hasGetChildEq = false;

      do {
        out.print(ind2);
        if (hasComponentEq) {
          out.print("else ");
        }
        hasComponentEq = true;

        Components c = equ.getComponents();
        if(c instanceof ListComponents) {
          out.print("if (caller == get" + equ.childName() + "ListNoTransform())");
        }
        else if(c instanceof OptionalComponent) {
          out.print("if (caller == get" + equ.childName() + "OptNoTransform())");
        }
        else if(c != null) {
          out.print("if (caller == get" + equ.childName() + "NoTransform())");
        }
        else if(equ.getChildName().equals("getChild")) {
          hasGetChildEq = true;
        }
        else {
          AttrDecl attrDecl = equ.getChildAttrDecl();
          if(attrDecl.getNumParameter() == 0)
            out.print("if (caller == " + equ.childName() + "_value)");
          else
            out.print("if (caller == " + attrDecl.signature() + "_list)");
        }

        if(c instanceof ListComponents) {
          String childIndex = equ.hasIndex() ? equ.getIndex().getName() : "childIndex";
          if(equ.getRHS() instanceof ASTBlock) { // Block
            out.println(" {");
            out.println(ind3 + "int " + childIndex + " = caller.getIndexOfChild(child);");
            out.println(ind3 + Unparser.unparse(equ.getRHS()));
            out.println(ind2 + "}");
          }
          else { // Expr
            out.println(" {");
            out.println(ind3 + "int " + childIndex + " = caller.getIndexOfChild(child);");
            out.println(ind3 + "return " + Unparser.unparse(equ.getRHS()) + ";");
            out.println(ind2 + "}");
          }

        }
        else if(c != null) {
          if(equ.getRHS() instanceof ASTBlock) { // Block
            out.println(Unparser.unparse(equ.getRHS()));
          }
          else { // Expr
            out.println(" {");
            out.println(ind3 + "return " + Unparser.unparse(equ.getRHS()) + ";");
            out.println(ind2 + "}");
          }
        }
        else if(equ.getChildName().equals("getChild")) {
          String childIndex = equ.hasIndex() ? equ.getIndex().getName() : "childIndex";
          if(equ.getRHS() instanceof ASTBlock) { // Block
            out.println(" {");
            out.println(ind3 + "int " + childIndex + " = this.getIndexOfChild(caller);");
            out.println(Unparser.unparse(equ.getRHS()));
            out.println(ind2 + "}");
          }
          else { // Expr
            out.println(" {");
            out.println(ind3 + "int " + childIndex + " = this.getIndexOfChild(caller);");
            out.println(ind3 + "return " + Unparser.unparse(equ.getRHS()) + ";");
            out.println(ind2 + "}");
          }
        }
        else {
          AttrDecl attrDecl = equ.getChildAttrDecl();
          out.println(" {");
          if(attrDecl.getNumParameter() != 0) {
            String childIndex = equ.hasIndex() ? equ.getIndex().getName() : "childIndex";
            out.println(ind3 + "int " + childIndex + " = caller.getIndexOfChild(child);");
          }
          if(equ.getRHS() instanceof ASTBlock) { // Block
            out.println(Unparser.unparse(equ.getRHS()));
          } else { // Expr
            out.println(ind3 + "return " + Unparser.unparse(equ.getRHS()) + ";");
          }
          out.println(ind2 + "}");
        }

        if(iter.hasNext()) {
          equ = (InhEq)iter.next();
        }
        else {
          equ = null;
        }
      } while(equ != null);

      if (!hasGetChildEq) {
        out.print(ind2);
        if (hasComponentEq) {
          out.println("else {");
        }
        if(superClass() != null && superClass().hasInhEq(decl.name())) {
          out.println(ind3 + "return super.Define_" + decl.getTypeInSignature() + "_" + decl.attributeName() + "(" + decl.interfaceParameters() + ");");
          out.println(ind2 + "}");
        }
        else {
          // TODO: INH
          out.print(decl.inhDebugString());
          out.println(ind3 +   "return getParent().Define_" + decl.getTypeInSignature() + "_" + decl.attributeName() + "(" + decl.interfaceParametersContinue() + ");");
          out.println(ind2 + "}");
        }
      }
      out.println(ind + "}");
    }
  }
}
