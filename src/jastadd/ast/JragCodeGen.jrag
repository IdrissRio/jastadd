/* Copyright (c) 2005-2016, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import java.util.*;
import java.io.*;

import org.jastadd.ast.AST.*;
import org.jastadd.jrag.*;

import org.jastadd.jrag.AST.ASTCompilationUnit;
import org.jastadd.jrag.AST.ASTBlock;

import org.jastadd.JastAdd;

aspect AttributeKind {
  syn String AttrDecl.attributeKind();

  eq SynDecl.attributeKind() = isNTA() ? "syn nta" : "syn";

  eq InhDecl.attributeKind() = "inh";

  eq CollDecl.attributeKind() = "coll";

  eq CircularRewriteDecl.attributeKind() = "syn nta";
}

aspect JragCodeGen {

  /**
   * When generating concurrent evaluation code, the collection survey phase needs to
   * be synchronized for parallelized collection attributes.
   *
   * <p>Note: collection attributes are not parallelized unless specified by annotation.
   */
  syn String AttrDecl.synchronizedModifier() = "";
  eq CollDecl.synchronizedModifier() =
      config().concurrentEval() && (parallel() || parallelSurvey()) ? "synchronized " : "";

  /**
   * Generate the declaredat documentation tag. If no file name is available
   * then no tag is generated.
   *
   * @param fileName the name of the source file containing the declaration
   * @param line the line number in the source file where the declaration occurs
   * @return the declaredat tag
   */
  public static String ASTNode.declaredat(String fileName, int line) {
    fileName = fileName.trim();
    if (fileName.length() == 0) {
      return "";
    } else {
      return "@declaredat " + sourceLocation(fileName, line);
    }
  }
  
  /**
   * @return a formatted source location with escaped filename suitable to be
   * used in documentation comments.
   */
  protected static String ASTNode.sourceLocation(String fileName, int line) {
    // Replace backslashes in the file path with slashes in order to avoid
    // unintentional (and possibly illegal) unicode escape sequences.
    return String.format("%s:%d", escapedFileName(fileName), line);
  }

  syn String AttrDecl.declaredat() = ASTNode.declaredat(getFileName(), getStartLine());

  syn String AttrEq.declaredat() = ASTNode.declaredat(getFileName(), getStartLine());

  syn String Rewrite.declaredat() = ASTNode.declaredat(getFileName(), getStartLine());

  syn String Rewrite.sourceLocation() = ASTNode.sourceLocation(getFileName(), getStartLine());

  /**
   * Decides if this attribute should be memoized.
   */
  syn boolean AttrDecl.isMemoized() {
    if (declaredNTA() || isCircular()) {
      // NTAs and circular attributes are always cached.
      return true;
    }
    // Check the cache mode:
    switch (getCacheMode()) {
      case DEFAULT:
        return config().cacheAll() || isNTA();
      case LAZY:
        return !config().cacheNone() || isNTA();
      case CACHED:
        return true;
      case UNCACHED:
        return isNTA();
    }
    // Only if there is a missing switch case:
    throw new Error("unhandled cache mode");
  }


  public String Grammar.genImportsList() {
    Set imports = new LinkedHashSet();
    if (config().concurrentEval()) {
      // Extra import declarations needed for concurrent code generation.
      imports.add("import java.util.concurrent.atomic.AtomicInteger;");
      imports.add("import java.util.concurrent.atomic.AtomicReference;");
      imports.add("import java.util.concurrent.Future;");
      imports.add("import java.util.concurrent.Executors;");
      imports.add("import java.util.concurrent.ExecutorService;");
      imports.add("import java.util.concurrent.ExecutionException;");
      imports.add("import java.util.concurrent.Callable;");
      imports.add("import java.util.concurrent.ConcurrentMap;");
      imports.add("import java.util.concurrent.ConcurrentHashMap;");
      imports.add("import java.util.ArrayList;");
      imports.add("import java.util.LinkedList;");
      imports.add("import java.util.Collection;");
    }
    for (org.jastadd.jrag.AST.ASTCompilationUnit u : compilationUnits) {
      imports.addAll(Unparser.getImports(u));
    }
    StringBuilder buf = new StringBuilder();
    for (Iterator iter = imports.iterator(); iter.hasNext(); ) {
      buf.append(iter.next());
      buf.append('\n');
    }
    return buf.toString();
  }

  public void InterfaceDecl.emitMembers(PrintStream out) {
    for (ClassBodyObject obj : classBodyDecls) {
      org.jastadd.jrag.AST.SimpleNode n = obj.node;
      if (n instanceof org.jastadd.jrag.AST.ASTAspectMethodDeclaration) {
        try {
          StringBuffer buf = new StringBuffer();
          org.jastadd.jrag.AST.ASTAspectMethodDeclaration decl =
              (org.jastadd.jrag.AST.ASTAspectMethodDeclaration) n;
          ClassBodyDeclUnparser.unparseAbstract(decl, buf);
          out.print(buf);
        } catch (Exception e) {
          System.err.println("Error generating " + obj.signature() + " in " + name());
          e.printStackTrace();
        }
      } else if (n instanceof org.jastadd.jrag.AST.ASTAspectRefineMethodDeclaration) {
        try {
          StringBuffer buf = new StringBuffer();
          org.jastadd.jrag.AST.ASTAspectRefineMethodDeclaration decl =
              (org.jastadd.jrag.AST.ASTAspectRefineMethodDeclaration) n;
          ClassBodyDeclUnparser.unparseAbstract(decl, buf);
          out.print(buf);
        } catch (Exception e) {
          System.err.println("Error generating " + obj.signature() + " in " + name());
          e.printStackTrace();
        }
      } else if (n instanceof org.jastadd.jrag.AST.ASTBlock) {
        // Do not emit refined implementations.
      } else {
        if (!obj.comments.equals("")) {
          out.print(obj.comments + " ");
        }
        out.print(obj.modifiers());
        StringBuffer buf = new StringBuffer();
        n.jjtAccept(new ClassBodyDeclUnparser(), buf);
        out.print(buf.toString());
      }
      out.println();
    }
  }

  public void TypeDecl.emitMembers(PrintStream out) { }

  public void ASTDecl.emitMembers(PrintStream out) {
    for (ClassBodyObject obj : classBodyDecls) {
      org.jastadd.jrag.AST.SimpleNode node = obj.node;
      out.print(obj.modifiers());
      out.println(docComment(obj));
      out.print(config().indent);
      StringBuffer buf = new StringBuffer();
      node.jjtAccept(new ClassBodyDeclUnparser(), buf);
      out.print(buf.toString());
      out.println();
    }
  }

  public void TypeDecl.emitAbstractSyns(PrintStream out) {
    for (AttrDecl attr : synDecls()) {
      attr.emitSynDecl(out);
    }
  }

  public void AttrDecl.emitSynDecl(PrintStream out) {
    templateContext().expand("AttrDecl.synDecl", out);
  }

  public void AttrDecl.emitAbstractSynDecl(PrintStream out) {
    templateContext().expand("AttrDecl.abstractSynDecl", out);
  }

  /**
   * Generate abstract method declarations for synthesized attributes
   * that lack an equation.
   */
  public void ASTDecl.emitAbstractSyns(PrintStream out) {
    for (AttrDecl attr : synDecls()) {
      boolean equ = false;
      for (int j = 0; j < getNumSynEq(); j++) {
        if (getSynEq(j).signature().equals(attr.signature())) {
          equ = true;
        }
      }
      if (!equ) {
        attr.emitAbstractSynDecl(out);
      }
    }
  }

  syn String AttrEq.attributeKind() = decl().attributeKind();

  public String AttrDecl.initLazyMaps() {
    StringBuilder sb = new StringBuilder();
    if (config().lazyMaps()) {
      if (!isCircular()) {
        if (getNumParameter() != 0 && config().visitCheckEnabled() && config().legacyRewrite()) {
          sb.append(String.format("if (%s_visited == null) %s_visited = %s;\n",
              signature(), signature(), config().createDefaultMap()));
        } else if (getNumParameter() != 0 && config().visitCheckEnabled()) {
          sb.append(String.format("if (%s_visited == null) %s_visited = %s;\n",
              signature(), signature(), config().createDefaultSet()));
        }
        if (getNumParameter() != 0 && isMemoized() && !simpleCacheCheck()) {
          sb.append(String.format("if (%s_computed == null) %s_computed = %s;\n",
              signature(), signature(), config().createDefaultMap()));
        }
      }
      if (getNumParameter() != 0 && (isMemoized() || isCircular())) {
        sb.append(String.format("if (%s_values == null) %s_values = %s;\n",
            signature(), signature(), config().createDefaultMap()));
      }
    }
    return sb.toString();
  }

  public void AttrDecl.emitVisitedDeclarations(PrintStream out) {
    if (isCircular()) {
      templateContext().expand("AttrDecl.cycleDeclaration", out);
    } else {
      if (config().visitCheckEnabled()) {
        templateContext().expand("AttrDecl.visitedDeclaration", out);
      }
      if (config().componentCheck()) {
        templateContext().expand("AttrDecl.componentCheckDeclaration", out);
      }
    }
  }

  public void AttrDecl.emitCacheDeclarations(PrintStream out) {
    templateContext().expand("AttrDecl.cacheDeclarations", out);
  }

  /**
   * @return {@code true} if the attribute is declared as NTA in the aspect file
   */
  syn boolean AttrDecl.declaredNTA() = false;

  eq SynDecl.declaredNTA() = getNTA();

  eq InhDecl.declaredNTA() = getNTA();

  public static String ASTNode.boxedType(String type) {
    if (type.equals("int")) {
      return "Integer";
    } else if (type.equals("short")) {
      return "Short";
    } else if (type.equals("long")) {
      return "Long";
    } else if (type.equals("float")) {
      return "Float";
    } else if (type.equals("double")) {
      return "Double";
    } else if (type.equals("boolean")) {
      return "Boolean";
    } else if (type.equals("char")) {
      return "Character";
    } else if (type.equals("byte")) {
      return "Byte";
    } else {
      return type;
    }
  }

  public String ASTNode.fromReferenceType(String value, String type) {
    return "((" + boxedType(type) + ")" + value + ")";
  }

  syn String AttrDecl.boxedType() = boxedType(getType());

  syn boolean AttrDecl.isPrimitive() = isPrimitiveType(getType());

  static public boolean AttrDecl.isPrimitiveType(String type) {
    return type.equals("int") || type.equals("short") || type.equals("long")
        || type.equals("float") || type.equals("double") || type.equals("boolean")
        || type.equals("char") || type.equals("byte");
  }

  syn boolean TokenComponent.isPrimitive() = AttrDecl.isPrimitiveType(getTokenId().getTYPE());

  /**
   * @return {@code true} if this attribute returns only non-nullable values.
   */
  syn boolean AttrDecl.isNonNull() = isPrimitive(); // || declaredNonNull(); // TODO: implement annotation.

  /**
   * Returns {@code true} if the result of this attribute is always identical
   * when evaluated multiple times. This is true for primitive attributes and
   * pure reference attributes, but not for attributes that construct a new
   * object as the result.
   */
  syn boolean AttrDecl.isIdentityComparable() =
      !(declaredNTA() || isAttrNTA()) && (isPrimitive() || isReferenceAttribute());

  /**
   * @return {@code true} if the return type is among the AST node types in the abstract grammar.
   */
  syn boolean AttrDecl.isReferenceAttribute() {
    if (!isPrimitive()) {
      TypeDecl typeDecl = grammar().lookup(getType());
      if (typeDecl instanceof ASTDecl) {
        return true;
      }
    }
    return false;
  }

  public String AttrDecl.parameterStructure() {
    if (!isParameterized() || (!isMemoized() && !config().visitCheckEnabled())) {
      return "";
    } else if (getNumParameter() == 1) {
      return "Object _parameters = " + getParameter(0).getName() + ";\n";
    } else {
      StringBuilder sb = new StringBuilder();
      sb.append("java.util.List _parameters = new java.util.ArrayList("
          + getNumParameter() + ");\n");
      for (int i = 0; i < getNumParameter(); i++) {
        sb.append("_parameters.add(" + getParameter(i).getName() + ");\n");
      }
      return sb.toString();
    }
  }

  /**
   * Generate the state variable if needed.
   */
  public String AttrDecl.lazyState() {
    if (isMemoized()) {
      return config().stateClassName() + " state = state();";
    } else {
      return "";
    }
  }

  public String AttrDecl.cacheStoreCondition() {
    // This cache store condition is only used with the old (legacy) rewrite implementation.
    // It is kept for backward compatibility.
    if (!config().rewriteEnabled() || getFinal()) {
      return "true";
    } else {
      return "isFinal && _boundaries == state().boundariesCrossed";
    }
  }

  syn boolean AttrEq.hasComputeBlock() = true;

  eq SynEq.hasComputeBlock() = getRHS() instanceof ASTBlock;

  /**
   * @return Compute method without "_compute" suffix
   */
  public void AttrDecl.emitInlineComputeWithTry(PrintStream out, AttrEq equ) {
    TemplateContext tt = templateContext();
    tt.bind("ParamDecl", equ.parametersDecl());
    tt.bind("ComputeBody", equ.computeCode());
    tt.expand("AttrDecl.emitInlineComputeWithTry", out);
  }

  /**
   * @return Compute method without "_compute" suffix
   */
  public void AttrDecl.emitInlineComputeWithoutTry(PrintStream out, AttrEq equ) {
    TemplateContext tt = templateContext();
    tt.bind("ParamDecl", equ.parametersDecl());
    tt.bind("ComputeBody", equ.computeCode());
    tt.expand("AttrDecl.emitInlineComputeWithoutTry", out);
  }

  syn String AttrEq.computeCode() = "";

  eq SynEq.computeCode() = Unparser.unparse(getRHS());

  /**
   * Generate code for the method to compute this attribute
   */
  public void AttrEq.emitComputeMethod(PrintStream out) {
  }

  public void SynEq.emitComputeMethod(PrintStream out) {
    templateContext().expand("SynEq.emitComputeMethod", out);
  }

  public boolean TypeDecl.hasLazySynEqFor(AttrDecl attr) {
    if (attr instanceof SynDecl) {
      SynEq synEq = lookupSynEq(attr.signature());
      return synEq != null && synEq.decl().isMemoized();
    }
    return false;
  }

  // TODO(joqvist): remove this.
  syn String AttrDecl.cycleLimitCheck() = "";

  public void AttrDecl.emitEquation(PrintStream out, String paramDecl) {
    TemplateContext tt = templateContext();
    tt.bind("ParamDecl", paramDecl);
    tt.expand("AttrDecl.emitEquation", out);
  }

  public void AttrDecl.emitCircularEquationNoParams(PrintStream out) {
    TemplateContext tt = templateContext();
    tt.bind("ChangeCondition", valueComparisonExpr("new_" + signature()
        + "_value", signature() + "_value"));
    tt.bind("BottomValue", getBottomValue());
    tt.bind("TracePrintReturnNewValue", tracePrintReturnNewValue(signature() + "_value"));
    tt.bind("TracePrintReturnPreviousValue", tracePrintReturnPreviousValue(signature() + "_value"));
    tt.expand("AttrDecl.circularEquation:unparameterized", out);
  }

  public void AttrDecl.emitCircularEquationWithParams(PrintStream out, String paramDecl) {
    TemplateContext tt = templateContext();
    tt.bind("BottomValue", getBottomValue());
    tt.bind("ChangeCondition", valueComparisonExpr("new_" + signature() + "_value",
        fromReferenceType("_value.value", getType())));
    tt.bind("ParamDecl", paramDecl);
    tt.bind("TracePrintReturnNewValue", tracePrintReturnNewValue("new_" + signature() + "_value"));
    tt.bind("TracePrintReturnPreviousValue", tracePrintReturnPreviousValue(
          fromReferenceType(signature() + "_values.get(_parameters)" , getType())));
    tt.expand("AttrDecl.circularEquation:parameterized", out);
  }

  /**
   * @return {@code true} if this attribute equation can be inlined in the
   * attribute method
   */
  syn boolean AttrEq.canInlineExpression() = false;

  eq SynEq.canInlineExpression() = !hasComputeBlock();

  /**
   * @return {@code true} if this attribute code block can be inlined in the
   * attribute method
   */
  syn boolean AttrEq.canInlineBlock(AttrDecl decl) = false;

  eq SynEq.canInlineBlock(AttrDecl decl) =
      hasComputeBlock() && !decl.isMemoized();

  /**
   * Generates the method to compute an attribute with a specific equation
   * @param out
   * @param equ the equation to generate code for
   */
  public void AttrDecl.emitAttrEquation(PrintStream out, AttrEq equ) {
    if (equ.canInlineExpression()) {
      if (isCircular()) {
        templateContext().bind("CircularComputeRhs", equ.computeCode());
      } else {
        templateContext().bind("ComputeRhs", equ.computeCode());
      }
      emitAttrEquation(out, equ.parametersDecl());
    } else if (equ.canInlineBlock(this)) {
      if (!declaredNTA() && !config().traceCompute()
          && !config().visitCheckEnabled()
          && !config().componentCheck()) {
        emitInlineComputeWithoutTry(out, equ);
      } else {
        emitInlineComputeWithTry(out, equ);
      }
    } else {
      if (isCircular()) {
        templateContext().bind("CircularComputeRhs", circularComputeRhs());
      } else {
        templateContext().bind("ComputeRhs", computeRhs());
      }
      emitAttrEquation(out, equ.parametersDecl());
      equ.emitComputeMethod(out);
    }
  }

  /**
   * Generates the Java method to evaluate an attribute.
   * @param out
   */
  public void AttrDecl.emitAttrEquation(PrintStream out) {
    if (isCircular()) {
      templateContext().bind("CircularComputeRhs", circularComputeRhs());
    } else {
      templateContext().bind("ComputeRhs", computeRhs());
    }
    emitAttrEquation(out, parametersDecl());
  }

  /**
   * Generates the Java method to evaluate an attribute.
   * @param out
   * @param paramDecl
   */
  public void AttrDecl.emitAttrEquation(PrintStream out, String paramDecl) {
    if (isCircular()) {
      TemplateContext tt = templateContext();
      if (getNumParameter() == 0) {
        emitCircularEquationNoParams(out);
      } else {
        emitCircularEquationWithParams(out, paramDecl);
      }
    } else {
      emitEquation(out, paramDecl);
    }
  }

  syn boolean AttrDecl.isParameterized() = getNumParameter() != 0;

  /**
   * Generate code to test if two attribute values differ based on the type of the attribute.
   */
  public String AttrDecl.valueComparisonExpr(String newValue, String oldValue) {
    if (isPrimitive()) {
      return String.format("%s != %s", oldValue, newValue);
    } else if (isCircularRewrite()) {
      return String.format("%s != %s || %s.canRewrite()", oldValue, newValue, newValue);
    } else {
      return String.format("!AttributeValue.equals(%s, %s)",
          oldValue, newValue);
    }
  }

  public void ASTDecl.emitCacheDeclarations(PrintStream out, AttrDecl attr) {
    // All equations of an attribute need cache and visited declarations.  If
    // an equation lacks its own visited declaration and calls an overriden
    // equation it can cause a circularity exception.
    attr.emitVisitedDeclarations(out);
    if (!attr.isCircular()) {
      attr.emitResetMethod(out);
      if (attr.isMemoized()) {
        attr.emitCacheDeclarations(out);
      }
    } else if (attr.getNumParameter() == 0) {
      // Non-parameterized, circular attribute.
      attr.emitResetMethod(out);
      attr.emitCacheDeclarations(out);
    } else {
      // Parameterized, circular attribute.
      attr.emitResetMethod(out);
      if (attr.declaredNTA() || (config().concurrentEval() && attr.isCircular())) {
        attr.emitCacheDeclarations(out);
      } else if (config().lazyMaps()) {
        out.format("%sprotected %s %s_values;%n",
            config().indent, config().typeDefaultMap(), attr.signature());
      } else {
        out.format("%sprotected %s %s_values = %s;%n", config().indent,
            config().typeDefaultMap(), attr.signature(), config().createDefaultMap());
      }
    }
  }

  syn String AttrEq.getType() = decl().getType();

  public void ASTDecl.emitSynEquations(PrintStream out) {
    for (int i = 0; i < getNumSynEq(); i++) {
       AttrEq equ = getSynEq(i);
       AttrDecl attr = equ.decl();
       emitCacheDeclarations(out, attr);
       attr.emitAttrEquation(out, equ);
    }
  }


  /**
   * @return {@code true} if this attribute matches an Opt NTA component declared
   * in the grammar
   */
  public boolean AttrDecl.isOptNTA() {
    if (!getName().startsWith("get")) {
      return false;
    }
    String attrName = getName().substring(3);
    TypeDecl c = hostClass();
    while (c != null) {
      for (Component comp : c.components()) {
        if (comp.name().equals(attrName) && comp instanceof OptionalComponentNTA) {
          return true;
        }
        if (attrName.equals(comp.name() + "Opt") && comp instanceof OptionalComponentNTA) {
          return true;
        }
      }
      c = c instanceof ASTDecl ? ((ASTDecl)c).superClass() : null;
    }
    return false;
  }

  /**
   * @return {@code true} if this attribute matches a List NTA component declared
   * in the grammar
   */
  public boolean AttrDecl.isListNTA() {
    if (!getName().startsWith("get")) {
      return false;
    }
    String attrName = getName().substring(3);
    TypeDecl c = hostClass();
    while (c != null) {
      for (Component comp : c.components()) {
        if (comp.name().equals(attrName) && comp instanceof ListComponentNTA) {
          return true;
        }
        if (attrName.equals(comp.name() + "List") && comp instanceof ListComponentNTA) {
          return true;
        }
      }
      c = c instanceof ASTDecl ? ((ASTDecl)c).superClass() : null;
    }
    return false;
  }

  /**
   * @return {@code true} if this attribute matches an NTA component declared
   * in the grammar
   */
  public boolean AttrDecl.isNTA() {
    return false;
  }

  /**
   * @return {@code true} if there is a corresponding NTA component.
   * Note: does not return true if the attribute is declared only with the
   * nta keyword! Use getNTA to check for the nta keyword.
   */
  public boolean SynDecl.isNTA() {
    return findCorrespondingNTA() != null;
  }

  /**
   * @return the index of the NTA in the child array
   */
  public int AttrDecl.indexNTAchild() {
    Component comp = findCorrespondingNTA();
    TypeDecl c = hostClass();
    while (c != null) {
      int index = 0;
      for (Component next : c.components()) {
        if (next == comp) {
          return index;
        }
        if (!(next instanceof TokenComponent)) {
          index++;
        }
      }
      c = c instanceof ASTDecl ? ((ASTDecl)c).superClass() : null;
    }
    return -1;
  }

  public Component AttrDecl.findCorrespondingNTA() {
    if (!getName().startsWith("get"))
      return null;
    String attrName = getName().substring(3);
    TypeDecl c = hostClass();
    while (c != null) {
      for (Component comp : c.components()) {
        if (comp.name().equals(attrName) && (
            comp instanceof OptionalComponentNTA
            || comp instanceof TokenComponentNTA
            || comp instanceof AggregateComponentNTA )) {
          return comp;
        }
        if (attrName.equals(comp.name() + "Opt") && comp instanceof OptionalComponentNTA) {
          return comp;
        }
        if (attrName.equals(comp.name() + "List") && comp instanceof ListComponentNTA) {
          return comp;
        }
      }
      c = c instanceof ASTDecl ? ((ASTDecl)c).superClass() : null;
    }
    return null;
  }

  public String AttrDecl.higherOrderAttributeCode() {
    return "";
  }

  public String SynDecl.higherOrderAttributeCode() {
    Component comp = findCorrespondingNTA();
    if (comp != null) { // Check for component NTA.
      if (declaredNTA()) {
        System.err.println("Warning: the NTA equation " + name()
            + " was affected by a bug causing the equation value to be discarded! "
            + "(fixed since version 2.1.11)");
      }
      String attrName = getName().substring(3);
      if (comp.name().equals(attrName) && comp instanceof AggregateComponentNTA
          || attrName.equals(comp.name() + "Opt") && comp instanceof OptionalComponentNTA
          || attrName.equals(comp.name() + "List") && comp instanceof ListComponentNTA) {
        if (config().concurrentEval()) {
          return "setChild(_result, get" + attrName + "ChildPosition());\n";
        } else {
          return "setChild(" + signature() + "_value, get" + attrName + "ChildPosition());\n";
        }
      }
      // Token components are not stored in child vector.
      return "";
    } else if (declaredNTA()) { // Check if attribute equation is declared NTA.
      if (config().rewriteEnabled()) {
        return templateContext().expand("SynDecl.higherOrderAttributeCode:rewritesEnabled");
      } else {
        return templateContext().expand("SynDecl.higherOrderAttributeCode:norewrite");
      }
    }
    return "";
  }

  public void TypeDecl.emitInhDeclarations(PrintStream out) {
    for (int i = 0; i < getNumInhDecl(); i++) {
       AttrDecl attr = getInhDecl(i);
       attr.emitInhDecl(out);
    }
  }

  public void AttrDecl.emitInhDecl(PrintStream out) {
    templateContext().expand("AttrDecl.inhDecl", out);
  }

  public void ASTDecl.emitInhDeclarations(PrintStream out) {
    for (int i = 0; i < getNumInhDecl(); i++) {
       InhDecl attr = getInhDecl(i);
       attr.emitAttrEquation(out);
       emitCacheDeclarations(out, attr);
    }
  }

  syn boolean TypeDecl.hasInhEq(String attrName) {
    for (int i = 0; i < getNumInhEq(); i++) {
      InhEq equ = getInhEq(i);
      if (equ.getName().equals(attrName)) {
        return true;
      }
    }
    return false;
  }

  eq ASTDecl.hasInhEq(String attrName) =
      super.hasInhEq(attrName) || superClass() != null && superClass().hasInhEq(attrName);

  syn Component InhEq.getComponent() {
    TypeDecl c = hostClass();
    if (c != null) {
      return c.component(childName());
    }
    return  null;
  }

  syn String InhEq.childName() =
      getChildName().startsWith("get") ? getChildName().substring(3) : getChildName();

  /**
   * Lookup NTA child corresponding to this inherited equation.
   */
  syn AttrDecl InhEq.getChildAttrDecl() {
    AttrDecl decl = hostClass().lookupSynDeclPrefix(childName());
    if (decl == null) {
      decl = hostClass().lookupInhDeclPrefix(childName());
    }
    return decl;
  }

  syn SynDecl TypeDecl.lookupSynDeclPrefix(String signature) {
    for (SynDecl decl : synDecls()) {
      if (decl.signature().equals(signature)
          || decl.signature().startsWith(signature + "_")) {
        return decl;
      }
    }
    return null;
  }

  eq ASTDecl.lookupSynDeclPrefix(String signature) {
    SynDecl decl = super.lookupSynDeclPrefix(signature);
    if (decl != null || superClass() == null) {
      return decl;
    }
    return superClass().lookupSynDeclPrefix(signature);
  }

  syn InhDecl TypeDecl.lookupInhDeclPrefix(String signature) {
    for (int i = 0; i < getNumInhDecl(); i++) {
      if (getInhDecl(i).signature().equals(signature)
          || getInhDecl(i).signature().startsWith(signature + "_")) {
        return getInhDecl(i);
      }
    }
    return null;
  }

  syn InhDecl ASTDecl.lookupInhDeclPrefix(String signature) {
    InhDecl decl = super.lookupInhDeclPrefix(signature);
    if (decl != null || superClass() == null) {
      return decl;
    }
    return superClass().lookupInhDeclPrefix(signature);
  }

  public Iterator Grammar.inhAttrSet() {
    return inhEqMap().keySet().iterator();
  }

  syn lazy HashMap Grammar.inhEqMap() {
    HashMap map = new LinkedHashMap();
    for (int i = 0; i < getNumTypeDecl(); i++) {
      if (getTypeDecl(i) instanceof ASTDecl) {
        map.putAll(((ASTDecl)getTypeDecl(i)).inhEqMap());
      }
    }
    return map;
  }

  syn lazy String Rewrite.aspectName() = getAspectName();

  public void AttrEq.emitDefaultInhMethod(PrintStream out) {
    templateContext().expand("InhEq.defaultInhDefineMethod", out);
  }

  //  TODO: INH
  public void ASTDecl.emitInhEqSignatures(PrintStream out) {
    if (name().equals(config().astNodeType())) {
      for (Iterator iter = grammar().inhEqMap().entrySet().iterator(); iter.hasNext(); ) {
        java.util.Map.Entry entry = (java.util.Map.Entry)iter.next();
        String attrId = (String)entry.getKey();
        AttrEq attr = (AttrEq)((LinkedList)entry.getValue()).get(0);
        if (!hasInhEq(attr.decl().name())) {
          attr.emitDefaultInhMethod(out);
        }
      }
    }
  }

  /**
   * @return {@code true} if the attribute declaration corresponds to a
   * non-token NTA component
   */
  syn boolean AttrDecl.isAttrNTA() = isNTA() && !(findCorrespondingNTA() instanceof TokenComponent);
}

aspect Compute {
  syn String AttrDecl.computeRhs() = name() + "_compute(" + parameters() + ")";

  eq InhDecl.computeRhs() =
      "getParent().Define_" + name() + "(this, null" + inhParametersTail() + ")";

  syn String AttrDecl.computeLhs() {
    if (isMemoized() && getNumParameter() == 0) {
      return signature() + "_value";
    } else {
      return getType() + " " + signature() + "_value";
    }
  }

  syn String AttrDecl.circularComputeRhs() = computeRhs();

  eq CollDecl.circularComputeRhs() = String.format("combine_%s_contributions(%s)",
      signature(), getBottomValue());

  syn boolean AttrDecl.simpleCacheCheck() =
      !config().safeLazy() || isCircular() || declaredNTA() || isAttrNTA();

  syn boolean AttrDecl.cacheInCycle() = !simpleCacheCheck();
}
