/* Copyright (c) 2011-2012, Emma SÃ¶derberg <emma.soderberg@cs.lth.se>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Incremental tracing code generation helper methods.
 */
aspect IncrementalTracking {

  // ES_2011-09-22: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTracking() {
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelParam) {
      if (getNumParameter() == 0) {
        buf.append(ind(2) + "if (#NAME#_handler == null) {\n");
        buf.append(ind(3) +   "#NAME#_handler = new ASTNode$DepGraphNode(this, \"#NAME#\", null);\n");
        buf.append(ind(2) + "}\n");
        buf.append(ind(2) + "state().addHandlerDepTo(#NAME#_handler);\n");
      } else {
        buf.append(ind(2) + "if (!#NAME#_handler.containsKey(_parameters)) {\n");
        buf.append(ind(3) +   "#NAME#_handler.put(_parameters, new ASTNode$DepGraphNode(this," +
              " \"#NAME#\", _parameters));\n");
        buf.append(ind(2) + "}\n");
        buf.append(ind(2) + "state().addHandlerDepTo((ASTNode$DepGraphNode)#NAME#_handler.get(_parameters));\n");
      }
    }
    if (grammar().incrementalLevelAttr) {
      buf.append(ind(2) + "if (#NAME#_handler == null) {\n");
      buf.append(ind(3) +   "#NAME#_handler = new ASTNode$DepGraphNode(this, \"#NAME#\");\n");
      buf.append(ind(2) + "}\n");
      buf.append(ind(2) + "state().addHandlerDepTo(#NAME#_handler);\n");
    }
    if (grammar().incrementalLevelNode) {
      if (getNTA()) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "if (#NAME#_computed)\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(#NAME#_value.handler());\n");
        } else {
          buf.append(ind(2) + "if (#NAME#_values.containsKey(_parameters))\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(((ASTNode)#NAME#_values.get(_parameters)).handler());\n");
        }
      }
    }
    if (grammar().incrementalLevelRegion) {
      if (getNTA()) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "if (#NAME#_computed && #NAME#_value.isRegionRoot())\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(#NAME#_value.handler());\n");
        } else {
          buf.append(ind(2) + "if (#NAME#_values.containsKey(_parameters) && ((ASTNode)#NAME#_values.get(_parameters)).isRegionRoot())\n");
          buf.append(ind(3) +   "state().addHandlerDepTo(((ASTNode)#NAME#_values.get(_parameters)).handler());\n");
        }
      }
    }

    return buf.toString();
  }

  // ES_2011-09-22: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTrackingStackEnter() {
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append(ind(2) + "ASTNode$DepGraphNode tmpHandler = new ASTNode$DepGraphNode(this, \"\", null);\n");
        buf.append(ind(2) + "state().enterAttrStoreEval(tmpHandler);\n");
        //if (getNumParameter() == 0) {
        //  buf.append(ind(2) + "state().enterAttrStoreEval(#NAME#_handler);\n");
        //} else {
        //  buf.append(ind(2) + "state().enterAttrStoreEval(" + 
        //      "(ASTNode$DepGraphNode)#NAME#_handler.get(_parameters));\n");
        //}
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "ASTNode$DepGraphNode tmpHandler = new ASTNode$DepGraphNode(this, \"\");\n");
        buf.append(ind(2) + "state().enterAttrStoreEval(tmpHandler);\n");
        //buf.append(ind(2) + "state().enterAttrStoreEval(#NAME#_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + "// Creating a dummy handler to collect dependencies\n");
          buf.append(ind(2) + "ASTNode$DepGraphNode newHandler = new ASTNode$DepGraphNode(this);\n");
          buf.append(ind(2) + "// Adding dep. to this region because it may be read during the computation\n");
          buf.append(ind(2) + "handler.addDependant(newHandler);\n");
          buf.append(ind(2) + "state().enterAttrStoreEval(newHandler);\n");
        } else {
          buf.append(ind(2) + "ASTNode$DepGraphNode tmpHandler = new ASTNode$DepGraphNode(this);\n");
          buf.append(ind(2) + "state().enterAttrStoreEval(tmpHandler);\n");
          //buf.append(ind(2) + "state().enterAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        //buf.append(ind(2) + "state().IN_ATTR_STORE_EVAL = true;\n");
        buf.append(ind(2) + "state().IN_COMPUTATION++;\n");
      }
    }
    return buf.toString();
  }

  // ES_2012-09-25: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTrackingStackEnter2() {
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "state().enterAttrStoreEval(#NAME#_handler);\n");
        } else {
          buf.append(ind(2) + "state().enterAttrStoreEval(" + 
              "(ASTNode$DepGraphNode)#NAME#_handler.get(_parameters));\n");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "state().enterAttrStoreEval(#NAME#_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + "// Creating a dummy handler to collect dependencies\n");
          buf.append(ind(2) + "ASTNode$DepGraphNode newHandler = new ASTNode$DepGraphNode(this);\n");
          buf.append(ind(2) + "// Adding dep. to this region because it may be read during the computation\n");
          buf.append(ind(2) + "handler.addDependant(newHandler);\n");
          buf.append(ind(2) + "state().enterAttrStoreEval(newHandler);\n");
        } else {
          buf.append(ind(2) + "state().enterAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        //buf.append(ind(2) + "state().IN_ATTR_STORE_EVAL = true;\n");
        buf.append(ind(2) + "state().IN_COMPUTATION++;\n");
      }
    }
    return buf.toString();
  }


  // ES_2011-09-22: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTrackingStackExit() {
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append(ind(2) + "state().exitAttrStoreEval(tmpHandler);\n");
        //if (getNumParameter() == 0) {
        //  buf.append("state().exitAttrStoreEval(#NAME#_handler);\n");
        //} else {
        //  buf.append("state().exitAttrStoreEval(" + 
        //      "(ASTNode$DepGraphNode)#NAME#_handler.get(_parameters));\n");
        //}
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "state().exitAttrStoreEval(tmpHandler);\n");
        //buf.append("state().exitAttrStoreEval(#NAME#_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + "#NAME#_value.handler = newHandler;\n");
          buf.append(ind(2) + "#NAME#_value.handler.fNode = #NAME#_value;\n");
          buf.append(ind(2) + "state().exitAttrStoreEval(#NAME#_value.handler);\n");
          buf.append(ind(2) + "state().addHandlerDepTo(#NAME#_value.handler);\n");
        } else {
          buf.append(ind(2) + "state().exitAttrStoreEval(tmpHandler);\n");
          //buf.append("state().exitAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        buf.append(ind(2)+ "state().IN_COMPUTATION--;\n");
        if (getNTA()) {
          buf.append(ind(2) + "if (#NAME#_value.isRegionRoot()) {\n");
          buf.append(ind(2) + "  ASTNode$DepGraphNode nodeHandler = handler();\n");
          buf.append(ind(2) + "  nodeHandler.addDependant(#NAME#_value.handler());\n");
          buf.append(ind(2) + "  #NAME#_value.handler().addDependant(nodeHandler);\n");
          buf.append(ind(2) + "}\n");
        } 
      }
    }
    return buf.toString();
  }

  // ES_2012-09-25: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTrackingStackExit2() {
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append(ind(2) + "state().exitAttrStoreEval(#NAME#_handler);\n");
        } else {
          buf.append(ind(2) + "state().exitAttrStoreEval(" + 
              "(ASTNode$DepGraphNode)#NAME#_handler.get(_parameters));\n");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append(ind(2) + "state().exitAttrStoreEval(#NAME#_handler);\n");
      }
      if (grammar().incrementalLevelNode) {
        if (getNTA()) {
          buf.append(ind(2) + "#NAME#_value.handler = newHandler;\n");
          buf.append(ind(2) + "#NAME#_value.handler.fNode = #NAME#_value;\n");
          buf.append(ind(2) + "state().exitAttrStoreEval(#NAME#_value.handler);\n");
          buf.append(ind(2) + "state().addHandlerDepTo(#NAME#_value.handler);\n");
        } else {
          buf.append(ind(2) + "state().exitAttrStoreEval(handler);\n");
        }
      }
      if (grammar().incrementalLevelRegion) {
        buf.append(ind(2)+ "state().IN_COMPUTATION--;\n");
        if (getNTA()) {
          buf.append(ind(2) + "if (#NAME#_value.isRegionRoot()) {\n");
          buf.append(ind(2) + "  ASTNode$DepGraphNode nodeHandler = handler();\n");
          buf.append(ind(2) + "  nodeHandler.addDependant(#NAME#_value.handler());\n");
          buf.append(ind(2) + "  #NAME#_value.handler().addDependant(nodeHandler);\n");
          buf.append(ind(2) + "}\n");
        } 
      }
    }
    return buf.toString();
  }


  // ES_2012-01-22: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTrackingStackTransfer() {
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        if (getNumParameter() == 0) {
          buf.append("#NAME#_handler.transferDependenciesFrom(tmpHandler);");
        } else {
          buf.append("((ASTNode$DepGraphNode)#NAME#_handler.get(_parameters)).transferDependenciesFrom(tmpHandler);");
        }
      }
      if (grammar().incrementalLevelAttr) {
        buf.append("#NAME#_handler.transferDependenciesFrom(tmpHandler);");
      }
      if (grammar().incrementalLevelNode) {
        if (!getNTA()) {
          buf.append("handler.transferDependenciesFrom(tmpHandler);");
        }
      }
      if (grammar().incrementalLevelRegion) {
      }
    }
    return buf.toString();
  }

  // ES_2012-01-22: Code generation for incremental evaluation, tracking
  public String AttrDecl.genIncrementalTrackingStackClear() {
    StringBuffer buf = new StringBuffer();
    if (getLazy() || isCircular()) {
      if (grammar().incrementalLevelParam) {
        buf.append("else tmpHandler.clearDependencies();");
      }
      if (grammar().incrementalLevelAttr) {
        buf.append("else tmpHandler.clearDependencies();");
      }
      if (grammar().incrementalLevelNode) {
        if (!getNTA()) {
          buf.append("else tmpHandler.clearDependencies();");
        }
      }
      if (grammar().incrementalLevelRegion) {
      }
    }
    return buf.toString();
  }

  // ES_2012-02-21: Code generation for incremental evaluation
  public String AttrDecl.genIncrementalInternalNTAList() {
    StringBuffer buf = new StringBuffer();
    if (grammar().incrementalLevelNode || grammar().incrementalLevelRegion) {
      if (getNTA()) 
          buf.append(ind(3) + "#NAME#_list.inc_internalNTAList(#NAME#_values);\n");
    }
    return buf.toString();
  }

}
