/* Copyright (c) 2005-2016, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Code generation for rewrites.
 */
aspect Rewrites {

  public void ASTDecl.emitRewrites(PrintStream out) {
    TemplateContext tt = templateContext();
    boolean unconditional = false;

    tt.expand("ASTDecl.rewriteTo:begin", out);

    for (int i = 0; i < getNumRewrite(); i++) {
      Rewrite r = getRewrite(i);
      if (r.genRewrite(out, i)) {
        unconditional = true;
      }
    }

    if (name().equals(config().astNodeType())) {
      tt.expand("ASTDecl.rewriteTo:end:ASTNode", out);
    } else if (!unconditional) {
      tt.expand("ASTDecl.rewriteTo:end:conditional", out);
    } else {
      tt.expand("ASTDecl.rewriteTo:end:unconditional", out);
    }

    for (int i = 0; i < getNumRewrite(); i++) {
      Rewrite r = getRewrite(i);
      r.genRewritesExtra(out, i);
    }

    if (config().rewriteCircularNTA()) {
      // Generate the canRewrite method.
      tt.expand("ASTDecl.canRewrite:begin", out);

      if (unconditional) {
        tt.expand("ASTDecl.canRewrite:end:unconditional", out);
      } else {
        for (int i = 0; i < getNumRewrite(); i++) {
          Rewrite r = getRewrite(i);
          r.genRewriteCondition(out, i);
        }
        tt.expand("ASTDecl.canRewrite:end", out);
      }
    }
  }

  public boolean Rewrite.genRewrite(PrintStream out, int index) {
    TemplateContext tt = templateContext();
    tt.bind("RewriteIndex", "" + index);
    tt.expand("Rewrite.declaredat", out);
    if (getCondition() != null) {
      tt.bind("Condition", Unparser.unparse(getCondition()));
      tt.expand("Rewrite.genRewrite:conditional", out);
      return false;
    } else {
      tt.expand("Rewrite.genRewrite:unconditional", out);
      return true;
    }
  }

  public void Rewrite.genRewriteCondition(PrintStream out, int index) {
    TemplateContext tt = templateContext();
    tt.bind("RewriteIndex", "" + index);
    tt.expand("Rewrite.declaredat", out);
    if (getCondition() != null) {
      tt.bind("Condition", Unparser.unparse(getCondition()));
      tt.expand("Rewrite.condition", out);
    }
  }

  public void Rewrite.genRewritesExtra(PrintStream out, int index) {
    String ind = config().indent;
    String ind2 = config().ind(2);
    if (getResult() instanceof org.jastadd.jrag.AST.ASTBlock) {
      templateContext().expand("Rewrite.javaDoc:internal", out);
      out.println();
      out.println(ind + "private " + getReturnType() + " rewriteRule" + index + "() {");
      out.print(Unparser.unparse(getResult()));
      out.println(ind + "}");
    } else {
      templateContext().expand("Rewrite.javaDoc:internal", out);
      out.println(ind + "private " + getReturnType() + " rewriteRule" + index + "() {");
      out.println(ind2 + "return " + Unparser.unparse(getResult()) + ";");
      out.println(ind + "}");
    }
  }

  syn lazy boolean ASTDecl.hasRewrites() =
      getNumRewrite() > 0 || (superClass() != null && superClass().hasRewrites());

  /**
   * @return {@code true} if this AST node has a rewrittenNode attribute declaration
   * for circular NTA rewrites.
   */
  syn lazy boolean ASTDecl.hasRewriteAttribute() =
      getNumRewrite() > 0 && (superClass() == null || !superClass().hasRewrites());

  /**
   * Generates the attribute code for circular rewrites.
   */
  public void ASTDecl.emitRewriteAttribute(PrintStream out) {
    if (config().rewriteCircularNTA() && hasRewriteAttribute()) {
      // Generate the rewrittenNode attribute only if this node has rewrites and
      // a supertype does not have rewrites (if the supertype has rewrites then
      // this node inherites the rewrittenNode attribute).
      CircularRewriteDecl decl = getCircularRewriteDecl();
      TemplateContext tt = decl.templateContext();
      String newValue = "new_" + decl.signature() + "_value";
      String oldValue = decl.signature() + "_value";
      tt.bind("CircularComputeRhs", oldValue + ".rewriteTo()");
      tt.bind("ChangeCondition", String.format("%s != %s || %s.canRewrite()",
            newValue, oldValue, newValue));
      tt.bind("BottomValue", "this");
      tt.bind("TracePrintReturnNewValue",
          decl.tracePrintReturnNewValue(decl.signature() + "_value"));
      tt.bind("TracePrintReturnPreviousValue",
          decl.tracePrintReturnPreviousValue(decl.signature() + "_value"));
      tt.expand("AttrDecl.resetMethod", out);
      tt.expand("AttrDecl.cycleDeclaration", out);
      tt.expand("AttrDecl.cacheDeclarations", out);
      tt.expand("AttrDecl.circularEquation:unparameterized", out);
    } else if (isASTNodeDecl()) {
      out.format("public %s rewrittenNode() { "
          + "throw new Error(\"rewrittenNode is undefined for ASTNode\"); }%n",
          config().astNodeType());
    }
  }

  syn lazy CircularRewriteDecl ASTDecl.getCircularRewriteDecl() =
      new CircularRewriteDecl(
          new List<Parameter>(),
          "rewrittenNode",
          "ASTNode",
          CacheMode.DEFAULT,
          "",
          0,
          0,
          false,
          true,
          "",
          "",
          new List<Annotation>());
}
