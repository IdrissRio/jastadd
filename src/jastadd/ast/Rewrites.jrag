/* Copyright (c) 2005-2013, The JastAdd Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Code generation for rewrites.
 */
aspect Rewrites {

  syn lazy Collection Grammar.rewriteAspects() {
    Set set = new LinkedHashSet();
    for(int i = 0; i < getNumTypeDecl(); i++) {
      if(getTypeDecl(i) instanceof ASTDecl) {
        ASTDecl decl = (ASTDecl)getTypeDecl(i);
        for(int j = 0; j < decl.getNumRewrite(); j++) {
          Rewrite r = decl.getRewrite(j);
          set.add(r.aspectName());
        }
      }
    }
    return set;
  }

  public void Grammar.genRewriteOrderChecks(PrintWriter out) {
    TemplateContext tt = templateContext();
    for(Iterator iter = rewriteAspects().iterator(); iter.hasNext(); ) {
      tt.bind("RewriteName", (String) iter.next());
      tt.expand("Grammar.genRewriteOrderChecks", out);
    }
  }

  public void ASTDecl.emitRewrites(PrintStream out) {
    TemplateContext tt = templateContext();
    boolean unconditional = false;

    tt.expand("ASTDecl.emitRewrites.begin", out);

    if(name().equals("List")) {
      // ES_2011-10-10: Code generation for incremental evaluation, avoiding list touch rewrite
      if (!(grammar().incremental || grammar().fullFlush)) {
        tt.expand("ASTDecl.emitRewrites.touch_list", out);
      }
    }
    for(int i = 0; i < getNumRewrite(); i++) {
      Rewrite r = getRewrite(i);
      if (r.genRewrite(out, i)) {
        unconditional = true;
      }
    }

    if(name().equals("ASTNode")) {
      tt.expand("ASTDecl.emitRewrites.end:ASTNode", out);
    } else if(!unconditional) {
      tt.expand("ASTDecl.emitRewrites.end:!unconditional", out);
    } else {
      tt.expand("ASTDecl.emitRewrites.end", out);
    }

    for(int i = 0; i < getNumRewrite(); i++) {
      Rewrite r = getRewrite(i);
      r.genRewritesExtra(out, i);
    }
  }

  public boolean Rewrite.genRewrite(PrintStream out, int index) {
    out.println(ind(2) + "// Declared in " + getFileName() + " at line " + getStartLine());
    if(getCondition() != null) {
      out.println(ind(2) + "if(" + Unparser.unparse(getCondition()) + ") {");
      out.println(ind(3) + "state().during" + aspectName() + "++;");
      out.println(ind(3) + "ASTNode result = rewriteRule" + index + "();");
      out.println(ind(3) + "state().during" + aspectName() + "--;");
      out.println(ind(3) + "return result;");
      out.println(ind(2) + "}");
      out.println();
      return false;
    }
    else {
      out.println(ind(2) + "state().during" + aspectName() + "++;");
      out.println(ind(2) + "ASTNode result = rewriteRule" + index + "();");
      out.println(ind(2) + "state().during" + aspectName() + "--;");
      out.println(ind(2) + "return result;");
      return true;
    }
  }
  public boolean RewriteList.genRewrite(PrintStream out, int index) {
    out.println(ind(2) + "// Declared in " + getFileName() + " at line " + getStartLine());
    out.println(ind(2) + "if(getParent().getParent() instanceof " + getParentName() + " &&");
    out.print(ind(3) + "((" + getParentName() + ")getParent().getParent())." + getChildName() + "ListNoTransform() == getParent()");
    if(getCondition() != null) {
      out.println(" && " + Unparser.unparse(getCondition()) + ") {");
    }
    else {
      out.println(") {");
    }

    out.println(ind(2) + "state().during" + aspectName() + "++;");
    out.println(ind(3) + "List list = (List)getParent();");
    out.println(ind(3) + "int i = list.getIndexOfChild(this);");
    out.println(ind(3) + "List newList = rewrite" + getParentName() + "_" + getChildName() + "();");
    // the first child is set by the normal rewrite loop
    //out.println(ind(3) + "list.setChild(newList.getChildNoTransform(0), i);");
    out.println(ind(3) + "for(int j = 1; j < newList.getNumChildNoTransform(); j++)");
    out.println(ind(4) + "list.insertChild(newList.getChildNoTransform(j), ++i);");

    out.println(ind(4) + "state().during" + aspectName() + "--;");
    out.println(ind(3) + "return newList.getChildNoTransform(0);");
    out.println(ind(2) + "}");
    return false;
  }

  public void Rewrite.genRewritesExtra(PrintStream out, int index) {
    out.println(ind + "/**");
    out.println(ind + " * " + declaredat());
    out.println(ind + " * @apilevel internal");
    out.println(ind + " */");
    if(getResult() instanceof jrag.AST.ASTBlock) {
      out.println(ind + "private " + getReturnType() + " rewriteRule" + index + "() {");
      if(grammar().rewriteLimit > 0)
        out.println(ind(2) +
          "debugRewrite(\"Rewriting \" + getClass().getName() + \" " +
          "using rule in " + getFileNameEscaped() + " at line " +
          getStartLine() + "\");");
      out.print(Unparser.unparse(getResult()));
      out.println(ind + "}");
    }
    else {
      out.println(ind + "private " + getReturnType() + " rewriteRule" + index + "() {");
      if(grammar().rewriteLimit > 0)
        out.println(ind(2) +
          "debugRewrite(\"Rewriting \" + getClass().getName() + \" " +
          "using rule in " + getFileNameEscaped() + " at line " +
          getStartLine() + "\");");
      out.println(ind(2) + "return " + Unparser.unparse(getResult()) + ";");
      out.println(ind + "}");
    }
  }
  public void RewriteList.genRewritesExtra(PrintStream out, int index) {
    out.println(ind + "/**");
    out.println(ind + " * " + declaredat());
    out.println(ind + " * @apilevel internal");
    out.println(ind + " */");
    if(getResult() instanceof jrag.AST.ASTBlock) {
      out.println(ind + "private " + getReturnType() + " rewrite" + getParentName() + "_" + getChildName() + "() {");
      if(grammar().rewriteLimit > 0)
        out.println(ind(2) +
          "debugRewrite(\"Rewriting \" + getClass().getName() + \" " +
          "using rule in " + getFileNameEscaped() + " at line " +
          getStartLine() + "\");");
      out.print(Unparser.unparse(getResult()));
      out.println(ind + "}");
    }
    else {
      out.println(ind + "private " + getReturnType() + " rewrite" + getParentName() + "_" + getChildName() + "() {");
      if(grammar().rewriteLimit > 0)
        out.println(ind(2) +
          "debugRewrite(\"Rewriting \" + getClass().getName() + \" " +
          "using rule in " + getFileNameEscaped() + " at line " +
          getStartLine() + "\");");
      out.println(ind(2) + "return " + Unparser.unparse(getResult()) + ";");
      out.println(ind + "}");
    }
  }

  syn lazy boolean ASTDecl.hasRewrites() =
    getNumRewrite() > 0 || (superClass() != null && superClass().hasRewrites());

}
