# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Method flushing rewrites in a node
ASTDecl.flushRewriteCacheMethod = [[
$if(RewriteEnabled)
  /**
   * @api internal
   */
  public void #(name).flushRewriteCache() {
    $SynchBegin
$if(#isASTNodeDecl)
 $if(FlushRewrite)
    for (int i = 0; i < getNumChildNoTransform(); i++) {
      if (children_computed != null && children_computed[i]) {
        $include(ASTNode.traceHookFlushRewrite)
        if (children_init[i] != null) {
          setChild(children_init[i], i);
          children_init[i] = null;
        }
        children_computed[i] = false;
      }
    }
 $else
    in$$Circle(false);
  $if(!#isRootNode)
   $if(StagedRewrites)
    is$$Final(0);
   $else
    is$$Final(false);
   $endif
  $endif
 $endif
$else
    super.flushRewriteCache();
$endif
    $SynchEnd
  }
$endif
]]

# State variables needed to handle flushing of rewrites
# TODO: These should be protected, but are public now for debugging
ASTNode.getChild_initValue = [[
$if(RewriteEnabled)
$if(FlushRewrite)
$if(#isASTNodeDecl)
  /**
   * @apilevel internal
   */
  public $ASTNode[] $ASTNode.children_init;
  /**
   * @apilevel internal
   */
  public boolean[] $ASTNode.children_computed;
$endif
$endif
$endif
]]

# Method needed for to handler flushing of rewrites.
# Checks whether there is an enclosing rewritten node.
ASTNode.getChild_hasEnclosingInitValueMethod = [[
$if(RewriteEnabled)
$if(FlushRewrite)
$if(#isASTNodeDecl)
  /**
    * @apilevel internal
    */
  protected boolean $ASTNode.getChild_hasEnclosingInitValue() {
    $ASTNode child = this;
    $ASTNode parent = this.parent;
    while (parent != null) {
      if (parent.mayHaveRewrite()) {
        return true;
      }
      child = parent;
      parent = parent.parent;
    }
    return false;
  }
$endif
$endif
$endif
]]
