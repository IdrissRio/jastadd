# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Method flushing rewrites in a node
ASTDecl.flushRewriteCacheMethod = [[
$if(FlushRewrite)
$if(#isASTNodeDecl)
  /**
   * @api internal
   */
  public void $ASTNode.flushRewriteCache() {
    $SynchBegin
    for (int i = 0; i < getNumChildNoTransform(); i++) {
      if (rewritten_children != null && rewritten_children[i]) {
        if (init_children[i] != null) {
          setChild(init_children[i], i);
          init_children[i] = null;
        }
        rewritten_children[i] = false;
      }
    }
    $SynchEnd
  }
$endif
$endif
]]

# State variables needed to handle flushing of rewrites
# TODO: These should be protected, but are public now for debugging
ASTNode.flushRewritesInitValue = [[
$if(#isASTNodeDecl)
  /**
   * @apilevel internal
   */
  public $ASTNode[] $ASTNode.init_children;
  /**
   * @apilevel internal
   */
  public boolean[] $ASTNode.rewritten_children;
$endif
]]

# Method needed for to handler flushing of rewrites.
# Checks whether there is an enclosing rewritten node.
ASTNode.flushRewritesHasEnclosingRewriteMethod = [[
$if(#isASTNodeDecl)
  /**
    * @apilevel internal
    */
  protected boolean $ASTNode.inc_hasEnclosingRewrittenNode() {
    $ASTNode child = this;
    $ASTNode parent = this.parent;
    while (parent != null) {
      if (parent.mayHaveRewrite()) {
        return true;
      }
      child = parent;
      parent = parent.parent;
    }
    return false;
  }
$endif
]]
