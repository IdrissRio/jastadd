# attribute declarations
AttrDecl.synDecl = AttrDecl.inhDecl = [[
  #annotations
  public #getType #attributeName(#parametersDecl);
]]

AttrDecl.emitInlineCompute = [[
  #hostFileComment
  public #getType #attributeName($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #traceBeginAttr
    #initLazyMaps
    $include(AttrDecl.cacheCheck)
$if(RewriteEnabled)
    ASTNode$$State state = state();
$endif
    $include(addInterruptedCircleDeclaration)
    #visitedCheck
    #setVisited
    $include(addCheckInterruptedCircle)
    try $ComputeBody
    finally {
      #higherOrderAttributeCode
      #clearVisited
      $include(addClearInterruptedCircle)
      #traceEndAttr
    }
    $SynchEnd
  }
]]

SynEq.emitComputeMethod = [[
  /**
   * @apilevel internal
   */
  private #getType #(attributeName)_compute(#parametersDecl) $ComputeBody
]]

AttrDecl.visitedException = [[
$if(TraceVisitCheck)
System.out.println("Circular definition of attr: #attributeName in class: $ClassName");
$else
throw new RuntimeException("Circular definition of attr: #attributeName in class: $ClassName");
$endif
]]

AttrDecl.visitedCheck = [[
$if (VisitCheckEnabled)
  $if (RewriteEnabled)
    $if(#isParameterized)
      $if (Java5)
if (Integer.valueOf(state().boundariesCrossed).equals(#(attributeSignature)_visited.get(_parameters))) {
  #visitedException
}
      $else
if (new Integer(state().boundariesCrossed).equals(#(attributeSignature)_visited.get(_parameters))) {
  #visitedException
}
      $endif
    $else
if (#(attributeSignature)_visited == state().boundariesCrossed) {
  #visitedException
}
    $endif
  $else
    $if(#isParameterized)
if (#(attributeSignature)_visited.contains(_parameters)) {
  #visitedException
}
    $else
if (#(attributeSignature)_visited) {
  #visitedException
}
    $endif
  $endif
$endif
]]

AttrDecl.setVisited = [[
$if (RewriteEnabled)
  $if(#isParameterized)
    $if (Java5)
#(attributeSignature)_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    $else
#(attributeSignature)_visited.put(_parameters, new Integer(state().boundariesCrossed));
    $endif
  $else
#(attributeSignature)_visited = state().boundariesCrossed;
  $endif
$else
  $if(#isParameterized)
#(attributeSignature)_visited.add(_parameters);
  $else
#(attributeSignature)_visited = true;
  $endif
$endif
]]

SynDecl.higherOrderAttributeCode:norewrite = [[
$if(#isParameterized)
if(#(attributeSignature)_list == null) {
  #(attributeSignature)_list = new List();
$if(IncrementalEnabled)
  #genIncrementalInternalNTAList
$endif
  #(attributeSignature)_list.setParent(this);
}
#(attributeSignature)_list.add(#(attributeSignature)_value);
$else
#(attributeSignature)_value.setParent(this);
$endif
]]

SynDecl.higherOrderAttributeCode:nostagedrewrites = [[
$if(#isParameterized)
if(#(attributeSignature)_list == null) {
  #(attributeSignature)_list = new List();
$if(IncrementalEnabled)
  #genIncrementalInternalNTAList
$endif
  #(attributeSignature)_list.is$$Final = true;
  #(attributeSignature)_list.setParent(this);
}
#(attributeSignature)_list.add(#(attributeSignature)_value);
if(#(attributeSignature)_value != null) {
  #(attributeSignature)_value = (#getType) #(attributeSignature)_list.getChild(#(attributeSignature)_list.numChildren-1);
  #(attributeSignature)_value.is$$Final = true;
}
$else
#(attributeSignature)_value.setParent(this);
#(attributeSignature)_value.is$$Final = true;
$endif
]]

SynDecl.higherOrderAttributeCode:stagedrewrites = [[
$if(#isParameterized)
if(#(attributeSignature)_list == null) {
  #(attributeSignature)_list = new List();
$if(IncrementalEnabled)
  #genIncrementalInternalNTAList
$endif
  #(attributeSignature)_list.is$$Final = java.lang.Integer.MAX_VALUE;
  #(attributeSignature)_list.setParent(this);
}
if(#(attributeSignature)_value != null) {
  #(attributeSignature)_list.add(#(attributeSignature)_value);
  #(attributeSignature)_value.is$$Final = java.lang.Integer.MAX_VALUE;
}
$else
#(attributeSignature)_value.setParent(this);
#(attributeSignature)_value.is$$Final = java.lang.Integer.MAX_VALUE;
$endif
]]

ASTDecl.genEquation [[
  public #getType #attributeName($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #traceBeginAttr
    #initLazyMaps
    $include(AttrDecl.cacheCheck)
    #genIncrementalTrackingStackEnter
$if (RewriteEnabled)
    ASTNode$$State state = state();
$endif
    $include(addInterruptedCircleDeclaration)
    #visitedCheck
    #setVisited
    $include(addCheckInterruptedCircle)
    #cacheInit
    #callCompute
    #higherOrderAttributeCode
    #cacheStore
    #clearVisited
    $include(addClearInterruptedCircle)
    #traceEndAttr
    #returnStmt
    $SynchEnd
  }
]]

ASTDecl.genCircularEquationNoParams [[
  #suppressWarnings
  public #getType #attributeName() {
    $SynchBegin
    #traceComputeContext
    #parameterStructure
    $include(AttrDecl.cacheCheck)
    ASTNode$$State state = state();
    #addComponentCheck
    if (!#(attributeSignature)_initialized) {
      #(attributeSignature)_initialized = true;
    #(attributeSignature)_value = $BottomValue;
    }
    if (!state.IN_CIRCLE) {
      state.IN_CIRCLE = true;
      #tracePrintCycleBeginString
      #addAddToComponent
      #cacheInitRewrite
      // TODO: fixme
      // state().CIRCLE_INDEX = 1;
      do {
        #(attributeSignature)_visited = state.CIRCLE_INDEX;
        state.CHANGE = false;
        #inhDebugString
        #tracePrintBeginComputingValue
        #genIncrementalTrackingStackEnter2
        #getType new_#(attributeSignature)_value = #circularComputeCall;
        #genIncrementalTrackingStackExit2
        if ($Cond1)
          state.CHANGE = true;
        #(attributeSignature)_value = new_#(attributeSignature)_value;
        state.CIRCLE_INDEX++;
        #tracePrintStartingCycle
        #cycleLimitCheck
      } while (state.CHANGE);
      #cacheStoreRewrite {
        #(attributeSignature)_computed = true;
        $include(cacheCycleInit)
      } else {
        $include(resetCycleInit)
        #(attributeSignature)_computed = false;
        #(attributeSignature)_initialized = false;
      }
      state.IN_CIRCLE = false;
      $TracePrintReturnNewValue
      #tracePrintCycleEndString
      #returnStmt
    }
    if(#(attributeSignature)_visited != state.CIRCLE_INDEX) {
      #(attributeSignature)_visited = state.CIRCLE_INDEX;
      #cacheCycleCheck
      #resetCycleCheck
      #addAddToComponent
      #inhDebugString
      #tracePrintBeginComputingValue
      #genIncrementalTrackingStackEnter2
      #getType new_#(attributeSignature)_value = #circularComputeCall;
      #genIncrementalTrackingStackExit2
      if ($Cond2)
        state.CHANGE = true;
      #(attributeSignature)_value = new_#(attributeSignature)_value;
      $TracePrintReturnNewValue
      #returnStmt
    }
    $TracePrintReturnPreviousValue
    #returnStmt
    $SynchEnd
  }
]]

ASTDecl.genCircularEquationWithParams [[
  #suppressWarnings
  public #getType #attributeName($ParamDecl) {
    $SynchBegin
    #traceComputeContext
    #parameterStructure
    #initLazyMaps
    ASTNode$$State.CircularValue _value;
    $include(AttrDecl.cacheCheck) else {
      _value = new ASTNode$$State.CircularValue();
      #(attributeSignature)_values.put(_parameters, _value);
      _value.value = $BottomValue;
    }
    ASTNode$$State state = state();
    #addComponentCheck
    if (!state.IN_CIRCLE) {
      state.IN_CIRCLE = true;
      #tracePrintCycleBeginString
      #cacheInitRewrite
      #addAddToComponent
      // TODO: fixme
      // state().CIRCLE_INDEX = 1;
      #getType new_#(attributeSignature)_value;
      do {
$if (Java5)
        _value.visited = new Integer(state.CIRCLE_INDEX);
$else
        _value.visited = state.CIRCLE_INDEX;
$endif
        state.CHANGE = false;
        #inhDebugString
        #tracePrintBeginComputingValue
        #genIncrementalTrackingStackEnter2
        new_#(attributeSignature)_value = #circularComputeCall;
        #genIncrementalTrackingStackExit2
        if ($Cond1) {
          state.CHANGE = true;
          _value.value = $ToRefType;
        }
        state.CIRCLE_INDEX++;
        #tracePrintStartingCycle
        #cycleLimitCheck
      } while (state.CHANGE);
      #(cacheStoreRewrite) {
$if (Java5)
        #(attributeSignature)_values.put(_parameters, new_#(attributeSignature)_value);
$else
        #(attributeSignature)_values.put(_parameters, $ToRefType);
$endif
        $include(cacheCycleInit)
      } else {
        #(attributeSignature)_values.remove(_parameters);
        $include(resetCycleInit)
      }
      state.IN_CIRCLE = false;
      $TracePrintReturnNewValue
      #tracePrintCycleEndString
      return new_#(attributeSignature)_value;
    }
$if (Java5)
    if (!new Integer(state.CIRCLE_INDEX).equals(_value.visited)) {
      _value.visited = new Integer(state.CIRCLE_INDEX);
$else
    if (!new Integer(state.CIRCLE_INDEX).equals(Integer.valueOf(_value.visited))) {
      _value.visited = state.CIRCLE_INDEX;
$endif
      #inhDebugString
      #tracePrintBeginComputingValue
      #genIncrementalTrackingStackEnter2
      #getType new_#(attributeSignature)_value = #circularComputeCall;
      #genIncrementalTrackingStackExit2
      #cacheCycleCheck
      #resetCycleCheck
      else if ($Cond1) {
        state.CHANGE = true;
$if (Java5)
        _value.value = new_#(attributeSignature)_value;
$else
        _value.value = $ToRefType;
$endif
      }
      $TracePrintReturnNewValue
      return new_#(attributeSignature)_value;
    }
    $TracePrintReturnPreviousValue
    return $FromRefType;
    $SynchEnd
  }
]]

cacheCycleInit = [[
$if(CacheCycle)
state.LAST_CYCLE = true;
#inhDebugString
#circularComputeCall;
state.LAST_CYCLE = false;
$endif]]

addClearInterruptedCircle = [[
$if(ComponentCheck)
if(interruptedCircle) {
  state.IN_CIRCLE = true;
  state.popEvalStack();
}
$endif]]

addCheckInterruptedCircle = [[
$if(ComponentCheck)
if(state.IN_CIRCLE) {
  interruptedCircle = true;
  state.IN_CIRCLE = false;
  state.pushEvalStack();
}
$endif]]

addInterruptedCircleDeclaration = [[
$if(ComponentCheck)
boolean interruptedCircle = false;
$endif]]

resetCycleInit = [[
state.RESET_CYCLE = true;
#inhDebugString
#circularComputeCall;
state.RESET_CYCLE = false;]]

AttrDecl.cacheCheck = [[
$if(#hasCache)

$include(AttrDecl.incHookAttrRead)

$if(#isAttrNTA)
$if(!#isParamAttr)
if(#(attributeSignature)_computed) {
  #traceEndCachedAttr
  return (#getType) getChild(#(attributeSignature)ChildPosition());
}
$else
if(#(attributeSignature)_values.containsKey(_parameters)) {
  #traceEndCachedAttr
  return (#getType) getChild(#(attributeSignature)ChildPosition()));
}
$endif
$endif
    
$if(!#isParamAttr)
if(#(attributeSignature)_computed) {
  #traceEndCachedAttr
  return #(attributeSignature)_value;
}
$else
$if(#isCircular)
if(#(attributeSignature)_values.containsKey(_parameters)) {
  Object _o = #(attributeSignature)_values.get(_parameters);
  if(!(_o instanceof ASTNode$$State.CircularValue)) {
    #traceEndCachedAttr
    return $FromRefTypeParamCircular;
  } else { 
    _value = (ASTNode$$State.CircularValue)_o;
  }
}
$else
if(#(attributeSignature)_values.containsKey(_parameters)) {
  #traceEndCachedAttr
  return $FromRefTypeParam; 
}
$endif
$endif
$endif
]]