# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

AttrDecl.returnStmt = [[
$if(#isNTAToken)
#(getType) node = (#getType) this.getChild(#(attributeSignature)ChildPosition());
$include(AttrDecl.incHookAttrCompEnd)
return node;
$else
  $if(#isCircular)
return #(attributeSignature)_value;
  $else
$include(AttrDecl.incHookAttrCompEnd)
return #(attributeSignature)_value;
  $endif
$endif
]]

AttrDecl.cacheDeclarations = [[
$if(!#isParameterized)
  /**
   * @apilevel internal
   */
  protected boolean #(attributeSignature)_computed = false;
  /**
   * @apilevel internal
   */
  protected #getType #(attributeSignature)_value;
$else
$if(#declaredNTA)
$if(LazyMaps)
  /**
   * @apilevel internal
   */
  protected $DefaultMapType #(attributeSignature)_values;
  /**
   * @apilevel internal
   */
  protected $List #(attributeSignature)_list;
$else
  /**
   * @apilevel internal
   */
  protected $DefaultMapType #(attributeSignature)_values = $CreateDefaultMap;
  /**
   * @apilevel internal
   */
  protected $List #(attributeSignature)_list;
$endif
$else
$if(LazyMaps)
  protected $DefaultMapType #(attributeSignature)_values;
$else
  protected $DefaultMapType #(attributeSignature)_values = $CreateDefaultMap;
$endif
$endif
$endif
]]

# attribute declarations
AttrDecl.synDecl = AttrDecl.inhDecl = [[
  #annotations
  public #getType #attributeName(#parametersDecl);
]]

AttrDecl.abstractSynDecl = [[
#docComment
  #annotations
  public abstract #getType #attributeName(#parametersDecl);
]]

AttrDecl.emitInlineCompute = [[
#docComment
  #annotations
  public #getType #attributeName($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #traceBeginAttr
    #initLazyMaps
    $include(AttrDecl.cacheCheck)
$if(RewriteEnabled)
    $ASTNode$$State state = state();
$endif
    $include(addInterruptedCircleDeclaration)
    #visitedCheck
    #setVisited
    $include(addCheckInterruptedCircle)
    try $ComputeBody
    finally {
      #higherOrderAttributeCode
      #clearVisited
      $include(addClearInterruptedCircle)
      #traceEndAttr
    }
    $SynchEnd
  }
]]

SynEq.emitComputeMethod = [[
  /**
   * @apilevel internal
   */
  private #getType #(attributeName)_compute(#parametersDecl) $ComputeBody
]]

AttrDecl.visitedException = [[
$if(TraceVisitCheck)
System.out.println("Circular definition of attr: #attributeName in class: $ClassName");
$else
throw new RuntimeException("Circular definition of attr: #attributeName in class: $ClassName");
$endif
]]

AttrDecl.visitedCheck = [[
$if (VisitCheckEnabled)
  $if (RewriteEnabled)
    $if(#isParameterized)
      $if (Java5)
if (Integer.valueOf(state().boundariesCrossed).equals(#(attributeSignature)_visited.get(_parameters))) {
  #visitedException
}
      $else
if (new Integer(state().boundariesCrossed).equals(#(attributeSignature)_visited.get(_parameters))) {
  #visitedException
}
      $endif
    $else
if (#(attributeSignature)_visited == state().boundariesCrossed) {
  #visitedException
}
    $endif
  $else
    $if(#isParameterized)
if (#(attributeSignature)_visited.contains(_parameters)) {
  #visitedException
}
    $else
if (#(attributeSignature)_visited) {
  #visitedException
}
    $endif
  $endif
$endif
]]

AttrDecl.setVisited = [[
$if (RewriteEnabled)
  $if(#isParameterized)
    $if (Java5)
#(attributeSignature)_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    $else
#(attributeSignature)_visited.put(_parameters, new Integer(state().boundariesCrossed));
    $endif
  $else
#(attributeSignature)_visited = state().boundariesCrossed;
  $endif
$else
  $if(#isParameterized)
#(attributeSignature)_visited.add(_parameters);
  $else
#(attributeSignature)_visited = true;
  $endif
$endif
]]

SynDecl.higherOrderAttributeCode:norewrite = [[
$if(#isParameterized)
if(#(attributeSignature)_list == null) {
  #(attributeSignature)_list = new $List();
  $include(AttrDecl.incHookCreateNtaList)
  #(attributeSignature)_list.setParent(this);
}
#(attributeSignature)_list.add(#(attributeSignature)_value);
$else
#(attributeSignature)_value.setParent(this);
$endif
]]

SynDecl.higherOrderAttributeCode:nostagedrewrites = [[
$if(#isParameterized)
if(#(attributeSignature)_list == null) {
  #(attributeSignature)_list = new $List();
  $include(AttrDecl.incHookCreateNtaList)
  #(attributeSignature)_list.is$$Final = true;
  #(attributeSignature)_list.setParent(this);
}
#(attributeSignature)_list.add(#(attributeSignature)_value);
if(#(attributeSignature)_value != null) {
  #(attributeSignature)_value = (#getType) #(attributeSignature)_list.getChild(#(attributeSignature)_list.numChildren-1);
  #(attributeSignature)_value.is$$Final = true;
}
$else
#(attributeSignature)_value.setParent(this);
#(attributeSignature)_value.is$$Final = true;
$endif
]]

SynDecl.higherOrderAttributeCode:stagedrewrites = [[
$if(#isParameterized)
if(#(attributeSignature)_list == null) {
  #(attributeSignature)_list = new $List();
  $include(AttrDecl.incHookCreateNtaList)
  #(attributeSignature)_list.is$$Final = java.lang.Integer.MAX_VALUE;
  #(attributeSignature)_list.setParent(this);
}
if(#(attributeSignature)_value != null) {
  #(attributeSignature)_list.add(#(attributeSignature)_value);
  #(attributeSignature)_value.is$$Final = java.lang.Integer.MAX_VALUE;
}
$else
#(attributeSignature)_value.setParent(this);
#(attributeSignature)_value.is$$Final = java.lang.Integer.MAX_VALUE;
$endif
]]

AttrDecl.genEquation [[
  #annotations
  public #getType #attributeName($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #traceBeginAttr
    #initLazyMaps
    $include(AttrDecl.cacheCheck)
    $include(AttrDecl.incHookAttrCompStart)
$if (RewriteEnabled)
    $ASTNode$$State state = state();
$endif
    $include(addInterruptedCircleDeclaration)
    #visitedCheck
    #setVisited
    $include(addCheckInterruptedCircle)
    #cacheInit
    #callCompute
    #higherOrderAttributeCode
$if(#getLazy)
  $if(#isParameterized)
    #cacheStoreRewrite {
      $include(AttrDecl.incHookAttrCompBeforeStore)
      #(attributeSignature)_values.put(_parameters, #attributeValueReference);
      $include(AttrDecl.traceHookAttrCached)
    } else {
      $include(AttrDecl.traceHookAttrCacheAbort)
      $include(AttrDecl.incHookAttrCompAfterStore)
    }
  $else
    #cacheStoreRewrite {
      $include(AttrDecl.incHookAttrCompBeforeStore)
      #(attributeSignature)_computed = true;
      $include(AttrDecl.traceHookAttrCached)
    } else {
      $include(AttrDecl.traceHookAttrCacheAbort)
      $include(AttrDecl.incHookAttrCompAfterStore)
    }
  $endif
$endif

    #clearVisited
    $include(addClearInterruptedCircle)
    #traceEndAttr
    $include(AttrDecl.returnStmt)
    $SynchEnd
  }
]]

ASTDecl.genCircularEquationNoParams [[
  #annotations
  public #getType #attributeName() {
    $SynchBegin
    #traceComputeContext
    #parameterStructure
    $include(AttrDecl.cacheCheck)
    $ASTNode$$State state = state();
    #addComponentCheck
    if (!#(attributeSignature)_initialized) {
      #(attributeSignature)_initialized = true;
      #(attributeSignature)_value = $BottomValue;
    }
    if (!state.IN_CIRCLE) {
      $include(AttrDecl.traceHookCircularEnterCase1)
      state.IN_CIRCLE = true;
      #tracePrintCycleBeginString
      #addAddToComponent
      #cacheInitRewrite
      // TODO: fixme
      // state().CIRCLE_INDEX = 1;
      do {
        #(attributeSignature)_visited = state.CIRCLE_INDEX;
        state.CHANGE = false;
        #inhDebugString
        #tracePrintBeginComputingValue
        $include(AttrDecl.incHookAttrCompStartCircular)
        #getType new_#(attributeSignature)_value = #circularComputeCall;
        $include(AttrDecl.incHookAttrCompEndCircular)
        if ($Cond1) {
          state.CHANGE = true;
          $include(AttrDecl.traceHookCircularCase1Change)
        }
        #(attributeSignature)_value = new_#(attributeSignature)_value;
        state.CIRCLE_INDEX++;
        #tracePrintStartingCycle
        #cycleLimitCheck
      } while (state.CHANGE);
      #cacheStoreRewrite {
        #(attributeSignature)_computed = true;
        $include(cacheCycleInit)
        $include(AttrDecl.traceHookAttrCached)
      } else {
        $include(resetCycleInit)
        #(attributeSignature)_computed = false;
        #(attributeSignature)_initialized = false;
        $include(AttrDecl.traceHookAttrCacheAbort)
      }
      state.IN_CIRCLE = false;
      $TracePrintReturnNewValue
      #tracePrintCycleEndString
      $include(AttrDecl.traceHookCircularExitCase1)
      $include(AttrDecl.returnStmt)
    }
    if(#(attributeSignature)_visited != state.CIRCLE_INDEX) {
      $include(AttrDecl.traceHookCircularEnterCase2)
      #(attributeSignature)_visited = state.CIRCLE_INDEX;
      #cacheCycleCheck
      $include(AttrDecl.resetCycleCheck)
      #addAddToComponent
      #inhDebugString
      #tracePrintBeginComputingValue
      $include(AttrDecl.incHookAttrCompStartCircular)
      #getType new_#(attributeSignature)_value = #circularComputeCall;
      $include(AttrDecl.incHookAttrCompEndCircular)
      if ($Cond2) {
        state.CHANGE = true;
        $include(AttrDecl.traceHookCircularCase2Change)
      }
      #(attributeSignature)_value = new_#(attributeSignature)_value;
      $TracePrintReturnNewValue
      $include(AttrDecl.traceHookCircularExitCase2)
      $include(AttrDecl.returnStmt)
    }
    $TracePrintReturnPreviousValue
    $include(AttrDecl.traceHookCircularExitCase3)
    $include(AttrDecl.returnStmt)
    $SynchEnd
  }
]]

ASTDecl.genCircularEquationWithParams [[
  #annotations
  public #getType #attributeName($ParamDecl) {
    $SynchBegin
    #traceComputeContext
    #parameterStructure
    #initLazyMaps
    $ASTNode$$State.CircularValue _value;
    $include(AttrDecl.cacheCheck) else {
      _value = new $ASTNode$$State.CircularValue();
      #(attributeSignature)_values.put(_parameters, _value);
      _value.value = $BottomValue;
    }
    $ASTNode$$State state = state();
    #addComponentCheck
    if (!state.IN_CIRCLE) {
      $include(AttrDecl.traceHookCircularEnterCase1)
      state.IN_CIRCLE = true;
      #tracePrintCycleBeginString
      #cacheInitRewrite
      #addAddToComponent
      // TODO: fixme
      // state().CIRCLE_INDEX = 1;
      #getType new_#(attributeSignature)_value;
      do {
$if (Java5)
        _value.visited = new Integer(state.CIRCLE_INDEX);
$else
        _value.visited = state.CIRCLE_INDEX;
$endif
        state.CHANGE = false;
        #inhDebugString
        #tracePrintBeginComputingValue
        $include(AttrDecl.incHookAttrCompStartCircular)
        new_#(attributeSignature)_value = #circularComputeCall;
        $include(AttrDecl.incHookAttrCompEndCircular)
        if ($Cond1) {
          state.CHANGE = true;
          $include(AttrDecl.traceHookCircularCase1Change)
          _value.value = $ToRefType;
        }
        state.CIRCLE_INDEX++;
        #tracePrintStartingCycle
        #cycleLimitCheck
      } while (state.CHANGE);
      #(cacheStoreRewrite) {
$if (Java5)
        #(attributeSignature)_values.put(_parameters, new_#(attributeSignature)_value);
$else
        #(attributeSignature)_values.put(_parameters, $ToRefType);
$endif
        $include(cacheCycleInit)
        $include(AttrDecl.traceHookAttrCached)
      } else {
        #(attributeSignature)_values.remove(_parameters);
        $include(resetCycleInit)
        $include(AttrDecl.traceHookAttrCacheAbort)
      }
      state.IN_CIRCLE = false;
      $TracePrintReturnNewValue
      #tracePrintCycleEndString
      $include(AttrDecl.traceHookCircularExitCase1)
      return new_#(attributeSignature)_value;
    }
$if (Java5)
    if (!new Integer(state.CIRCLE_INDEX).equals(_value.visited)) {
      _value.visited = new Integer(state.CIRCLE_INDEX);
$else
    if (!new Integer(state.CIRCLE_INDEX).equals(Integer.valueOf(_value.visited))) {
      _value.visited = state.CIRCLE_INDEX;
$endif
      $include(AttrDecl.traceHookCircularEnterCase2)
      #inhDebugString
      #tracePrintBeginComputingValue
      $include(AttrDecl.incHookAttrCompStartCircular)
      #getType new_#(attributeSignature)_value = #circularComputeCall;
      $include(AttrDecl.incHookAttrCompEndCircular)
      #cacheCycleCheck
      $include(AttrDecl.resetCycleCheck)
      else if ($Cond1) {
        state.CHANGE = true;
        $include(AttrDecl.traceHookCircularCase2Change)
$if (Java5)
        _value.value = new_#(attributeSignature)_value;
$else
        _value.value = $ToRefType;
$endif
      }
      $TracePrintReturnNewValue
      $include(AttrDecl.traceHookCircularExitCase2)
      return new_#(attributeSignature)_value;
    }
    $TracePrintReturnPreviousValue
    $include(AttrDecl.traceHookCircularExitCase3)
    return $FromRefType;
    $SynchEnd
  }
]]

cacheCycleInit = [[
$if(CacheCycle)
state.LAST_CYCLE = true;
#inhDebugString
#circularComputeCall;
state.LAST_CYCLE = false;
$endif]]

addClearInterruptedCircle = [[
$if(ComponentCheck)
if(interruptedCircle) {
  state.IN_CIRCLE = true;
  state.popEvalStack();
}
$endif]]

addCheckInterruptedCircle = [[
$if(ComponentCheck)
if(state.IN_CIRCLE) {
  interruptedCircle = true;
  state.IN_CIRCLE = false;
  state.pushEvalStack();
}
$endif]]

addInterruptedCircleDeclaration = [[
$if(ComponentCheck)
boolean interruptedCircle = false;
$endif]]

resetCycleInit = [[
state.RESET_CYCLE = true;
#inhDebugString
#circularComputeCall;
state.RESET_CYCLE = false;]]

AttrDecl.cacheCheck = [[
$if(#hasCache)
$include(AttrDecl.incHookAttrRead)
$if(#isAttrNTA)
$if(!#isParamAttr)
if(#(attributeSignature)_computed) {
  #traceEndCachedAttr
  return (#getType) getChild(#(attributeSignature)ChildPosition());
}
$else
if(#(attributeSignature)_values.containsKey(_parameters)) {
  #traceEndCachedAttr
  return (#getType) getChild(#(attributeSignature)ChildPosition()));
}
$endif
$endif
$if(!#isParamAttr)
if(#(attributeSignature)_computed) {
  #traceEndCachedAttr
  return #(attributeSignature)_value;
}
$else
$if(#isCircular)
if(#(attributeSignature)_values.containsKey(_parameters)) {
  Object _o = #(attributeSignature)_values.get(_parameters);
  if(!(_o instanceof $ASTNode$$State.CircularValue)) {
    #traceEndCachedAttr
    return $FromRefTypeParamCircular;
  } else {
    _value = ($ASTNode$$State.CircularValue) _o;
  }
}
$else
if(#(attributeSignature)_values.containsKey(_parameters)) {
  #traceEndCachedAttr
  return $FromRefTypeParam;
}
$endif
$endif
$endif
]]
