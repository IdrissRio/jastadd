# Boilerplate code for ASTNode

ASTNode.generatedWithDecls = [[
  /**
   * @apilevel internal
   */
  public static final boolean ASTNode.generatedWithCircularEnabled = $CircularEnabled;
  /**
   * @apilevel internal
   */
  public static final boolean ASTNode.generatedWithCacheCycle = $CacheCycleEnabled;
  /**
   * @apilevel internal
   */
  public static final boolean ASTNode.generatedWithComponentCheck = $ComponentCheckEnabled;
]]

ASTNode.rewriteDecls = [[
  /**
   * @apilevel internal
   */
  public boolean ASTNode.in$$Circle = false;

  /**
   * @apilevel internal
   */
  public boolean ASTNode.in$$Circle() {
    return in$$Circle;
  }

  /**
   * @apilevel internal
   */
  public void ASTNode.in$$Circle(boolean b) {
    in$$Circle = b;
  }
]]

ASTNode.childIndex = [[
  /**
   * @apilevel internal
   */
  private int ASTNode.childIndex;

  /**
   * @apilevel low-level
   */
  public int ASTNode.getIndexOfChild(ASTNode node) {
    if (node != null && node.childIndex < numChildren
        && node == children[node.childIndex])
      return node.childIndex;
    for(int i = 0; children != null && i < children.length; i++) {
      if(children[i] == node) {
        node.childIndex = i;
        return i;
      }
    }
    return -1;
  }
]]

ASTNode.iterator = [[
  /**
   * @apilevel low-level
   */
  public java.util.Iterator<T> ASTNode.iterator() {
    $SynchBegin
    return new java.util.Iterator<T>() {
      private int counter = 0;
      public boolean hasNext() {
        return counter < getNumChild();
      }
      @SuppressWarnings("unchecked") public T next() {
        if(hasNext())
          return (T)getChild(counter++);
        else
          return null;
      }
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
    $SynchEnd
  }
]]
