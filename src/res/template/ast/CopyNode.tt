ast.copy = [[
  /**
   * @apilevel internal
   */
  $(Annotations)public $ReturnType copy() {
    $BlockBegin
    try {
      #name node = (#name) clone();
      node.parent = null;
      if(children != null)
        node.children = (ASTNode[]) children.clone();
      $CopyBody
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
    $BlockEnd
  }]]

# inserted into ast.copy if incremental is enabled
ast.copy:incremental =
[[node.inc_state = inc_CLONED;
for (int i = 0; node.children != null && i < node.children.length; i++) {
  node.children[i] = null;
}
node.init_children = null;
node.rewritten_children = null;
inc_copyHandlers(node);]]

ast.fullCopy = [[
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   */
  $(Annotations)public $ReturnType fullCopy() {
    $BlockBegin
    #name tree = (#name) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        $SkipNTAs
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          $SetChild
        }
      }
    }
    return tree;
    $BlockEnd
  }]]

# used to set tree child in fullCopy if incremental is enabled
ast.fullCopy.setChild:incremental =
[[tree.children[i] = child;
child.parent = tree;]]
