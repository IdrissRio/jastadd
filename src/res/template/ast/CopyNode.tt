# generates ASTNode.copy()
ASTDecl.emitCopyNode = [[
  /**
   * @apilevel internal
   */
  #annotations
  public #copyReturnType copy() {
    $SynchBegin
    try {
      #name node = (#name) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
$if(IncrementalEnabled)
      node.inc_state = inc_CLONED;
      for (int i = 0; node.children != null && i < node.children.length; i++) {
        node.children[i] = null;
      }
      node.init_children = null;
      node.rewritten_children = null;
      inc_copyHandlers(node);
$endif
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
    $SynchEnd
  }
]]

# generates ASTNode.fullCopy()
ASTDecl.emitFullCopy = [[
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   */
  #annotations
  public #copyReturnType fullCopy() {
    $SynchBegin
    #name tree = (#name) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        $SkipNTAs
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
$if(IncrementalEnabled)
          tree.children[i] = child;
          child.parent = tree;
$else
          tree.setChild(child, i);
$endif
        }
      }
    }
    return tree;
    $SynchEnd
  }
]]

# ASTNode.clone()
ASTDecl.emitCloneNode = [[
  /**
   * @apilevel internal
   */
  #annotations
  public #copyReturnType clone() throws CloneNotSupportedException {
     $SynchBegin
     #name node = (#name) super.clone();
     $CloneBody
     return node;
     $SynchEnd
   }
]]
