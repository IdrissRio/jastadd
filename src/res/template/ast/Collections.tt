# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

CollDecl.computeMethod:separateEvaluation = [[
  /**
   * @apilevel internal
   */
  private #getType #(name)_compute(#parametersDecl) {
    $ASTNode node = this;
    while(node.getParent() != null && !(node instanceof $RootType)) {
      node = node.getParent();
    }
    #collDebugString
    $RootType root = ($RootType) node;
    #(signature)_value = $BottomValue;
    root.#(name)_#(signature)_nextIteration(this);
    return #(signature)_value;
  }
]]

CollDecl.computeMethod:onePhase = [[
  /**
   * @apilevel internal
   */
  private #getType #(name)_compute(#parametersDecl) {
    $ASTNode node = this;
    while(node.getParent() != null && !(node instanceof $RootType)) {`
      node = node.getParent();
    }
    #collDebugString
    $RootType root = ($RootType) node;
    root.collect_contributors_#collectingSignature();
    if(#(signature)_value == null) {
      #(signature)_value = $BottomValue;
    }
    return #(signature)_value;
  }
]]

CollDecl.computeMethod = [[
  $DefaultSetType #(signature)_contributors$if(!LazyMaps) = $CreateContributorSet$endif;

  /**
   * @apilevel internal
   * @return the contributor set for #name
   */
  public $DefaultSetType #(signature)_contributors() {
$if(LazyMaps)
    if(#(signature)_contributors == null)
      #(signature)_contributors  = $CreateContributorSet;
$endif
    return #(signature)_contributors;
  }

  /**
   * @apilevel internal
   */
  private #getType #(name)_compute(#parametersDecl) {
    $ASTNode node = this;
    while(node.getParent() != null && !(node instanceof $RootType)) {
      node = node.getParent();
    }
    #collDebugString
    $RootType root = ($RootType) node;
    root.collect_contributors_#collectingSignature();
    #(signature)_value = $BottomValue;
$if(LazyMaps)
    if(#(signature)_contributors != null)
$endif
    for (java.util.Iterator iter = #(signature)_contributors.iterator(); iter.hasNext(); ) {
      $ASTNode contributor = ($ASTNode) iter.next();
      contributor.contributeTo_#(getTarget)_#(signature)(#(signature)_value);
    }
    // TODO: disabled temporarily since collections may not be cached
    //$if(LazyMaps)#(signature)_contributors = null;$endif
    return #(signature)_value;
  }
]]

CollDecl.combineMethod = [[
  $DefaultSetType #(signature)_contributors$if(!LazyMaps) = $CreateContributorSet$endif;

  /**
   * @apilevel internal
   * @return the contributor set for #name
   */
  public $DefaultSetType #(signature)_contributors() {
$if(LazyMaps)
    if(#(signature)_contributors == null)
      #(signature)_contributors  = $CreateContributorSet;
$endif
    return #(signature)_contributors;
  }

  private #getType combine_#(signature)_contributions(#getType h) {
$if(LazyMaps)
    if(#(signature)_contributors != null)
$endif
    for(java.util.Iterator iter = #(signature)_contributors.iterator(); iter.hasNext(); ) {
      $ASTNode contributor = ($ASTNode) iter.next();
      contributor.contributeTo_#(getTarget)_#(signature)(h);
    }
    // TODO: disabled temporarily since collections may not be cached
    //$if(LazyMaps)#(signature)_contributors = null;$endif
    return h;
  }
]]

ASTDecl.collectContributors:alt1 = [[
$if(HasCondition)
    if ($Condition) {
$endif
$if(#getRefSet)
      for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
        #getTargetName ref = (#getTargetName) iter.next();
        if (ref != null) {
          if (ref.#(signature)_value == null) {
            ref.#(signature)_value = $BottomValue;
          }
          ref.#(signature)_value.$CombOp($Value);
        }
      }
$else
      {
        #getTargetName ref = #getReference;
        if (ref != null) {
          if (ref.#(signature)_value == null) {
            ref.#(signature)_value = $BottomValue;
          }
          ref.#(signature)_value.$CombOp($Value);
        }
      }
$endif
$if(HasCondition)
    }
$endif
]]

ASTDecl.collectContributors:alt2 = [[
$if(HasCondition)
    if ($Condition) {
$endif
$if(#getRefSet)
      for(java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
        #getTargetName ref = (#getTargetName) iter.next();
        if (ref != null) {
          ref.#(signature)_contributors().add(this);
        }
      }
$else
      {
        #getTargetName ref = (#getTargetName) (#getReference);
        if (ref != null) {
          ref.#(signature)_contributors().add(this);
        }
      }
$endif
$if(HasCondition)
    }
$endif
]]

ASTDecl.nextIteration = [[
$if(HasCondition)
$if(#lazyCondition)
$if(#getRefSet)
    for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
      #getTargetName ref = (#getTargetName) iter.next();
      if(ref == n && ($Condition)) {
        $(ValueAccess)#(signature)_value.$CombOp($Value);
      }
    }
$else
    if (#getReference == n && ($Condition)) {
      $(ValueAccess)#(signature)_value.$CombOp($Value);
    }
$endif
$else
    if ($Condition) {
$if(#getRefSet)
      for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
        #getTargetName ref = (#getTargetName) iter.next();
        if (ref == n) {
          $(ValueAccess)#(signature)_value.$CombOp($Value);
        }
      }
$else
      if (#getReference == n) {
        $(ValueAccess)#(signature)_value.$CombOp($Value);
      }
$endif
    }
$endif
$else
$if(#getRefSet)
    for(java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
      #getTargetName ref = (#getTargetName) iter.next();
      if (ref == n) {
        $(ValueAccess)#(signature)_value.$CombOp($Value);
      }
    }
$else
    if (#getReference == n) {
      $(ValueAccess)#(signature)_value.$CombOp($Value);
    }
$endif
$endif
]]

ASTDecl.weaveCollectionAttributes.nextIteration = [[
  protected void #(getTarget)_#(signature)_nextIteration(#getTarget n) {
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).#(getTarget)_#(signature)_nextIteration(n);
    }
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors1 = [[
  protected void collect_contributors_#(collectingSignature)() {
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).collect_contributors_#(collectingSignature)();
    }
  }
]]

ASTDecl.weaveCollectionAttributes.contributeTo = [[
  protected void contributeTo_#(getTarget)_#(signature)(#getType collection) {
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors2 = [[
  private boolean collect_contributors_#(collectingSignature) = false;

  public boolean collecting_contributors_#(collectingSignature) = false;

  protected void collect_contributors_#(collectingSignature)() {
    if (!collect_contributors_#(collectingSignature)) {
      collecting_contributors_#(collectingSignature) = true;
      super.collect_contributors_#(collectingSignature)();
      collecting_contributors_#(collectingSignature) = false;
      collect_contributors_#(collectingSignature) = true;
    }
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors3 = [[
  private boolean collect_contributors_#(collectingSignature) = false;
  protected void collect_contributors_#(collectingSignature)() {
    if(collect_contributors_#(collectingSignature)) return;
    super.collect_contributors_#(collectingSignature)();
    collect_contributors_#(collectingSignature) = true;
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors4 = [[
  private boolean collect_contributors_#(collectingSignature) = false;
]]

ASTDecl.weaveCollectionAttributes.flush1 = [[
    collect_contributors_#(collectingSignature) = false;
    collecting_contributors_#(collectingSignature) = false;
]]

ASTDecl.weaveCollectionAttributes.flush2 = [[
    collect_contributors_#(collectingSignature) = false;
]]

CollDecl.cacheCycleCheck [[
$if(CacheCycle)
if (state().LAST_CYCLE) {
$if(#isParameterized)
  #setVisited
  #circularComputeCall;
  #clearVisited
  #(signature)_computed.add(_parameters);
  return $CachedValue;
$else
  #setVisited
  #circularComputeCall;
  #clearVisited
  #(signature)_computed = true;
  return #(signature)_value;
$endif
}
$endif
]]
