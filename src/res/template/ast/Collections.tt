CollDecl.computeMethod:separateEvaluation = [[
  /**
   * @apilevel internal
   */
  private #getType #(attributeName)_compute(#parametersDecl) {
    ASTNode node = this;
    while(node.getParent() != null && !(node instanceof $RootType)) {
      node = node.getParent();
    }
    #collDebugString
    $RootType root = ($RootType) node;
    #(attributeSignature)_value = $BottomValue;
    root.#(name)_#(attributeSignature)_nextIteration(this);
    return #(attributeSignature)_value;
  }
]]

CollDecl.computeMethod:onePhase = [[
  /**
   * @apilevel internal
   */
  private #getType #(attributeName)_compute(#parametersDecl) {
    ASTNode node = this;
    while(node.getParent() != null && !(node instanceof $RootType)) {`
      node = node.getParent();
    }
    #collDebugString
    $RootType root = ($RootType) node;
    root.collect_contributors_#collectingSignature();
    if(#(attributeSignature)_value == null) {
      #(attributeSignature)_value = $BottomValue;
    }
    return #(attributeSignature)_value;
  }
]]

CollDecl.computeMethod = [[
  $DefaultSetType #(attributeSignature)_contributors$if(!LazyMaps) = $CreateContributorSet$endif;

  /**
   * @apilevel internal
   * @return the contributor set for #name
   */
  public $DefaultSetType #(attributeSignature)_contributors() {
$if(LazyMaps)
    if(#(attributeSignature)_contributors == null)
      #(attributeSignature)_contributors  = $CreateContributorSet;
$endif
    return #(attributeSignature)_contributors;
  }

  /**
   * @apilevel internal
   */
  private #getType #(attributeName)_compute(#parametersDecl) {
    ASTNode node = this;
    while(node.getParent() != null && !(node instanceof $RootType)) {
      node = node.getParent();
    }
    #collDebugString
    $RootType root = ($RootType) node;
    root.collect_contributors_#collectingSignature();
    #(attributeSignature)_value = $BottomValue;
$if(LazyMaps)
    if(#(attributeSignature)_contributors != null)
$endif
    for (java.util.Iterator iter = #(attributeSignature)_contributors.iterator(); iter.hasNext(); ) {
      ASTNode contributor = (ASTNode)iter.next();
      contributor.contributeTo_#(getTarget)_#(attributeSignature)(#(attributeSignature)_value);
    }
    // TODO: disabled temporarily since collections may not be cached
    //$if(LazyMaps)#(attributeSignature)_contributors = null;$endif
    return #(attributeSignature)_value;
  }
]]

CollDecl.combineMethod = [[
  $DefaultSetType #(attributeSignature)_contributors$if(!LazyMaps) = $CreateContributorSet$endif;

  /**
   * @apilevel internal
   * @return the contributor set for #name
   */
  public $DefaultSetType #(attributeSignature)_contributors() {
$if(LazyMaps)
    if(#(attributeSignature)_contributors == null)
      #(attributeSignature)_contributors  = $CreateContributorSet;
$endif
    return #(attributeSignature)_contributors;
  }

  private #getType combine_#(attributeSignature)_contributions(#getType h) {
$if(LazyMaps)
    if(#(attributeSignature)_contributors != null)
$endif
    for(java.util.Iterator iter = #(attributeSignature)_contributors.iterator(); iter.hasNext(); ) {
      ASTNode contributor = (ASTNode)iter.next();
      contributor.contributeTo_#(getTarget)_#(attributeSignature)(h);
    }
    // TODO: disabled temporarily since collections may not be cached
    //$if(LazyMaps)#(attributeSignature)_contributors = null;$endif
    return h;
  }
]]

ASTDecl.collectContributors:alt1 = [[
$if(HasCondition)
    if ($Condition) {
$endif
$if(#getRefSet)
      for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
        #getTargetName ref = (#getTargetName) iter.next();
        if (ref != null) {
          if (ref.#(attributeSignature)_value == null) {
            ref.#(attributeSignature)_value = $BottomValue;
          }
          ref.#(attributeSignature)_value.$CombOp($Value);
        }
      }
$else
      {
        #getTargetName ref = #getReference;
        if (ref != null) {
          if (ref.#(attributeSignature)_value == null) {
            ref.#(attributeSignature)_value = $BottomValue;
          }
          ref.#(attributeSignature)_value.$CombOp($Value);
        }
      }
$endif
$if(HasCondition)
    }
$endif
]]

ASTDecl.collectContributors:alt2 = [[
$if(HasCondition)
    if ($Condition) {
$endif
$if(#getRefSet)
      for(java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
        #getTargetName ref = (#getTargetName) iter.next();
        if (ref != null) {
          ref.#(attributeSignature)_contributors().add(this);
        }
      }
$else
      {
        #getTargetName ref = (#getTargetName) (#getReference);
        if (ref != null) {
          ref.#(attributeSignature)_contributors().add(this);
        }
      }
$endif
$if(HasCondition)
    }
$endif
]]

ASTDecl.nextIteration = [[
$if(HasCondition)
$if(#lazyCondition)
$if(#getRefSet)
    for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
      #getTargetName ref = (#getTargetName) iter.next();
      if(ref == n && ($Condition)) {
        $(ValueAccess)#(attributeSignature)_value.$CombOp($Value);
      }
    }
$else
    if (#getReference == n && ($Condition)) {
      $(ValueAccess)#(attributeSignature)_value.$CombOp($Value);
    }
$endif
$else
    if ($Condition) {
$if(#getRefSet)
      for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
        #getTargetName ref = (#getTargetName) iter.next();
        if (ref == n) {
          $(ValueAccess)#(attributeSignature)_value.$CombOp($Value);
        }
      }
$else
      if (#getReference == n) {
        $(ValueAccess)#(attributeSignature)_value.$CombOp($Value);
      }
$endif
    }
$endif
$else
$if(#getRefSet)
    for(java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
      #getTargetName ref = (#getTargetName) iter.next();
      if (ref == n) {
        $(ValueAccess)#(attributeSignature)_value.$CombOp($Value);
      }
    }
$else
    if (#getReference == n) {
      $(ValueAccess)#(attributeSignature)_value.$CombOp($Value);
    }
$endif
$endif
]]

ASTDecl.weaveCollectionAttributes.nextIteration = [[
  protected void #(getTarget)_#(attributeSignature)_nextIteration(#getTarget n) {
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).#(getTarget)_#(attributeSignature)_nextIteration(n);
    }
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors1 = [[
  protected void collect_contributors_#(collectingSignature)() {
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).collect_contributors_#(collectingSignature)();
    }
  }
]]

ASTDecl.weaveCollectionAttributes.contributeTo = [[
  protected void contributeTo_#(getTarget)_#(attributeSignature)(#getType collection) {
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors2 = [[
  private boolean collect_contributors_#(collectingSignature) = false;

  public boolean collecting_contributors_#(collectingSignature) = false;

  protected void collect_contributors_#(collectingSignature)() {
    if (!collect_contributors_#(collectingSignature)) {
      collecting_contributors_#(collectingSignature) = true;
      super.collect_contributors_#(collectingSignature)();
      collecting_contributors_#(collectingSignature) = false;
      collect_contributors_#(collectingSignature) = true;
    }
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors3 = [[
  private boolean collect_contributors_#(collectingSignature) = false;
  protected void collect_contributors_#(collectingSignature)() {
    if(collect_contributors_#(collectingSignature)) return;
    super.collect_contributors_#(collectingSignature)();
    collect_contributors_#(collectingSignature) = true;
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors4 = [[
  private boolean collect_contributors_#(collectingSignature) = false;
]]

ASTDecl.weaveCollectionAttributes.flush1 = [[
    collect_contributors_#(collectingSignature) = false;
    collecting_contributors_#(collectingSignature) = false;
]]

ASTDecl.weaveCollectionAttributes.flush2 = [[
    collect_contributors_#(collectingSignature) = false;
]]
