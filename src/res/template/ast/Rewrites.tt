ASTDecl.emitRewrites.begin = [[
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {]]

ASTDecl.emitRewrites.touch_list = [[
    if(list$$touched) {
      for(int i = 0 ; i < getNumChildNoTransform(); i++) {
        getChild(i);
      }
      list$$touched = false;
      return this;
    }]]

ASTDecl.emitRewrites.end:ASTNode = [[
    if(state().peek() == ASTNode$$State.REWRITE_CHANGE) {
      state().pop();
      state().push(ASTNode$$State.REWRITE_NOCHANGE);
    }
    return this;
  }]]

ASTDecl.emitRewrites.end:!unconditional = [[
    return super.rewriteTo();
  }]]

ASTDecl.emitRewrites.end = [[  }]]

Rewrite.genRewrite.declaredat = [[
    // Declared at #declaredat]]

Rewrite.genRewrite:conditional [[
    if ($Condition) {
      state().during#aspectName++;
      ASTNode result = rewriteRule$RewriteIndex();
      state().during#aspectName--;
      return result;
    }]]

Rewrite.genRewrite:unconditional [[
    state().during#aspectName++;
    ASTNode result = rewriteRule$RewriteIndex();
    state().during#aspectName--;
    return result;]]

Grammar.genRewriteOrderChecks = [[
protected int ASTNode$$State.during$(RewriteName) = 0;
protected boolean ASTNode.during$(RewriteName)() {
  if(state().during$(RewriteName) == 0) {
    return false;
  } else {
    state().pop();
    state().push(ASTNode$$State.REWRITE_INTERRUPT);
    return true;
  }
}]]
