# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


ASTNode.emitNodeToStringMethod = [[
$if (TracingEnabled)
public static String $ASTNode.nodeToString($ASTNode node) {
  return (node != null ? node.getClass().getSimpleName() : "null");
}
$endif
]]

AttrDecl.traceHookAttrComputeBegin = [[
$if (TracingEnabled)
$if(#isParameterized)
$if(#isCircular)
Tracer.traceComputeBegin(this, "#(hostClassName).#(name)", "" + _parameters, "");
$else
Tracer.traceComputeBegin(this, "#(hostClassName).#(name)", "" + _parameters, "");
$endif
$else
Tracer.traceComputeBegin(this, "#(hostClassName).#(name)", "", "");
$endif
$endif
]]

AttrDecl.traceHookAttrComputeEnd = [[
$if (TracingEnabled)
$if(#isParameterized)
$if(#isCircular)
Tracer.traceComputeEnd(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceComputeEnd(this, "#(hostClassName).#(name)", "" + _parameters, "" + #(signature)_value);
$endif
$else
Tracer.traceComputeEnd(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookAttrComputeEndInline = [[
$if (TracingEnabled)
$if(#isParameterized)
$if(#isCircular)
Tracer.traceComputeEnd(this, "#(hostClassName).#(name)", "" + _parameters, "");
$else
Tracer.traceComputeEnd(this, "#(hostClassName).#(name)", "" + _parameters, "");
$endif
$else
Tracer.traceComputeEnd(this, "#(hostClassName).#(name)", "", "");
$endif
$endif
]]

AttrDecl.traceHookAttrCacheRead = [[
$if (TracingEnabled)
$if(#getLazy)
$if(#isParameterized)
$if(#isCircular)
Tracer.traceCacheRead(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceCacheRead(this, "#(hostClassName).#(name)", "" + _parameters, "" + #(signature)_value);
$endif
$else
Tracer.traceCacheRead(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
$endif
]]

AttrDecl.traceHookAttrCached = [[
$if (TracingEnabled)
$if(#getLazy)
$if(#isParameterized)
$if(#isCircular)
Tracer.traceCached(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceCached(this, "#(hostClassName).#(name)", "" + _parameters, "" + #(signature)_value);
$endif
$else
Tracer.traceCached(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
$endif
]]

AttrDecl.traceHookAttrCacheAbort = [[
$if (TracingEnabled)
$if(#getLazy)
$if(#isParameterized)
$if(#isCircular)
Tracer.traceCacheAbort(this, "#(name).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceCacheAbort(this, "#(name).#(name)", "" + _parameters, "" + #(signature)_value);
$endif
$else
Tracer.traceCacheAbort(this, "#(name).#(name)", "", "" + #(signature)_value);
$endif
$endif
$endif
]]

AttrDecl.traceHookCircularEnterCase1 = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceEnterCircularCase1(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceEnterCircularCase1(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookCircularCase1Change = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceCircularCase1Change(this, "#(hostClassName).#(name)", "" + _parameters,
    _value.value + "->" + new_#(signature)_value);
$else
Tracer.traceCircularCase1Change(this, "#(hostClassName).#(name)", "",
    #(signature)_value + "->" + new_#(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookCircularExitCase1 = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceExitCircularCase1(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceExitCircularCase1(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookCircularEnterCase2 = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceEnterCircularCase2(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceEnterCircularCase2(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookCircularCase2Change = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceCircularCase2Change(this, "#(hostClassName).#(name)", "" + _parameters,
    _value.value + "->" + new_#(signature)_value);
$else
Tracer.traceCircularCase2Change(this, "#(hostClassName).#(name)", "",
    #(signature)_value + "->" + new_#(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookCircularExitCase2 = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceExitCircularCase2(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceExitCircularCase2(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
]]

AttrDecl.traceHookCircularExitCase3 = [[
$if (TracingEnabled)
$if(#isParameterized)
Tracer.traceExitCircularCase3(this, "#(hostClassName).#(name)", "" + _parameters, "" + _value.value);
$else
Tracer.traceExitCircularCase3(this, "#(hostClassName).#(name)", "", "" + #(signature)_value);
$endif
$endif
]]

ASTNode.traceHookRewriteEnterCase1 = [[
$if (TracingEnabled)
Tracer.traceEnterRewriteCase1(this, "ASTNode.child", "" + i, nodeToString(node));
$endif
]]

ASTNode.traceHookRewriteChange = [[
$if (TracingEnabled)
if (this.state().peek() == $ASTNode$$State.REWRITE_CHANGE) {
  Tracer.traceRewriteChange(this, "ASTNode.child", "" + i,
      nodeToString(oldNode) + "->" + nodeToString(node));
}
$endif
]]

ASTNode.traceHookRewriteCached = [[
$if (TracingEnabled)
Tracer.traceCached(this, "ASTNode.child", "" + i, nodeToString(node));
$endif
]]

ASTNode.traceHookRewriteCacheAbort = [[
$if (TracingEnabled)
Tracer.traceCacheAbort(this, "ASTNode.child", "" + i, nodeToString(node));
$endif
]]

ASTNode.traceHookRewriteExitCase1 = [[
$if (TracingEnabled)
Tracer.traceExitRewriteCase1(this, "ASTNode.child", "" + i, nodeToString(node));
$endif
]]

ASTNode.traceHookRewriteExitCase2 = [[
$if (TracingEnabled)
Tracer.traceExitRewriteCase2(this, "ASTNode.child", "" + i, nodeToString(node));
$endif
]]

ASTNode.traceHookRewriteExitCase3 = [[
$if (TracingEnabled)
Tracer.traceExitRewriteCase3(this, "ASTNode.child", "" + i, nodeToString(node));
$endif
]]

ASTDecl.traceHookCopyNode = [[
$if (TracingEnabled)
Tracer.traceCopy(this, nodeToString(this));
$endif
]]

