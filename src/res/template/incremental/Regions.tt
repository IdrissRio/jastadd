
# Create isRegionRoot method
ASTDecl.createIsRegionRootMethod = [[
  public boolean #name.isRegionRoot() {
$if (IncrementalLevelNode)
    return true;
$endif
$if (IncrementalLevelRegion)
$if (IsRegionRoot)
    return true;
$else
$if (IsAstNode)
    return false;
$else
    return super.isRegionRoot();
$endif
$endif
$endif
  }
]]

# Create regionRoot method
ASTDecl.createRegionRootMethod = [[
  public ASTNode #name.regionRoot() {
$if (IsRegionRoot)
    return this;
$else
$if (IsAstNode)
    return parent != null ? parent.regionRoot() : null;
$else
    return super.regionRoot();
$endif
$endif
  }
]]

# Create region handler method
ASTDecl.createRegionHandlerMethod = [[
  public $DDGNodeName #name.handler() {
$if (IncrementalLevelRegion)
$if (IsRegionRoot)
    return handler;
$else
$if (IsAstNode)
    ASTNode root = regionRoot();
    return root != null ? root.handler() : null;
$else
    $DDGNodeName h = super.handler();
    if (h != null) return h;
    ASTNode root = regionRoot();
    return root != null ? root.handler() : null;
$endif
$endif
$endif
$if (IncrementalLevelNode)
    return handler;
$endif
  }
]]

# Create getParent method for region dependency tracking
ASTDecl.trackGetParentForRegionMethod = [[
// Overloading getParent for region root
public ASTNode #name.getParent() {
  ASTNode parent = super.getParent();
  if (state().IN_COMPUTATION > 0 && parent != null) {
    parent.handler().addDependant(handler);
  }
  return parent;
}          
]]

# Create getChild method for region dependency tracking
ASTDecl.trackGetChildForRegionMethod = [[
/**
 * @apilevel low-level
 */
 // Overloading getChild for region leaf
$if (Java5)
@SuppressWarnings("cast") 
public T #name.getChild(int i) {
  ASTNode child = super.getChild(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return (T)child;
}    
$else
public ASTNode #name.getChild(int i) {
  ASTNode child = super.getChild(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return child;
}
$endif
]]

# Create getChildNoTransform method for region dependency tracking
ASTDecl.trackGetChildNoTranForRegionMethod = [[
/**
 * @apilevel low-level
 */
 // Overloading getChildNoTransform for region leaf
$if (Java5)
@SuppressWarnings("cast")
public T #name.getChildNoTransform(int i) {
  ASTNode child = super.getChildNoTransform(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return (T)child;
}
$else
public ASTNode #name.getChildNoTransform(int i) {
  ASTNode child = super.getChildNoTransform(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return child;
}
$endif


]]