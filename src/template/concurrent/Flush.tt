# Copyright (c) 2013-2017, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

AttrDecl.resetAttrCache [[]]

AttrDecl.resetAttrVisit [[]]

ASTDecl.flushAttrCacheMethod [[
$if(FlushAttr)
  /** @apilevel internal */
  public void #name.flushAttrCache() {
    // Flushing is not needed. Caches cleared when cloning.
  }
$endif
  /** @apilevel internal */
  public void #name.makeFreshNode() {
    $if(!#isASTNodeDecl)
    super.makeFreshNode();
    $endif
    $MakeFreshNodeBody
  }
]]

# Reset all attribute caches.
AttrDecl.resetMethod [[
  /** @apilevel internal */
  private void #(signature)_reset() {
    // Handled by creating a fresh copy of this node!
  }

  /** @apilevel internal */
  private void #(signature)_fresh() {
$if(#isParameterized)
  $if(#declaredNTA)
    #(signature)_list = new $List<#getType>();
    #(signature)_list.setParent(this);
  $endif
  $if(#isCircular)
    #(signature)_values = new $ConcurrentMap<Object, CircularAttributeValue>();
  $else
    #(signature)_values = new $ConcurrentMap<Object, AtomicReference>();
  $endif
$else
  $if(#isCircular)
    #(signature)_value = new CircularAttributeValue();
  $else
    $if(#isIdentityComparable)
    #(signature)_computed = false;
    $if(#cacheInCycle)
    #(signature)_id = new Object();
    $endif
    $else
    #(signature)_value = new AtomicReference<Object>(AttributeValue.NONE);
    $endif
  $endif
$endif
  }
]]
