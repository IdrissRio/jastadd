# Copyright (c) 2013-2015, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

CollDecl.interfaceDeclaration [[
/**
 * @apilevel internal
 */
public $ContributorSetType #(signature)_contributors();
]]

collDebugCheck [[
$if(DebugMode)
if (node == null) {
  throw new RuntimeException(
      "Trying to evaluate collection attribute in subtree not attached to main tree");
}
$endif
]]

CollDecl.computeMethod:onePhase = [[
  /**
   * @apilevel internal
   */
  private #getType #(name)_compute(#parametersDecl) {
    $ASTNode node = this;
    while (node != null && !(node instanceof $RootType)) {
      node = node.getParent();
    }
    $include(collDebugCheck)
    $RootType root = ($RootType) node;
    root.collect_contributors_#collectingSignature();
    if (#(signature)_value == null) {
      #(signature)_value = $BottomValue;
    }
    return #(signature)_value;
  }
]]

CollDecl.computeMethod = [[
  $ContributorSetType #(signature)_contributors$if(!LazyMaps) = $CreateContributorSet$endif;

  /**
   * @apilevel internal
   * @return the contributor set for #name
   */
  public $ContributorSetType #(signature)_contributors() {
$if(LazyMaps)
    if (#(signature)_contributors == null)
      #(signature)_contributors  = $CreateContributorSet;
$endif
    return #(signature)_contributors;
  }

  /**
   * @apilevel internal
   */
  private #getType #(name)_compute(#parametersDecl) {
    $ASTNode node = this;
    while (node != null && !(node instanceof $RootType)) {
      node = node.getParent();
    }
    $include(collDebugCheck)
    $RootType root = ($RootType) node;
    root.collect_contributors_#collectingSignature();
    #(signature)_value = $BottomValue;
$if(LazyMaps)
    if (#(signature)_contributors != null) {
      $include(CollDecl.collectContributions)
    }
$else
    $include(CollDecl.collectContributions)
$endif
    return #(signature)_value;
  }
]]

CollDecl.collectContributions = [[
for (java.util.Iterator iter = #(signature)_contributors.iterator(); iter.hasNext(); ) {
  $ASTNode contributor = ($ASTNode) iter.next();
  contributor.contributeTo_#(getTarget)_#(signature)(#(signature)_value);
}
]]

CollDecl.combineMethod = [[
  $ContributorSetType #(signature)_contributors$if(!LazyMaps) = $CreateContributorSet$endif;

  /**
   * @apilevel internal
   * @return the contributor set for #name
   */
  public $ContributorSetType #(signature)_contributors() {
$if(LazyMaps)
    if (#(signature)_contributors == null)
      #(signature)_contributors  = $CreateContributorSet;
$endif
    return #(signature)_contributors;
  }

  private #getType combine_#(signature)_contributions(#getType h) {
$if(LazyMaps)
    if (#(signature)_contributors != null)
$endif
    for (java.util.Iterator iter = #(signature)_contributors.iterator(); iter.hasNext(); ) {
      $ASTNode contributor = ($ASTNode) iter.next();
      contributor.contributeTo_#(getTarget)_#(signature)(h);
    }
    return h;
  }
]]

CollEq.collectContributors:onePhase = [[
    // #declaredat
$if(HasCondition)
    if ($Condition) {
      $include(CollEq.contribution:onePhase)
    }
$else
    $include(CollEq.contribution:onePhase)
$endif
]]

CollEq.contribution:onePhase [[
$if(#getRefSet)
for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
  #getTargetName ref = (#getTargetName) iter.next();
  if (ref != null) {
    if (ref.#(signature)_value == null) {
      ref.#(signature)_value = $BottomValue;
    }
    ref.#(signature)_value.$CombOp($Value);
  }
}
$else
{
  #getTargetName ref = #getReference;
  if (ref != null) {
    if (ref.#(signature)_value == null) {
      ref.#(signature)_value = $BottomValue;
    }
    ref.#(signature)_value.$CombOp($Value);
  }
}
$endif
]]

CollEq.collectContributors:twoPhase = [[
    // #declaredat
$if(HasCondition)
    if ($Condition) {
      $include(CollEq.contribution:twoPhase)
    }
$else
    $include(CollEq.contribution:twoPhase)
$endif
]]

CollEq.contribution:twoPhase [[
$if(#getRefSet)
for (java.util.Iterator iter = (#getReference).iterator(); iter.hasNext(); ) {
  #getTargetName ref = (#getTargetName) iter.next();
  if (ref != null) {
    ref.#(signature)_contributors().add(this);
  }
}
$else
{
  #getTargetName ref = (#getTargetName) (#getReference);
  if (ref != null) {
    ref.#(signature)_contributors().add(this);
  }
}
$endif
]]

ASTDecl.weaveCollectionAttributes.collectContributors1 = [[
  protected void collect_contributors_#(collectingSignature)() {
    for (int i = 0; i < getNumChild(); i++) {
      getChild(i).collect_contributors_#(collectingSignature)();
    }
  }
]]

ASTDecl.weaveCollectionAttributes.contributeTo = [[
  protected void contributeTo_#(getTarget)_#(signature)(#getType collection) {
  }
]]

CollDecl.contributeTo [[
  protected void contributeTo_#(getTarget)_#(signature)(#getType collection) {
    super.contributeTo_#(getTarget)_#(signature)(collection);
]]

Contribution.statement [[
$if(#hasCondition)
    if (#getCondition) {
      collection.$CombOp(#getValue);
    }
$else
    collection.$CombOp(#getValue);
$endif
]]

ASTDecl.weaveCollectionAttributes.collectContributors2 = [[
  private boolean collect_contributors_#(collectingSignature) = false;

  public boolean collecting_contributors_#(collectingSignature) = false;

  protected void collect_contributors_#(collectingSignature)() {
    if (!collect_contributors_#(collectingSignature)) {
      collecting_contributors_#(collectingSignature) = true;
      super.collect_contributors_#(collectingSignature)();
      collecting_contributors_#(collectingSignature) = false;
      collect_contributors_#(collectingSignature) = true;
    }
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors3 = [[
  private boolean collect_contributors_#(collectingSignature) = false;
  protected void collect_contributors_#(collectingSignature)() {
    if (collect_contributors_#(collectingSignature)) {
      return;
    }
    super.collect_contributors_#(collectingSignature)();
    collect_contributors_#(collectingSignature) = true;
  }
]]

ASTDecl.weaveCollectionAttributes.collectContributors4 = [[
  private boolean collect_contributors_#(collectingSignature) = false;
]]

Collection.flush = [[
collect_contributors_#(collectingSignature) = false;
$if(#circularCollection)
collecting_contributors_#(collectingSignature) = false;
$endif
]]
