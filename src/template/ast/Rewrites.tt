# Copyright (c) 2013-2016, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

ASTDecl.rewriteTo:begin [[
  /** @apilevel internal */
  public $ASTNode rewriteTo() {
]]

ASTDecl.emitRewrites.touch_list = [[
    if (list$$touched) {
      for(int i = 0 ; i < getNumChildNoTransform(); i++) {
        getChild(i);
      }
      list$$touched = false;
$if(RewriteCircularNTA)
      if (state().changeInCycle()) {
        return this;
      }
$else
      return this;
$endif
    }
]]

ASTDecl.rewriteTo:end:ASTNode [[
$if(LegacyRewrite)
    if (state().peek() == $StateClass.REWRITE_CHANGE) {
      state().pop();
      state().push($StateClass.REWRITE_NOCHANGE);
    }
$endif
    return this;
  }
]]

ASTDecl.rewriteTo:end:conditional [[
    return super.rewriteTo();
  }
]]

ASTDecl.rewriteTo:end:unconditional [[
  }
]]

ASTDecl.canRewrite:begin [[
  /** @apilevel internal */
  public boolean canRewrite() {
]]

ASTDecl.canRewrite:end [[
    return false;
  }
]]

ASTDecl.canRewrite:end:unconditional [[
    return true;
  }
]]

Rewrite.condition [[
    if ($Condition) {
      return true;
    }
]]

Rewrite.declaredat [[
    // Declared at #sourceLocation
]]

Rewrite.genRewrite:conditional [[
    if ($Condition) {
      return rewriteRule$RewriteIndex();
    }
]]

Rewrite.genRewrite:unconditional [[
    return rewriteRule$RewriteIndex();
]]

RewriteList.genRewrite [[
    if (getParent().getParent() instanceof #getParentName &&
        ((#getParentName)getParent().getParent()).#(getChildName)ListNoTransform() == getParent()$Condition) {
      $List list = ($List) getParent();
      int i = list.getIndexOfChild(this);
      $List newList = rewrite#(getParentName)_#getChildName();
      // The first child is set by the normal rewrite loop.
      for(int j = 1; j < newList.getNumChildNoTransform(); j++) {
        list.insertChild(newList.getChildNoTransform(j), ++i);
      }
      return newList.getChildNoTransform(0);
    }
]]

Rewrite.javaDoc:internal [[
  /**
   * #declaredat
   * @apilevel internal
   */]]
