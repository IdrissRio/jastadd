# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

AttrDecl.returnStmt = [[
$if(#isAttrNTA)
#(getType) node = (#boxedType) this.getChild(#(signature)ChildPosition());
$include(AttrDecl.incHookAttrCompEnd)
return node;
$else
  $if(!#isCircular)
$include(AttrDecl.incHookAttrCompEnd)
  $endif
return #(signature)_value;
$endif
]]

AttrDecl.cacheDeclarations = [[
$if(!#isParameterized)
  /** @apilevel internal */
  protected boolean #(signature)_computed = false;

  /** @apilevel internal */
  protected #getType #(signature)_value;
$if(#isCircular)
  /** @apilevel internal */
  protected boolean #(signature)_initialized = false;
$endif
$else
$if(#declaredNTA)
  /** @apilevel internal */
  protected $List #(signature)_list;
$endif
$if(LazyMaps)
  /** @apilevel internal */
  protected $DefaultMapType #(signature)_values;
$else
  /** @apilevel internal */
  protected $DefaultMapType #(signature)_values = $CreateDefaultMap;
$endif
$endif
]]

# attribute declarations
AttrDecl.synDecl = AttrDecl.inhDecl = [[
#docComment
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public #getType #name(#parametersDecl);
]]

AttrDecl.abstractSynDecl = [[
#docComment
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public abstract #getType #name(#parametersDecl);
]]

AttrDecl.emitInlineComputeWithTry = [[
#docComment
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public #getType #name($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #initLazyMaps
    $include(AttrDecl.cacheCheck)
    #lazyState
    $include(addInterruptedCircleDeclaration)
    $include(AttrDecl.checkVisited)
    $include(AttrDecl.setVisited)
    $include(addCheckInterruptedCircle)
    $include(AttrDecl.traceHookAttrComputeBegin)
    try $ComputeBody
    finally {
      #higherOrderAttributeCode
      $include(AttrDecl.clearVisited)
      $include(addClearInterruptedCircle)
      $include(AttrDecl.traceHookAttrComputeEndInline)
    }
    $SynchEnd
  }
]]

AttrDecl.emitInlineComputeWithoutTry = [[
#docComment
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public #getType #name($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #initLazyMaps
    #lazyState
    $include(AttrDecl.cacheCheck)
    $include(addInterruptedCircleDeclaration)
    $include(AttrDecl.checkVisited)
    $include(AttrDecl.setVisited)
    $include(addCheckInterruptedCircle)
    $include(AttrDecl.traceHookAttrComputeBegin)
    $ComputeBody
    $SynchEnd
  }
]]

SynEq.emitComputeMethod = [[
  /** @apilevel internal */
$if(#hasComputeBlock)
  private #getType #(name)_compute(#parametersDecl) #computeCode
$else
  private #getType #(name)_compute(#parametersDecl) {
    return #computeCode;
  }
$endif
]]

AttrDecl.visitedException [[
$if(TraceVisitCheck)
System.out.println("Circular definition of attr: #name in class: #className");
$else
throw new RuntimeException("Circular definition of attr: #name in class: #className");
$endif
]]

AttrDecl.checkVisited [[
$if(VisitCheckEnabled)
  $if(RewriteEnabled)
    $if(#isParameterized)
if (Integer.valueOf(state().boundariesCrossed).equals(#(signature)_visited.get(_parameters))) {
  $include(AttrDecl.visitedException)
}
    $else
if (#(signature)_visited == state().boundariesCrossed) {
  $include(AttrDecl.visitedException)
}
    $endif
  $else
    $if(#isParameterized)
if (#(signature)_visited.contains(_parameters)) {
  $include(AttrDecl.visitedException)
}
    $else
if (#(signature)_visited) {
  $include(AttrDecl.visitedException)
}
    $endif
  $endif
$endif
]]

AttrDecl.setVisited [[
$if(VisitCheckEnabled)
$if(RewriteEnabled)
  $if(#isParameterized)
#(signature)_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
  $else
#(signature)_visited = state().boundariesCrossed;
  $endif
$else
  $if(#isParameterized)
#(signature)_visited.add(_parameters);
  $else
#(signature)_visited = true;
  $endif
$endif
$endif
]]

AttrDecl.clearVisited [[
$if(VisitCheckEnabled)
$if(RewriteEnabled)
  $if(#isParameterized)
#(signature)_visited.remove(_parameters);
  $else
#(signature)_visited = -1;
  $endif
$else
  $if(#isParameterized)
#(signature)_visited.remove(_parameters);
  $else
#(signature)_visited = false;
  $endif
$endif
$endif
]]

SynDecl.higherOrderAttributeCode:norewrite = [[
$if(#isParameterized)
if (#(signature)_list == null) {
  #(signature)_list = new $List();
  $include(AttrDecl.incHookCreateNtaList)
  #(signature)_list.setParent(this);
}
#(signature)_list.add(#(signature)_value);
$else
#(signature)_value.setParent(this);
$endif
]]

SynDecl.higherOrderAttributeCode:nostagedrewrites = [[
$if(#isParameterized)
if (#(signature)_list == null) {
  #(signature)_list = new $List();
  $include(AttrDecl.incHookCreateNtaList)
  #(signature)_list.is$$Final = true;
  #(signature)_list.setParent(this);
}
#(signature)_list.add(#(signature)_value);
if (#(signature)_value != null) {
  #(signature)_value = (#boxedType) #(signature)_list.getChild(#(signature)_list.numChildren-1);
  #(signature)_value.is$$Final = true;
}
$else
#(signature)_value.setParent(this);
#(signature)_value.is$$Final = true;
$endif
]]

SynDecl.higherOrderAttributeCode:stagedrewrites = [[
$if(#isParameterized)
if (#(signature)_list == null) {
  #(signature)_list = new $List();
  $include(AttrDecl.incHookCreateNtaList)
  #(signature)_list.is$$Final = java.lang.Integer.MAX_VALUE;
  #(signature)_list.setParent(this);
}
if (#(signature)_value != null) {
  #(signature)_list.add(#(signature)_value);
  #(signature)_value.is$$Final = java.lang.Integer.MAX_VALUE;
}
$else
#(signature)_value.setParent(this);
#(signature)_value.is$$Final = java.lang.Integer.MAX_VALUE;
$endif
]]

AttrDecl.emitEquation [[
#docComment
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public #getType #name($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #initLazyMaps
    #lazyState
    $include(AttrDecl.cacheCheck)
    $include(AttrDecl.incHookAttrCompStart)
    $include(addInterruptedCircleDeclaration)
    $include(AttrDecl.checkVisited)
    $include(AttrDecl.setVisited)
    $include(addCheckInterruptedCircle)
    $include(AttrDecl.cacheInit)
    $include(AttrDecl.traceHookAttrComputeBegin)
    #computeLhs = $ComputeRhs;
    $include(AttrDecl.traceHookAttrComputeEnd)
    #higherOrderAttributeCode
    $include(AttrDecl.cacheUpdate)
    $include(AttrDecl.clearVisited)
    $include(addClearInterruptedCircle)
    $include(AttrDecl.returnStmt)
    $SynchEnd
  }
]]

ASTDecl.genCircularEquationNoParams [[
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public #getType #name() {
    $SynchBegin
    $include(AttrDecl.cacheCheck)
    $StateClass state = state();
    #getType new_#(signature)_value;
    #addComponentCheck
    if (!#(signature)_initialized) {
      #(signature)_initialized = true;
      #(signature)_value = $BottomValue;
$if(#getNTA)
      if (#(signature)_value != null) {
        #(signature)_value.setParent(this);
      }
$endif
    }
    if (!state.IN_CIRCLE) {
      $include(AttrDecl.traceHookCircularEnterCase1)
      state.IN_CIRCLE = true;
      #tracePrintCycleBeginString
      #addAddToComponent
      $include(AttrDecl.cacheInitRewrite)
      do {
        #(signature)_visited = state.CIRCLE_INDEX;
        state.CHANGE = false;
        #tracePrintBeginComputingValue
        $include(AttrDecl.incHookAttrCompStartCircular)
        $include(AttrDecl.traceHookAttrComputeBegin)
        #circularComputeLhs = $CircularComputeRhs;
        $include(AttrDecl.traceHookAttrComputeEnd)
        $include(AttrDecl.incHookAttrCompEndCircular)
        if ($Cond1) {
          state.CHANGE = true;
          $include(AttrDecl.traceHookCircularCase1Change)
        }
        #(signature)_value = new_#(signature)_value;
$if(#getNTA)
        if (#(signature)_value != null) {
          #(signature)_value.setParent(this);
        }
$endif
        state.CIRCLE_INDEX++;
        #tracePrintStartingCycle
        #cycleLimitCheck
      } while (state.CHANGE);
      if (#cacheStoreCondition) {
        #(signature)_computed = true;
        $include(cacheCycleInit)
        $include(AttrDecl.traceHookAttrCached)
      } else {
        $include(resetCycleInit)
        #(signature)_computed = false;
        #(signature)_initialized = false;
        $include(AttrDecl.traceHookAttrCacheAbort)
      }
      state.IN_CIRCLE = false;
      $TracePrintReturnNewValue
      #tracePrintCycleEndString
      state.INTERMEDIATE_VALUE = false;
      $include(AttrDecl.traceHookCircularExitCase1)
    } else if (#(signature)_visited != state.CIRCLE_INDEX) {
      $include(AttrDecl.traceHookCircularEnterCase2)
      #(signature)_visited = state.CIRCLE_INDEX;
      $include(AttrDecl.cacheCycleCheck)
      $include(AttrDecl.resetCycleCheck)
      #addAddToComponent
      #tracePrintBeginComputingValue
      $include(AttrDecl.incHookAttrCompStartCircular)
      $include(AttrDecl.traceHookAttrComputeBegin)
      #circularComputeLhs = $CircularComputeRhs;
      $include(AttrDecl.traceHookAttrComputeEnd)
      $include(AttrDecl.incHookAttrCompEndCircular)
      if ($Cond2) {
        state.CHANGE = true;
        $include(AttrDecl.traceHookCircularCase2Change)
      }
      #(signature)_value = new_#(signature)_value;
$if(#getNTA)
      if (#(signature)_value != null) {
        #(signature)_value.setParent(this);
      }
$endif
      $TracePrintReturnNewValue
      state.INTERMEDIATE_VALUE = true;
      $include(AttrDecl.traceHookCircularExitCase2)
    } else {
      $TracePrintReturnPreviousValue
      state.INTERMEDIATE_VALUE = true;
      $include(AttrDecl.traceHookCircularExitCase3)
    }
    $include(AttrDecl.returnStmt)
    $SynchEnd
  }
]]

ASTDecl.genCircularEquationWithParams [[
  #annotations
  $include(AttrDecl.generatedAnnotations)
  public #getType #name($ParamDecl) {
    $SynchBegin
    #parameterStructure
    #initLazyMaps
    $StateClass.CircularValue _value;
    $include(AttrDecl.cacheCheck) else {
      _value = new $StateClass.CircularValue();
      #(signature)_values.put(_parameters, _value);
      _value.value = $BottomValue;
$if(#getNTA)
 $if(#isRewriteCircularNtaAttr)
       if (_value.value != null) {
         (($ASTNode) _value.value).setParent(this);
         (($ASTNode) _value.value).childIndex = i;
       }
 $else
       if (_value.value != null) { 
         if (#(signature)_list == null) {
           #(signature)_list = new $List();
           #(signature)_list.setParent(this);
         }
         (($ASTNode) _value.value).setParent(#(signature)_list);
      }
 $endif
$endif
    }
    $StateClass state = state();
    #getType new_#(signature)_value;
    #addComponentCheck
    if (!state.IN_CIRCLE) {
      $include(AttrDecl.traceHookCircularEnterCase1)
      state.IN_CIRCLE = true;
$if(#isRewriteCircularNtaAttr)
      int rewriteState;
$endif
      #tracePrintCycleBeginString
      $include(AttrDecl.cacheInitRewrite)
      #addAddToComponent
      do {
        _value.visited = state.CIRCLE_INDEX;
        state.CHANGE = false;
        #tracePrintBeginComputingValue
$if(#isRewriteCircularNtaAttr)
        state.push($StateClass.REWRITE_CHANGE);
$endif
        $include(AttrDecl.incHookAttrCompStartCircular)
        $include(AttrDecl.traceHookAttrComputeBegin)
        #circularComputeLhs = $CircularComputeRhs;
        $include(AttrDecl.traceHookAttrComputeEnd)
        $include(AttrDecl.incHookAttrCompEndCircular)
$if(#isRewriteCircularNtaAttr)
        rewriteState = state.pop();
$endif
        if ($Cond1) {
          state.CHANGE = true;
          $include(AttrDecl.traceHookCircularCase1Change)
          _value.value = new_#(signature)_value;
$if(#getNTA)
 $if(#isRewriteCircularNtaAttr)
          if (_value.value != null) {
            (($ASTNode) _value.value).setParent(this);
            (($ASTNode) _value.value).childIndex = i;
          }
 $else
          if (_value.value != null) {
            if (#(signature)_list == null) {
              #(signature)_list = new $List();
              #(signature)_list.setParent(this);
            }
            (($ASTNode) _value.value).setParent(#(signature)_list);
          }
 $endif
$endif
        }
        state.CIRCLE_INDEX++;
        #tracePrintStartingCycle
        #cycleLimitCheck
      } while (state.CHANGE);
      if (#cacheStoreCondition) {
        #(signature)_values.put(_parameters, new_#(signature)_value);
        $include(cacheCycleInit)
        $include(AttrDecl.traceHookAttrCached)
      } else {
        #(signature)_values.remove(_parameters);
        $include(resetCycleInit)
        $include(AttrDecl.traceHookAttrCacheAbort)
      }
      state.IN_CIRCLE = false;
      $TracePrintReturnNewValue
      #tracePrintCycleEndString
      state.INTERMEDIATE_VALUE = false;
      $include(AttrDecl.traceHookCircularExitCase1)
      return new_#(signature)_value;
    } else if (state.CIRCLE_INDEX != _value.visited) {
      _value.visited = state.CIRCLE_INDEX;
      $include(AttrDecl.traceHookCircularEnterCase2)
      #tracePrintBeginComputingValue
$if(#isRewriteCircularNtaAttr)
      state.push($StateClass.REWRITE_CHANGE);
$endif
      $include(AttrDecl.incHookAttrCompStartCircular)
      $include(AttrDecl.traceHookAttrComputeBegin)
      #circularComputeLhs = $CircularComputeRhs;
      $include(AttrDecl.traceHookAttrComputeEnd)
      $include(AttrDecl.incHookAttrCompEndCircular)
$if(#isRewriteCircularNtaAttr)
      int rewriteState = state.pop();
$endif
      $include(AttrDecl.cacheCycleCheck)
      $include(AttrDecl.resetCycleCheck)
      else if ($Cond1) {
        state.CHANGE = true;
        $include(AttrDecl.traceHookCircularCase2Change)
        _value.value = new_#(signature)_value;
$if(#getNTA)
 $if(#isRewriteCircularNtaAttr)
        if (_value.value != null) {
          (($ASTNode) _value.value).setParent(this);
          (($ASTNode) _value.value).childIndex = i;
        }
 $else
        if (_value.value != null) {
          if (#(signature)_list == null) {
            #(signature)_list = new $List();
            #(signature)_list.setParent(this);
          }
          (($ASTNode) _value.value).setParent(#(signature)_list);
        }
 $endif
$endif          
      }
      $TracePrintReturnNewValue
      state.INTERMEDIATE_VALUE = true;
      $include(AttrDecl.traceHookCircularExitCase2)
      return new_#(signature)_value;
    } else {
      $TracePrintReturnPreviousValue
      state.INTERMEDIATE_VALUE = true;
      $include(AttrDecl.traceHookCircularExitCase3)
      return (#boxedType) _value.value;
    }
    $SynchEnd
  }
]]

cacheCycleInit = [[
$if(CacheCycle)
state.LAST_CYCLE = true;
$if(#isRewriteCircularNtaAttr)
state.push($StateClass.REWRITE_CHANGE);
$endif
#getType $$tmp = $CircularComputeRhs;
$if(#isRewriteCircularNtaAttr)
state.pop();
$endif
state.LAST_CYCLE = false;
$endif]]

addClearInterruptedCircle = [[
$if(ComponentCheck)
if (interruptedCircle) {
  state.IN_CIRCLE = true;
  state.popEvalStack();
}
$endif]]

addCheckInterruptedCircle = [[
$if(ComponentCheck)
if (state.IN_CIRCLE) {
  interruptedCircle = true;
  state.IN_CIRCLE = false;
  state.pushEvalStack();
}
$endif]]

addInterruptedCircleDeclaration = [[
$if(ComponentCheck)
boolean interruptedCircle = false;
$endif]]

resetCycleInit = [[
state.RESET_CYCLE = true;
#getType $$tmp = $CircularComputeRhs;
state.RESET_CYCLE = false;]]

AttrDecl.cacheCheck = [[
$if(#hasCache)
$include(AttrDecl.incHookAttrRead)
  $if(#isAttrNTA)
    $if(!#isParameterized)
if (#(signature)_computed) {
  $include(AttrDecl.traceHookAttrCacheRead)
  return (#boxedType) getChild(#(signature)ChildPosition());
}
    $else
if (#(signature)_values.containsKey(_parameters)) {
  $include(AttrDecl.traceHookAttrCacheRead)
  return (#boxedType) getChild(#(signature)ChildPosition()));
}
    $endif
  $else
    $if(!#isParameterized)
if (#(signature)_computed) {
  $include(AttrDecl.traceHookAttrCacheRead)
  return #(signature)_value;
}
    $else
      $if(#isCircular)
if (#(signature)_values.containsKey(_parameters)) {
  Object _o = #(signature)_values.get(_parameters);
  if (!(_o instanceof $StateClass.CircularValue)) {
    $include(AttrDecl.traceHookAttrCacheRead)
    return (#boxedType) _o;
  } else {
    _value = ($StateClass.CircularValue) _o;
  }
}
      $else
if (#(signature)_values.containsKey(_parameters)) {
  $include(AttrDecl.traceHookAttrCacheRead)
  return (#boxedType) #(signature)_values.get(_parameters);
}
      $endif
    $endif
  $endif
$endif
]]

# Update the cache value for this attribute if caching is enabled.
AttrDecl.cacheUpdate [[
$if(#isLazy)
  $if(#isParameterized)
if (#cacheStoreCondition) {
  $include(AttrDecl.incHookAttrCompBeforeStore)
  #(signature)_values.put(_parameters, #(signature)_value);
  $include(AttrDecl.traceHookAttrCached)
} else {
  $include(AttrDecl.traceHookAttrCacheAbort)
  $include(AttrDecl.incHookAttrCompAfterStore)
}
  $else
if (#cacheStoreCondition) {
  $include(AttrDecl.incHookAttrCompBeforeStore)
  #(signature)_computed = true;
  $include(AttrDecl.traceHookAttrCached)
} else {
  $include(AttrDecl.traceHookAttrCacheAbort)
  $include(AttrDecl.incHookAttrCompAfterStore)
}
  $endif
#cacheRestore
$endif
]]

AttrDecl.cacheCycleCheck [[
$if(CacheCycle)
if (state.LAST_CYCLE) {
$if(#isParameterized)
  #(signature)_values.put(_parameters, new_#(signature)_value);
$else
  #(signature)_computed = true;
  $include(AttrDecl.incHookAttrCompStartCircular)
  #circularComputeLhs = $CircularComputeRhs;
  $include(AttrDecl.incHookAttrCompEndCircular)
  return new_#(signature)_value;
$endif
}
$endif
]]

AttrDecl.cacheInit [[
$if(#isLazy)
$include(AttrDecl.cacheInitCircular)
$include(AttrDecl.cacheInitRewrite)
$endif
]]

AttrDecl.cacheInitCircular [[
boolean intermediate = state.INTERMEDIATE_VALUE;
state.INTERMEDIATE_VALUE = false;
]]

AttrDecl.cacheInitRewrite [[
$if(RewriteEnabled)
int num = state.boundariesCrossed;
boolean isFinal = this.is$$Final();
$endif
]]
