# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Generate method for copying of DDG nodes
ASTDecl.incrementalCopyHandlerMethod = [[
  protected void #name.inc_copyHandlers(#name copy) {
$if (#isASTNodeDecl)
$if (IncrementalLevelParam)
    // ast handlers
    if (getChild_handler != null) {
      copy.getChild_handler = ($DDGNodeName[])getChild_handler.clone();
    }
    copy.numChildren_handler = $DDGNodeName.createAstHandler(numChildren_handler, copy);
    copy.getParent_handler = $DDGNodeName.createAstHandler(getParent_handler, copy);
    for (int i = 0; getChild_handler != null && i < getChild_handler.length; i++) {
      if (getChild_handler[i] != null) {
        copy.getChild_handler[i] = $DDGNodeName.createAttrHandler(getChild_handler[i], copy);
      }
    }
$endif
$if (IncrementalLevelAttr)
    // ast handlers
    copy.getChild_handler = new $DDGNodeName(getChild_handler, copy);
    copy.numChildren_handler = new $DDGNodeName(numChildren_handler, copy);
    copy.getParent_handler = new $DDGNodeName(getParent_handler, copy);
$endif
$if (IncrementalLevelNode)
    copy.handler = new $DDGNodeName(handler, copy);
$endif
$if (IncrementalLevelRegion)
$if (#isRegionRoot)
    copy.handler = new $DDGNodeName(handler, copy);
$endif
$endif
$else
$if (IncrementalLevelParam)
    super.inc_copyHandlers(copy);
$endif
$if (IncrementalLevelAttr)
    super.inc_copyHandlers(copy);
$endif
$if (IncrementalLevelNode)
    copy.handler = new $DDGNodeName(handler, copy);
$endif
$if (IncrementalLevelRegion)
$if (#isRegionRoot)
    copy.handler = new $DDGNodeName(handler, copy);
$else
    super.inc_copyHandlers(copy);
$endif
$endif
$endif
    $CopyTokenHandlers
    $CopyAttributeHandlers
  }
]]

# Copy token DDG node
TokenComponent.copyTokenHandler = [[
    if (get$(Id)_handler != null) {
      copy.get$(Id)_handler = $DDGNodeName.createAstHandler(get$(Id)_handler, copy);
    }
]]

# Copy attribute DDG node
ASTDecl.copyAttributeHandler = [[
$if (IncrementalLevelParam)
$if (IsParameterized)
    if ($(AttributeName)_handler != null) {
      copy.$(AttributeName)_handler = new java.util.HashMap(4);
    }
$else
    if ($(AttributeName)_handler != null) {
      copy.$(AttributeName)_handler = $DDGNodeName.createAttrHandler($(AttributeName)_handler, copy);
    }
$endif
$endif
$if (IncrementalLevelAttr)
    if ($(AttributeName)_handler != null) {
      copy.$(AttributeName)_handler = new $DDGNodeName($(AttributeName)_handler, copy);
    }
$endif
]]
