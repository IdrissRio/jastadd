# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Create isRegionRoot method
ASTDecl.createIsRegionRootMethod = [[
  public boolean #name.isRegionRoot() {
$if (IncrementalLevelNode)
    return true;
$endif
$if (IncrementalLevelRegion)
$if (IsRegionRoot)
    return true;
$else
$if (#isASTNodeDecl)
    return false;
$else
    return super.isRegionRoot();
$endif
$endif
$endif
  }
]]

# Create regionRoot method
ASTDecl.createRegionRootMethod = [[
  public $ASTNode #name.regionRoot() {
$if (IsRegionRoot)
    return this;
$else
$if (#isASTNodeDecl)
    return parent != null ? parent.regionRoot() : null;
$else
    return super.regionRoot();
$endif
$endif
  }
]]

# Create region handler method
ASTDecl.createRegionHandlerMethod = [[
  public $DDGNodeName #name.handler() {
$if (IncrementalLevelRegion)
$if (IsRegionRoot)
    return handler;
$else
$if (#isASTNodeDecl)
    $ASTNode root = regionRoot();
    return root != null ? root.handler() : null;
$else
    $DDGNodeName h = super.handler();
    if (h != null) return h;
    $ASTNode root = regionRoot();
    return root != null ? root.handler() : null;
$endif
$endif
$endif
$if (IncrementalLevelNode)
    return handler;
$endif
  }
]]

# Create getParent method for region dependency tracking
ASTDecl.trackGetParentForRegionMethod = [[
// Overloading getParent for region root
public $ASTNode #name.getParent() {
  $ASTNode parent = super.getParent();
  if (state().IN_COMPUTATION > 0 && parent != null) {
    parent.handler().addDependant(handler);
  }
  return parent;
}
]]

# Create getChild method for region dependency tracking
ASTDecl.trackGetChildForRegionMethod = [[
/** @apilevel low-level */
 // Overloading getChild for region leaf
$if(IsListOrOpt)
public T #name.getChild(int i) {
  $ASTNode child = super.getChild(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return (T) child;
}
$else
public $ASTNode #name.getChild(int i) {
  $ASTNode child = super.getChild(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return child;
}
$endif
]]

# Create getChildNoTransform method for region dependency tracking
ASTDecl.trackGetChildNoTranForRegionMethod = [[
/** @apilevel low-level */
 // Overloading getChildNoTransform for region leaf
$if(IsListOrOpt)
public T #name.getChildNoTransform(int i) {
  $ASTNode child = super.getChildNoTransform(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return (T) child;
}
$else
public $ASTNode #name.getChildNoTransform(int i) {
  $ASTNode child = super.getChildNoTransform(i);
  if (state().IN_COMPUTATION > 0 && child.isRegionRoot()) {
    child.handler().addDependant(handler());
  }
  return child;
}
$endif
]]
