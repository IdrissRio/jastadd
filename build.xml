<project name="JastAdd2" default="build">

	<property name="src.dir" location="src"/>
	<property name="gen.dir" location="${src.dir}/gen"/>
	<property name="res.dir" location="${src.dir}/res"/>
	<property name="bin.dir" location="bin"/>
	<property name="tools.dir" value="tools"/>
	<property name="tt.src.dir" value="tinytemplate/src/java"/>

	<condition property="jastadd-jar" value="${jastadd.jar}"
		else="${tools.dir}/jastadd2.jar">
		<isset property="jastadd.jar"/>
	</condition>

	<description>Build script for JastAdd2</description>

	<taskdef name="jastadd" classname="jastadd.JastAddTask"
		classpath="${jastadd-jar}"/>

	<target name="build" depends="update-version-string"
		description="Generate sources and build JastAdd2">
		<mkdir dir="${gen.dir}/ast/AST"/>
		<mkdir dir="${gen.dir}/jrag/AST"/>
		<mkdir dir="${bin.dir}"/>
		<copy todir="${gen.dir}/jrag">
			<fileset dir="${src.dir}/javacc/jrag">
				<include name="**/*.java"/>
			</fileset>
		</copy>
		<jastadd jjtree="true" rewrite="true"
			grammar="Ast" package="ast.AST" outdir="${gen.dir}"
			lazyMaps="false">
			<fileset dir="${src.dir}/jastadd">
				<include name="**/*.jrag"/>
				<include name="**/*.jadd"/>
				<include name="**/*.ast"/>
			</fileset>
		</jastadd>
		<!-- Ast.jjt must be touched, or Ant will not run jjtree -->
		<touch file="${src.dir}/javacc/ast/Ast.jjt"/>
		<java classpath="${tools.dir}/javacc.jar" classname="org.javacc.jjtree.Main">
			<arg value="-OUTPUT_DIRECTORY=${gen.dir}/ast/AST"/>
			<arg value="-NODE_PREFIX=&quot;&quot;"/>
			<arg value="${src.dir}/javacc/ast/Ast.jjt"/>
		</java>
		<!-- NODE_PREFIX is not set correctly on Windows: -->
		<!--jjtree javacchome="${tools.dir}" nodeprefix="&quot;&quot;"
			outputdirectory="${gen.dir}/ast/AST"
			target="${src.dir}/javacc/ast/Ast.jjt"/-->
		<javacc javacchome="${tools.dir}" jdkversion="1.4"
			outputdirectory="${gen.dir}/ast/AST"
			target="${gen.dir}/ast/AST/Ast.jj"/>
		<!-- Ast.jjt must be touched, or Ant will not run jjtree -->
		<touch file="${src.dir}/javacc/jrag/Jrag.jjt"/>
		<jjtree javacchome="${tools.dir}"
			outputdirectory="${gen.dir}/jrag/AST"
			target="${src.dir}/javacc/jrag/Jrag.jjt"/>
		<javacc javacchome="${tools.dir}" jdkversion="1.4"
			outputdirectory="${gen.dir}/jrag/AST"
			target="${gen.dir}/jrag/AST/Jrag.jj"/>
		<javac source="1.6" target="1.6"
			destdir="${bin.dir}" includeantruntime="true">
			<src path="${src.dir}/java"/>
			<src path="${gen.dir}"/>
			<src path="${tt.src.dir}"/>
		</javac>
		<copy todir="${bin.dir}">
			<fileset dir="${res.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="clean">
		<mkdir dir="${gen.dir}"/>
		<delete file="jastadd2-src.zip"/>
		<delete file="jastadd2-bin.zip"/>
		<delete includeEmptyDirs="true">
			<fileset dir="${gen.dir}">
				<exclude name=".gitignore"/>
			</fileset>
		</delete>
		<delete dir="${bin.dir}"/>
	</target>

	<target name="jar" depends="build"
		description="package binary distribution">
		<jar destfile="jastadd2.jar">
			<manifest>
				<attribute name="Main-Class" value="org.jastadd.JastAdd"/>
				<attribute name="Implementation-Title" value="JastAdd II"/>
				<attribute name="Implementation-Version"
					value="${version.name}"/>
				<attribute name="Implementation-Vendor"
					value="The JastAdd Team"/>
				<attribute name="Implementation-URL"
					value="http://jastadd.org"/>
			</manifest>
			<fileset dir=".">
				<include name="LICENSE"/>
			</fileset>
			<fileset dir="${bin.dir}">
				<include name="**/*"/>
			</fileset>
		</jar>
	</target>

	<target name="source-zip" depends="jar,build-doc">
		<zip destfile="jastadd2-src.zip">
			<zipfileset dir="." prefix="jastadd2-src">
				<include name="src/java/**/*.java"/>
				<include name="src/jastadd/**/*"/>
				<include name="src/javacc/**/*"/>
				<include name="src/res/**/*"/>
				<include name="tools/Markdown.pl"/>
				<include name="tools/*.jar"/>
				<include name="tinytemplate/src/**/*"/>
				<include name="tinytemplate/LICENSE.txt"/>
				<include name="tinytemplate/README.md"/>
				<include name="doc/index.md.in"/>
				<include name="doc/index.html"/>
				<include name="doc/reference-manual.md"/>
				<include name="doc/reference-manual.html"/>
				<include name="doc/release-notes.md"/>
				<include name="doc/release-notes.html"/>
				<include name="LICENSE"/>
				<include name="README.md"/>
				<include name="README-binary-dist.md"/>
				<include name="ChangeLog"/>
				<include name="build.xml"/>
				<include name="licenses/*" />
				<exclude name="**/.git/**/*"/>
				<exclude name="**/.gitignore"/>
				<exclude name="**/.gitmodules"/>
			</zipfileset>
		</zip>
	</target>

	<target name="bin-zip" depends="jar,build-doc">
		<exec executable="perl" output="README-binary-dist.html">
			<arg value="${tools.dir}/Markdown.pl" />
			<arg value="README-binary-dist.md" />
		</exec>
		<zip destfile="jastadd2-bin.zip">
			<zipfileset dir="." prefix="jastadd2-bin">
				<include name="LICENSE"/>
				<include name="ChangeLog"/>
				<include name="jastadd2.jar"/>
				<include name="doc/index.html"/>
				<include name="doc/reference-manual.html"/>
				<include name="doc/release-notes.html"/>
				<include name="licenses/*" />
			</zipfileset>
			<zipfileset dir="." includes="README-binary-dist.html" fullpath="jastadd2-bin/README.html"/>
		</zip>
	</target>

	<target name="release" if="version"
		description="tag and commit new JastAdd2 release">
		<!-- NB: update release-notes.md before release! -->
		<!-- NB: all staged changes in this git repository will be committed! -->
		<echo message="Bumping version string and tagging release ${version}"/>
		<antcall target="update-version-string"/>
		<exec executable="git">
			<arg value="update-index"/>
			<arg value="--no-assume-unchanged"/>
			<arg value="${res.dir}/Version.properties"/>
		</exec>
		<exec executable="git">
			<arg value="add"/>
			<arg value="${res.dir}/Version.properties"/>
			<arg value="doc/release-notes.md"/>
		</exec>
		<exec executable="git">
			<arg value="commit"/>
			<arg value="-m"/>
			<arg value="Release ${version}"/>
		</exec>
		<exec executable="git">
			<arg value="tag"/>
			<arg value="-a"/>
			<arg value="${version}"/>
			<arg value="-m"/>
			<arg value="Version ${version}"/>
		</exec>
		<antcall target="build-dist"/>
	</target>

	<target name="build-dist"
		depends="clean,source-zip,bin-zip"
		description="build source and binary distribution files">
	</target>

	<target name="build-doc" depends="update-version-string"
		description="process documentation Markdown files">
		<echo message="Processing Markdown files"/>
		<copy file="doc/index.md.in" toFile="doc/index.md" overwrite="true">
			<filterset>
				<filter token="VERSION" value="${version}"/>
			</filterset>
		</copy>
		<chainedmapper id="mdmapper">
			<flattenmapper/>
			<globmapper from="*.md" to="doc${file.separator}*.html"/>
		</chainedmapper>
		<apply executable="perl" dest="doc">
			<arg value="${tools.dir}/Markdown.pl"/>
			<srcfile/>
			<fileset dir="doc" includes="*.md"/>
			<mapper refid="mdmapper"/>
			<redirector>
				<outputmapper refid="mdmapper"/>
			</redirector>
		</apply>
	</target>

	<target name="bootstrap" depends="jar"
		description="Prepare JastAdd2 bootstrapping (copy jastadd2.jar to tools directory)">
		<copy file="jastadd2.jar" toDir="${tools.dir}"/>
	</target>

	<!-- this target is only run if the 'version' property is undefined -->
	<target name="update-version-string" unless="version">
		<!-- get a new version string using git describe if possible -->
		<echo message="Updating JastAdd version string..."/>
		<exec executable="git" outputproperty="version"
			failifexecutionfails="false">
			<arg value="describe"/>
		</exec>
		<antcall target="-store-version-string"/>
		<!-- ensure version is defined if git was not available -->
		<property file="${res.dir}/Version.properties"/>
	</target>

	<target name="-store-version-string" if="version">
		<!-- store the new  version string in the correct property file -->
		<echo message="version=${version}"/>
		<tstamp>
			<format property="timestamp" pattern="yyyy-MM-dd'T'HH:mm'Z'"/>
		</tstamp>
		<propertyfile file="${res.dir}/Version.properties">
			<entry key="version" value="${version}"/>
			<entry key="timestamp" value="${timestamp}"/>
		</propertyfile>
		<exec executable="git">
			<arg value="update-index"/>
			<arg value="--assume-unchanged"/>
			<arg value="${res.dir}/Version.properties"/>
		</exec>
	</target>

</project>
