<project name="JastAdd2" default="build">
	<description>
OPTIONS:
-Ddebug=true          enable debug build

</description>

	<dirname property="jastadd2.basedir" file="${ant.file.JastAdd2}"/>

	<property name="jastadd2.build.dir" location="${jastadd2.basedir}/build"/>
	<property name="jastadd2.src.dir" location="${jastadd2.basedir}/src"/>
	<property name="jastadd2.gen.dir" location="${jastadd2.src.dir}/gen"/>
	<property name="jastadd2.res.dir" location="${jastadd2.src.dir}/res"/>
	<property name="jastadd2.bin.dir" location="${jastadd2.basedir}/ant-bin"/>
	<property name="jastadd2.tools.dir" value="${jastadd2.basedir}/tools"/>
	<property name="tt.src.dir" value="${jastadd2.basedir}/tinytemplate/src/java"/>

	<!-- set to "true" to compile in debug mode -->
	<property name="debug" value="false"/>

	<condition property="jastadd-jar" value="${jastadd.jar}"
		else="${jastadd2.tools.dir}/jastadd2.jar">
		<isset property="jastadd.jar"/>
	</condition>

	<description>Build script for JastAdd2</description>

	<taskdef name="jastadd" classname="org.jastadd.JastAddTask"
		classpath="${jastadd-jar}"/>

	<target name="gen" description="generate sources">
		<mkdir dir="${jastadd2.gen.dir}/org/jastadd/ast/AST"/>
		<mkdir dir="${jastadd2.gen.dir}/org/jastadd/jrag/AST"/>
		<mkdir dir="${jastadd2.bin.dir}"/>
		<copy todir="${jastadd2.gen.dir}/org/jastadd/jrag">
			<fileset dir="${jastadd2.src.dir}/javacc/jrag">
				<include name="**/*.java"/>
			</fileset>
		</copy>
		<jastadd jjtree="true" rewrite="true"
			grammar="Ast" package="org.jastadd.ast.AST" outdir="${jastadd2.gen.dir}"
			lazyMaps="false">
			<fileset dir="${jastadd2.src.dir}/jastadd">
				<include name="**/*.jrag"/>
				<include name="**/*.jadd"/>
				<include name="**/*.ast"/>
			</fileset>
		</jastadd>

		<!-- Ast.jjt must be touched, or Ant will not run jjtree -->
		<touch file="${jastadd2.src.dir}/javacc/ast/Ast.jjt"/>
		<java classpath="${jastadd2.tools.dir}/javacc.jar" classname="org.javacc.jjtree.Main">
			<arg value="-OUTPUT_DIRECTORY=${jastadd2.gen.dir}/org/jastadd/ast/AST"/>
			<arg value="-NODE_PREFIX=&quot;&quot;"/>
			<arg value="${jastadd2.src.dir}/javacc/ast/Ast.jjt"/>
		</java>
		<!-- NODE_PREFIX is not set correctly on Windows: -->
		<!--jjtree javacchome="${jastadd2.tools.dir}" nodeprefix="&quot;&quot;"
			outputdirectory="${jastadd2.gen.dir}/ast/AST"
			target="${jastadd2.src.dir}/javacc/ast/Ast.jjt"/-->
		<javacc
			javacchome="${jastadd2.tools.dir}"
			jdkversion="1.4"
			outputdirectory="${jastadd2.gen.dir}/org/jastadd/ast/AST"
			target="${jastadd2.gen.dir}/org/jastadd/ast/AST/Ast.jj"/>
		<!-- Ast.jjt must be touched, or Ant will not run jjtree -->
		<touch file="${jastadd2.src.dir}/javacc/jrag/Jrag.jjt"/>
		<jjtree
			javacchome="${jastadd2.tools.dir}"
			outputdirectory="${jastadd2.gen.dir}/org/jastadd/jrag/AST"
			target="${jastadd2.src.dir}/javacc/jrag/Jrag.jjt"/>
		<javacc
			javacchome="${jastadd2.tools.dir}"
			jdkversion="1.4"
			outputdirectory="${jastadd2.gen.dir}/org/jastadd/jrag/AST"
			target="${jastadd2.gen.dir}/org/jastadd/jrag/AST/Jrag.jj"/>
	</target>

	<target name="build" depends="gen,update-version-string,init-tinytemplate"
		description="build JastAdd2">
		<javac
			encoding="utf8"
			debug="${debug}"
			source="1.6" target="1.6"
			destdir="${jastadd2.bin.dir}" includeantruntime="true">
			<src path="${jastadd2.src.dir}/java"/>
			<src path="${jastadd2.gen.dir}"/>
			<src path="${tt.src.dir}"/>
		</javac>
		<copy todir="${jastadd2.bin.dir}">
			<fileset dir="${jastadd2.res.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<!-- Automatically initialize the submodule tinytemplate -->
	<target name="init-tinytemplate" depends="tinytemplate-check" unless="tinytemplate.exists" >
		<exec executable="git">
			<arg value="submodule"/>
			<arg value="init"/>
		</exec>
		<exec executable="git">
			<arg value="submodule"/>
			<arg value="update"/>
		</exec>
	</target>
	<target name="tinytemplate-check">
		<condition property="tinytemplate.exists">
			<available file="${tt.src.dir}" type="dir" />
		</condition>
	</target>

	<target name="clean-dist" depends="clean"
		description="remove distribution files">
		<delete dir="${jastadd2.build.dir}"/>
	</target>

	<target name="clean">
		<mkdir dir="${jastadd2.gen.dir}"/>
		<delete file="jastadd2.jar"/>
		<delete file="jastadd2-src.zip"/>
		<delete file="jastadd2-bin.zip"/>
		<delete includeEmptyDirs="true">
			<fileset dir="${jastadd2.gen.dir}">
				<exclude name=".gitignore"/>
			</fileset>
		</delete>
		<delete dir="${jastadd2.bin.dir}"/>
	</target>

	<target name="jar" depends="build"
		description="package binary distribution">
		<mkdir dir="${jastadd2.build.dir}"/>
		<jar destfile="${jastadd2.build.dir}/jastadd2-${version}.jar">
			<manifest>
				<attribute name="Main-Class" value="org.jastadd.JastAdd"/>
				<attribute name="Implementation-Title" value="JastAdd II"/>
				<attribute name="Implementation-Version"
					value="${version.name}"/>
				<attribute name="Implementation-Vendor"
					value="The JastAdd Team"/>
				<attribute name="Implementation-URL"
					value="http://jastadd.org"/>
			</manifest>
			<fileset dir=".">
				<include name="LICENSE"/>
			</fileset>
			<fileset dir="${jastadd2.bin.dir}">
				<include name="**/*"/>
			</fileset>
		</jar>
		<!-- symlink to latest jar -->
		<symlink overwrite="true"
			link="${jastadd2.basedir}/jastadd2.jar"
			resource="${jastadd2.build.dir}/jastadd2-${version}.jar"/>
	</target>

	<target name="source-zip" depends="jar,build-doc">
		<zip destfile="jastadd2-src.zip">
			<zipfileset dir="." prefix="jastadd2-src">
				<include name="src/java/**/*.java"/>
				<include name="src/jastadd/**/*"/>
				<include name="src/javacc/**/*"/>
				<include name="src/res/**/*"/>
				<include name="tools/Markdown.pl"/>
				<include name="tools/*.jar"/>
				<include name="tinytemplate/src/**/*"/>
				<include name="tinytemplate/LICENSE.txt"/>
				<include name="tinytemplate/README.md"/>
				<include name="doc/index.md.in"/>
				<include name="doc/index.html"/>
				<include name="doc/reference-manual.md"/>
				<include name="doc/reference-manual.html"/>
				<include name="doc/release-notes.md"/>
				<include name="doc/release-notes.html"/>
				<include name="LICENSE"/>
				<include name="README.md"/>
				<include name="README-binary-dist.md"/>
				<include name="ChangeLog"/>
				<include name="build.xml"/>
				<include name="licenses/*" />
				<exclude name="**/.git/**/*"/>
				<exclude name="**/.gitignore"/>
				<exclude name="**/.gitmodules"/>
			</zipfileset>
		</zip>
	</target>

	<target name="bin-zip" depends="jar,build-doc">
		<exec executable="perl" output="README-binary-dist.html">
			<arg value="${jastadd2.tools.dir}/Markdown.pl" />
			<arg value="README-binary-dist.md" />
		</exec>
		<zip destfile="jastadd2-bin.zip">
			<zipfileset dir="." prefix="jastadd2-bin">
				<include name="LICENSE"/>
				<include name="ChangeLog"/>
				<include name="jastadd2.jar"/>
				<include name="doc/index.html"/>
				<include name="doc/reference-manual.html"/>
				<include name="doc/release-notes.html"/>
				<include name="licenses/*" />
			</zipfileset>
			<zipfileset dir="." includes="README-binary-dist.html" fullpath="jastadd2-bin/README.html"/>
		</zip>
	</target>

	<target name="release" if="version"
		description="tag and commit new JastAdd2 release">
		<!-- NB: update release-notes.md before release! -->
		<!-- NB: all staged changes in this git repository will be committed! -->
		<echo message="Bumping version string and tagging release ${version}"/>
		<antcall target="-store-version-string"/>
		<exec executable="git">
			<arg value="update-index"/>
			<arg value="--no-assume-unchanged"/>
			<arg value="${jastadd2.res.dir}/Version.properties"/>
		</exec>
		<exec executable="git">
			<arg value="add"/>
			<arg value="${jastadd2.res.dir}/Version.properties"/>
			<arg value="doc/release-notes.md"/>
		</exec>
		<exec executable="git">
			<arg value="commit"/>
			<arg value="-m"/>
			<arg value="Release ${version}"/>
		</exec>
		<exec executable="git">
			<arg value="tag"/>
			<arg value="-a"/>
			<arg value="${version}"/>
			<arg value="-m"/>
			<arg value="Version ${version}"/>
		</exec>
		<antcall target="build-dist"/>
	</target>

	<target name="build-dist"
		depends="clean,source-zip,bin-zip"
		description="build source and binary distribution files">
	</target>

	<target name="build-doc" depends="update-version-string"
		description="process documentation Markdown files">
		<echo message="Processing Markdown files"/>
		<copy file="doc/index.md.in" toFile="doc/index.md" overwrite="true">
			<filterset>
				<filter token="VERSION" value="${version}"/>
			</filterset>
		</copy>
		<chainedmapper id="mdmapper">
			<flattenmapper/>
			<globmapper from="*.md" to="doc${file.separator}*.html"/>
		</chainedmapper>
		<apply executable="perl" dest="doc">
			<arg value="${jastadd2.tools.dir}/Markdown.pl"/>
			<srcfile/>
			<fileset dir="doc" includes="*.md"/>
			<mapper refid="mdmapper"/>
			<redirector>
				<outputmapper refid="mdmapper"/>
			</redirector>
		</apply>
	</target>

	<target name="bootstrap" depends="jar"
		description="Prepare JastAdd2 bootstrapping (copy jastadd2.jar to tools directory)">
		<copy file="jastadd2.jar" toDir="${jastadd2.tools.dir}"/>
	</target>

	<target name="-timestamp">
		<tstamp>
			<format property="timestamp" pattern="yyyy-MM-dd'T'HH:mm'Z'"/>
			<format property="build.date" pattern="yyyy-MM-dd"/>
		</tstamp>
	</target>

	<!-- this target is only run if the 'version' property is undefined -->
	<target name="update-version-string" depends="-timestamp" unless="version">
		<!-- get a new version string using git describe if possible -->
		<echo message="Updating JastAdd version string..."/>
		<exec executable="git" outputproperty="gitoutput"
			errorproperty="giterror" logError="false"
			failifexecutionfails="false" resultproperty="gitresult">
			<arg value="--git-dir=${jastadd2.basedir}/.git"/>
			<arg value="describe"/>
		</exec>
		<property file="${jastadd2.res.dir}/Version.properties" prefix="old"/>
		<condition property="version" value="${gitoutput}"
			else="${old.version}">
			<equals arg1="${gitresult}" arg2="0"/>
		</condition>
		<antcall target="-store-version-string"/>
		<!-- ensure version is defined if git was not available -->
		<property file="${jastadd2.res.dir}/Version.properties"/>
	</target>

	<target name="-store-version-string" depends="-timestamp" if="version">
		<!-- store the new  version string in the correct property file -->
		<echo message="version=${version}"/>
		<propertyfile file="${jastadd2.res.dir}/Version.properties">
			<entry key="version" value="${version}"/>
			<entry key="timestamp" value="${timestamp}"/>
			<entry key="build.date" value="${build.date}"/>
		</propertyfile>
		<exec executable="git" errorproperty="giterror" logError="false">
			<arg value="--git-dir=${jastadd2.basedir}/.git"/>
			<arg value="--work-tree=${jastadd2.basedir}"/>
			<arg value="update-index"/>
			<arg value="--assume-unchanged"/>
			<arg value="${jastadd2.res.dir}/Version.properties"/>
		</exec>
	</target>

</project>
