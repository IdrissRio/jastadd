apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'signing'

/** Helper function to run a command. Returns the command output if the command succeeded. */
def tryCommand(List command, boolean failOnError = false) {
	def out = new StringBuilder()
	def err = new StringBuilder()
	def proc = command.execute()
	proc.waitForProcessOutput(out, err)
	if (proc.exitValue()) {
		def msg = "failed to run '${command[0]}' command (args: ${command.tail()})\n$err$out"
		if (failOnError) {
			throw new GradleException(msg)
		} else {
			print 'Warning: '
			println msg
		}
		""
	} else {
		if (err) println "${err}"
		out.toString()
	}
}

/** Helper function to retrieve the current version string. */
def getVersion() {
	if (hasProperty('newVersion')) {
		// A new version string should be saved.
		def date = new Date()
		Properties version = new Properties()
		version['version'] = newVersion
		version['timestamp'] = date.format("yyyy-MM-dd'T'HH:mm'Z'")
		version['build.date'] = date.format('yyyy-MM-dd')
		version.store(file('src/res/Version.properties').newWriter(), null)
		return newVersion
	} else {
		def output = tryCommand(['git', 'describe'])
		if (output) {
			// Use Git describe output.
			output.readLines()[0]
		} else {
			// Git command failed. Read the previous version string instead.
			Properties version = new Properties()
			version.load(new FileInputStream(file('src/res/Version.properties')))
			version['version']
		}
	}
}

project.version = getVersion()
project.group = 'org.jastadd'
project.archivesBaseName = 'jastadd'

println("Building version: ${project.version}")

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

mainClassName = 'org.jastadd.JastAdd'
jar.manifest.attributes 'Main-Class': mainClassName
jar.destinationDir = projectDir
jar.archiveName = 'jastadd2.jar'

configurations {
	deployerJars
	jastadd
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile 'org.apache.ant:ant:1.9.4'
	jastadd('org.jastadd:jastadd:2.1.13') { force = true /* avoid conflict with local artifact */ }
}

processResources.dependsOn 'updateVersionString'
processResources.dependsOn 'copyResources'

task copyResources(type: Copy) {
	from('src/res') {
		exclude 'Version.properties'
	}
	into 'src/gen-res'
}

task release(dependsOn: [ 'sourceZip', 'binaryZip' ]) << {
	if (!project.hasProperty('newVersion')) {
		throw new GradleException('You must set -PnewVersion=<VERSION> when running the release task!')
	}
	assert version.equals(newVersion)
	def versionFile = file('src/res/Version.properties')
	tryCommand(['git', 'add', versionFile.path], true)
	tryCommand(['git', 'commit', '-m', "Release $version"], true)
	tryCommand(['git', 'tag', '-a', "$version", '-m', "Version $version"], true)
}

task sourceZip(type: Zip, dependsOn: 'documentation') {
	destinationDir = project.rootDir
	archiveName = 'jastadd2-src.zip'

	from('.') {
		include 'src/java/**/*.java'
		include 'src/jastadd/**/*'
		include 'src/javacc/**/*'
		include 'src/res/**/*'
		include 'tools/Markdown.pl'
		include 'tools/*.jar'
		include 'tinytemplate/src/**/*'
		include 'tinytemplate/LICENSE.txt'
		include 'tinytemplate/README.md'
		include 'doc/index.md.in'
		include 'doc/index.html'
		include 'doc/reference-manual.md'
		include 'doc/reference-manual.html'
		include 'doc/release-notes.md'
		include 'doc/release-notes.html'
		include 'LICENSE'
		include 'README.md'
		include 'README-binary-dist.md'
		include 'ChangeLog'
		include 'build.xml'
		include 'licenses/*'
		exclude '**/.git/**/*'
		exclude '**/.gitignore'
		exclude '**/.gitmodules'
	}
	into 'jastadd2-src'
}

task binaryDistReadme << {
	ant.exec(executable: 'perl', output: 'README.html') {
		arg(value: 'tools/Markdown.pl')
		arg(value: 'README-binary-dist.md')
	}
}

task binaryZip(type: Zip, dependsOn: [ 'jar', 'documentation', 'binaryDistReadme' ]) {
	destinationDir = project.rootDir
	archiveName = 'jastadd2-bin.zip'

	from('.') {
		include 'README.html'
		include 'LICENSE'
		include 'ChangeLog'
		include 'jastadd2.jar'
		include 'doc/index.html'
		include 'doc/reference-manual.html'
		include 'doc/release-notes.html'
		include 'licenses/*'
	}
	into 'jastadd2-bin'
}

task documentation << {
	println 'Processing Markdown files'
	ant.copy(file: 'doc/index.md.in', toFile: 'doc/index.md', overwrite: 'true') {
		filterset {
			filter(token: 'VERSION', value: version)
		}
	}
	ant.chainedmapper(id: 'mdmapper') {
		flattenmapper()
		globmapper(from: '*.md', to: "doc${File.separator}*.html")
	}
	ant.apply(executable: 'perl', dest: 'doc') {
		arg(value: 'tools/Markdown.pl')
		srcfile()
		fileset(dir: 'doc', includes: '*.md')
		mapper(refid: 'mdmapper')
		redirector {
			outputmapper(refid: 'mdmapper')
		}
	}
}

task updateVersionString {
	description 'Store the current version string in src/gen-res/Version.properties'

	outputs.upToDateWhen {
		def props = new Properties()
		def output = file('src/gen-res/Version.properties')
		if (output.isFile()) {
			output.withInputStream { stream -> props.load(stream) }
		}
		props['version'] == project.version
	}

	doLast {
		file('src/gen-res').mkdirs()
		def date = new Date()
		def versionFile = file('src/gen-res/Version.properties')
		ant.propertyfile(file: versionFile) {
			entry(key: 'version', value: project.version)
			entry(key: 'timestamp', value: date.format("yyyy-MM-dd'T'HH:mm'Z'"))
			entry(key: 'build.date', value: date.format('yyyy-MM-dd'))
		}
	}
}

task jjtree {
	description 'build parser ASTs with JJTree'

	inputs.dir 'src/javacc'
	outputs.dir 'src/gen/org/jastadd/ast/AST'
	outputs.dir 'src/gen/org/jastadd/jrag/AST'

	doLast {
		file('src/gen/org/jastadd/ast/AST').mkdirs()
		file('src/gen/org/jastadd/jrag/AST').mkdirs()

		ant {
			// Ast.jjt must be touched, or Ant will not run jjtree
			touch(file: 'src/javacc/ast/Ast.jjt')
			java(classpath: 'tools/javacc.jar', classname: 'org.javacc.jjtree.Main') {
				arg(value: '-OUTPUT_DIRECTORY=src/gen/org/jastadd/ast/AST')
				arg(value: '-NODE_PREFIX=""')
				arg(value: 'src/javacc/ast/Ast.jjt')
			}
			// Jrag.jjt must be touched, or Ant will not run jjtree
			touch(file: 'src/javacc/jrag/Jrag.jjt')
			jjtree(
				javacchome: 'tools',
				outputdirectory: 'src/gen/org/jastadd/jrag/AST',
				target: 'src/javacc/jrag/Jrag.jjt')
		}
	}
}

task javacc(dependsOn: 'jjtree') {
	description 'build aspect and grammar parsers with JavaCC'

	inputs.file 'src/gen/org/jastadd/ast/AST/Ast.jj'
	inputs.file 'src/gen/org/jastadd/jrag/AST/Jrag.jj'
	outputs.dir 'src/gen/org/jastadd/jrag/AST'
	outputs.dir 'src/gen/org/jastadd/ast/AST'

	doLast {
		ant {
			javacc(javacchome: 'tools',
				jdkversion: '1.4',
				outputdirectory: 'src/gen/org/jastadd/ast/AST',
				target: 'src/gen/org/jastadd/ast/AST/Ast.jj')
			javacc(
				javacchome: 'tools',
				jdkversion: '1.4',
				outputdirectory: 'src/gen/org/jastadd/jrag/AST',
				target: 'src/gen/org/jastadd/jrag/AST/Jrag.jj')
		}
	}
}

task additionalParserSources(type: Copy, dependsOn: 'javacc') {
	description 'copy additional parser sources'

	from('src/javacc/jrag') {
		include '**/*.java'
	}
	into 'src/gen/org/jastadd/jrag'
}

compileJava.dependsOn 'generateJava'

task generateJava(dependsOn: [ 'javacc', 'additionalParserSources' ]) {
	description 'generate Java sources from JastAdd aspects'

	inputs.dir 'src/jastadd'
	outputs.dir 'src/gen/org/jastadd/ast/AST'

	doLast {
		ant.taskdef(
			name: 'jastadd',
			classname: 'org.jastadd.JastAddTask',
			classpath: configurations.jastadd.asPath)
		ant.jastadd(
			jjtree: true,
			rewrite: 'regular',
			grammar: 'Ast',
			package: 'org.jastadd.ast.AST',
			outdir: 'src/gen',
			lazyMaps: false) {
			fileset(dir: 'src/jastadd') {
				include(name: '**/*.ast')
				include(name: '**/*.jadd')
				include(name: '**/*.jrag')
			}
		}
	}
}

clean.dependsOn 'cleanJar'
clean.dependsOn 'cleanGen'
clean.dependsOn 'cleanArtifacts'

task cleanGen(type: Delete) {
	description 'remove generated source files'
	delete 'src/gen/org'
}

task cleanArtifacts(type: Delete) {
	description 'remove generated Zip and Jar files'
	delete 'jastadd2-src.zip'
	delete 'jastadd2-bin.zip'
	delete 'README-binary-dist.html'
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	sign configurations.archives
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

sourceSets {
	main {
		java {
			srcDir 'src/gen'
			srcDir 'src/java'
			srcDir 'tinytemplate/src/java'
		}
		resources {
			srcDir 'src/gen-res'
		}
	}
}

uploadArchives {
	repositories.mavenDeployer {
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
			if (project.hasProperty('ossrhUsername')) {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}

		snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
			if (project.hasProperty('ossrhUsername')) {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}

		pom.project {
			name 'JastAdd2'
			packaging 'jar'
			description 'A metacompilation framework for Java using attribute grammars.'
			url 'http://jastadd.org'
			organization {
				name 'The JastAdd Team'
				url 'http://jastadd.org'
			}
			licenses {
				license {
					name 'Modified BSD License'
					url 'http://opensource.org/licenses/BSD-3-Clause'
					distribution 'repo'
				}
			}
			developers {
				developer {
					name 'Görel Hedin'
					email 'gorel.hedin@cs.lth.se'
				}
				developer {
					name 'Eva Magnusson'
				}
				developer {
					name 'Torbjörn Ekman'
				}
				developer {
					name 'Emma Söderberg'
					email 'emso@google.com'
				}
				developer {
					name 'Jesper Öqvist'
					email 'jesper.oqvist@cs.lth.se'
				}
				developer {
					name 'Niklas Fors'
					email 'niklas.fors@cs.lth.se'
				}
			}
			scm {
				connection 'scm:git:https://bitbucket.org/jastadd/jastadd2.git'
				url 'https://bitbucket.org/jastadd/jastadd2'
			}
		}
	}
}
