apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'jar'

if (!file('tinytemplate/README.md').exists()) {
  throw new GradleException('Submodule tinytemplate seems to be missing. '
      + 'Please run "git submodule init" and then "git submodule update".')
}

def fullVersion
if (hasProperty('newVersion')) {
	// A new version string should be saved.
	def date = new Date()
	def props = new Properties()
	props['version'] = newVersion
	props['timestamp'] = date.format("yyyy-MM-dd'T'HH:mm'Z'")
	props['build.date'] = date.format('yyyy-MM-dd')
	props.store(file('src/res/Version.properties').newWriter(), null)
	version = fullVersion = newVersion
} else {
	try {
		def proc = 'git describe'.execute(null, rootDir)
		if	(proc.waitFor() == 0) {
			fullVersion = proc.text.trim()
			// Trim to get latest tag:
			version = (fullVersion =~ /-\d+\-g.+$/).replaceAll('')
		} else {
			logger.warn('No git tags found.')
		}
	} catch (IOException e) {
		logger.warn("Failded to run git describe (${e.getMessage()}).")
	}
	if (!fullVersion?.trim()) {
		logger.warn('Reading stored version string.')
		def props = new Properties()
		file('src/res/Version.properties').withInputStream { stream -> props.load(stream) }
		version = fullVersion = props['version']
	}
}
println "Building JastAdd version ${fullVersion}"

group = 'org.jastadd'
archivesBaseName = 'jastadd'

sourceCompatibility = targetCompatibility = '1.6'

mainClassName = 'org.jastadd.JastAdd'
jar.manifest.attributes 'Main-Class': mainClassName
jar.destinationDir = projectDir
jar.archiveName = 'jastadd2.jar'

configurations {
	deployerJars
	jastadd
	javacc
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile 'org.apache.ant:ant:1.9.4'
	jastadd('org.jastadd:jastadd:2.2.2') { force = true /* Avoid conflict with local artifact. */ }
	javacc 'net.java.dev.javacc:javacc:4.0'
}

processResources.dependsOn 'updateVersionString'
processResources.dependsOn 'copyResources'

task copyResources(type: Copy) {
	from 'src/template'
	into 'src/gen-res/template'
}

task release(dependsOn: [ 'sourceZip', 'binaryZip' ]) {
	doLast {
		if (!project.hasProperty('newVersion')) {
			throw new GradleException('You should add -PnewVersion=<VERSION> so the release task embeds the correct version string!')
		}
		assert version.equals(newVersion)
	}
}

task sourceZip(type: Zip, dependsOn: 'documentation') {
	destinationDir = project.rootDir
	archiveName = 'jastadd2-src.zip'

	from('.') {
		include 'src/java/**/*.java'
		include 'src/jastadd/**/*'
		include 'src/javacc/**/*'
		include 'src/res/**/*'
		include 'src/template/**/*'
		include 'tools/pymarkdown.py'
		include 'tools/*.jar'
		include 'tinytemplate/src/**/*'
		include 'tinytemplate/LICENSE.txt'
		include 'tinytemplate/README.md'
		include 'doc/index.md.in'
		include 'doc/index.html'
		include 'doc/reference-manual.md'
		include 'doc/reference-manual.html'
		include 'doc/release-notes.md'
		include 'doc/release-notes.html'
		include 'LICENSE'
		include 'README.md'
		include 'README-binary-dist.md'
		include 'ChangeLog'
		include 'build.xml'
		include 'licenses/*'
		exclude '**/.git/**/*'
		exclude '**/.gitignore'
		exclude '**/.gitmodules'
	}
	into 'jastadd2-src'
}

task binaryDistReadme(type: Exec) {
	description 'Generate the README for binary distributions'
	commandLine 'python', file('tools/pymarkdown.py').path, 'README-binary-dist.md'

	inputs.file 'README-binary-dist.md'
	outputs.file 'README.html'

	doFirst {
		standardOutput = new FileOutputStream(file('README.html'))
	}
}

task binaryZip(type: Zip) {
	description 'build the binary Zip'
	dependsOn 'jar', 'documentation', 'binaryDistReadme'

	destinationDir = project.rootDir
	archiveName = 'jastadd2-bin.zip'

	from('.') {
		include 'README.html'
		include 'LICENSE'
		include 'ChangeLog'
		include 'jastadd2.jar'
		include 'doc/index.html'
		include 'doc/reference-manual.html'
		include 'doc/release-notes.html'
		include 'licenses/*'
	}
	into 'jastadd2-bin'
}

task documentation {
	doLast {
		println 'Processing Markdown files'
		ant.copy(file: 'doc/index.md.in', toFile: 'doc/index.md', overwrite: 'true') {
			filterset {
				filter(token: 'VERSION', value: version)
			}
		}
		ant.chainedmapper(id: 'mdmapper') {
			flattenmapper()
			globmapper(from: '*.md', to: "doc${File.separator}*.html")
		}
		ant.apply(executable: 'python', dest: 'doc') {
			arg(value: 'tools/pymarkdown.py')
			srcfile()
			fileset(dir: 'doc', includes: '*.md')
			mapper(refid: 'mdmapper')
			redirector {
				outputmapper(refid: 'mdmapper')
			}
		}
	}
}

task updateVersionString {
	description 'Store the current version string in src/gen-res/Version.properties'

	outputs.upToDateWhen {
		def props = new Properties()
		def output = file('src/gen-res/Version.properties')
		if (output.isFile()) {
			output.withInputStream { stream -> props.load(stream) }
		}
		props['version'] == fullVersion
	}

	doLast {
		file('src/gen-res').mkdirs()
		def date = new Date()
		Properties props = new Properties()
		props['version'] = fullVersion
		props['timestamp'] = date.format("yyyy-MM-dd'T'HH:mm'Z'")
		props['build.date'] = date.format('yyyy-MM-dd')
		props.store(file('src/gen-res/Version.properties').newWriter(), null)
	}
}

task grammarAst(type: JavaExec) {
	description 'build abstract syntax parser AST with JJTree'

	classpath = configurations.javacc
	main = 'org.javacc.jjtree.Main'
	args "-OUTPUT_DIRECTORY=${file('src/gen/org/jastadd/ast/AST').path}",
		'-NODE_PREFIX=""',
		file('src/javacc/ast/Ast.jjt').path


	inputs.file 'src/javacc/ast/Ast.jjt'
	outputs.dir 'src/gen/org/jastadd/ast/AST'

	doFirst {
		file('src/gen/org/jastadd/ast/AST').mkdirs()
	}
}

task aspectAst(type: JavaExec) {
	description 'build aspect parser AST with JJTree'

	classpath = configurations.javacc
	main = 'org.javacc.jjtree.Main'
	args "-OUTPUT_DIRECTORY=${file('src/gen/org/jastadd/jrag/AST').path}",
		file('src/javacc/jrag/Jrag.jjt').path


	inputs.file 'src/javacc/jrag/Jrag.jjt'
	outputs.dir 'src/gen/org/jastadd/jrag/AST'

	doFirst {
		file('src/gen/org/jastadd/jrag/AST').mkdirs()
	}
}

task grammarParser(type: JavaExec) {
	description 'build aspect and grammar parsers with JavaCC'
	dependsOn 'grammarAst'

	classpath = configurations.javacc
	main = 'org.javacc.parser.Main'
	args '-JDK_VERSION=1.4',
		"-OUTPUT_DIRECTORY=${file('src/gen/org/jastadd/ast/AST').path}",
		file('src/gen/org/jastadd/ast/AST/Ast.jj').path

	inputs.file 'src/gen/org/jastadd/ast/AST/Ast.jj'
	outputs.dir 'src/gen/org/jastadd/ast/AST'
}

task aspectParser(type: JavaExec) {
	description 'build aspect and grammar parsers with JavaCC'
	dependsOn 'aspectAst'

	classpath = configurations.javacc
	main = 'org.javacc.parser.Main'
	args '-JDK_VERSION=1.4',
		"-OUTPUT_DIRECTORY=${file('src/gen/org/jastadd/jrag/AST').path}",
		file('src/gen/org/jastadd/jrag/AST/Jrag.jj').path

	inputs.file 'src/gen/org/jastadd/jrag/AST/Jrag.jj'
	outputs.dir 'src/gen/org/jastadd/jrag/AST'
}

task additionalParserSources(type: Copy) {
	description 'copy additional parser sources'
	dependsOn 'grammarParser', 'aspectParser'

	from('src/javacc/jrag') {
		include '**/*.java'
	}
	into 'src/gen/org/jastadd/jrag'
}

compileJava.dependsOn 'generateJava'

task generateJava(type: JavaExec) {
	description 'Generate the Abstract Grammar sources from JastAdd aspects'
	dependsOn 'additionalParserSources'

	classpath = configurations.jastadd
	main = 'org.jastadd.JastAdd'
	args ([ '--rewrite=regular', '--grammar=Ast', '--jjtree',
		'--package=org.jastadd.ast.AST',
		'--lazyMaps=false', "--o=${file('src/gen').path}" ] +
		fileTree('src/jastadd')
			.include('**/*.ast')
			.include('**/*.jadd')
			.include('**/*.jrag')
			.files)

	inputs.dir 'src/jastadd'
	outputs.dir 'src/gen/org/jastadd/ast/AST'
}

clean.dependsOn 'cleanJar'
clean.dependsOn 'cleanGen'
clean.dependsOn 'cleanArtifacts'

task cleanGen(type: Delete) {
	description 'remove generated source files'
	delete 'src/gen/org'
	delete 'src/gen-res'
}

task cleanArtifacts(type: Delete) {
	description 'remove generated Zip and Jar files'
	delete 'jastadd2-src.zip'
	delete 'jastadd2-bin.zip'
	delete 'README.html'
	delete 'README-binary-dist.html' // Old README.html name.
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	// Require keyId to sign:
	required { project.hasProperty('signing.keyId') }
	sign configurations.archives
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

sourceSets {
	main {
		java {
			srcDir 'src/gen'
			srcDir 'src/java'
			srcDir 'tinytemplate/src/java'
		}
		resources {
			srcDir 'src/gen-res'
		}
	}
}

if (project.hasProperty('ossrhUsername')) {
	uploadArchives {
		repositories.mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name 'JastAdd2'
				packaging 'jar'
				description 'A metacompilation framework for Java using attribute grammars.'
				url 'http://jastadd.org'
				organization {
					name 'The JastAdd Team'
					url 'http://jastadd.org'
				}
				licenses {
					license {
						name 'Modified BSD License'
						url 'http://opensource.org/licenses/BSD-3-Clause'
						distribution 'repo'
					}
				}
				developers {
					developer {
						name 'Görel Hedin'
						email 'gorel.hedin@cs.lth.se'
					}
					developer {
						name 'Eva Magnusson'
					}
					developer {
						name 'Torbjörn Ekman'
					}
					developer {
						name 'Emma Söderberg'
						email 'emso@google.com'
					}
					developer {
						name 'Jesper Öqvist'
						email 'jesper.oqvist@cs.lth.se'
					}
					developer {
						name 'Niklas Fors'
						email 'niklas.fors@cs.lth.se'
					}
				}
				scm {
					connection 'scm:git:https://bitbucket.org/jastadd/jastadd2.git'
					url 'https://bitbucket.org/jastadd/jastadd2'
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.4.1'
}
